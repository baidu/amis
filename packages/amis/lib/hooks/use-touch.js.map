{
    "version": 3,
    "file": "use-touch.js",
    "sourceRoot": "",
    "sources": [
        "/src/hooks/use-touch.ts"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {useCallback, useRef} from 'react';\n\nconst MIN_DISTANCE = 10;\n\ntype Direction = '' | 'vertical' | 'horizontal';\n\nfunction getDirection(x: number, y: number) {\n  if (x > y && x > MIN_DISTANCE) {\n    return 'horizontal';\n  }\n  if (y > x && y > MIN_DISTANCE) {\n    return 'vertical';\n  }\n  return '';\n}\n\nconst INITIAL_STATE = {\n  startX: 0,\n  startY: 0,\n  deltaX: 0,\n  deltaY: 0,\n  offsetX: 0,\n  offsetY: 0,\n  direction: '' as Direction\n};\n\ntype StateType = Partial<typeof INITIAL_STATE>;\ntype StateFunctionType = (value: StateType) => typeof INITIAL_STATE;\n\nconst useTouch = () => {\n  const refState = useRef(INITIAL_STATE);\n  const innerState = refState.current;\n\n  const update = (value: StateType | StateFunctionType) => {\n    if (typeof value === 'function') {\n      value = value(refState.current);\n    }\n    Object.entries(value).forEach(([k, v]) => {\n      //@ts-ignore\n      refState.current[k] = v;\n    });\n  };\n\n  const isVertical = useCallback(\n    () => innerState.direction === 'vertical',\n    [innerState.direction]\n  );\n  const isHorizontal = useCallback(\n    () => innerState.direction === 'horizontal',\n    [innerState.direction]\n  );\n\n  const reset = () => {\n    update({\n      deltaX: 0,\n      deltaY: 0,\n      offsetX: 0,\n      offsetY: 0,\n      direction: ''\n    });\n  };\n\n  const start = ((event: TouchEvent) => {\n    reset();\n    update({\n      startX: event.touches[0].clientX,\n      startY: event.touches[0].clientY\n    });\n  }) as EventListener;\n\n  const move = ((event: TouchEvent) => {\n    const touch = event.touches[0];\n\n    update(value => {\n      // Fix: Safari back will set clientX to negative number\n      const newState = {...value} as typeof innerState;\n\n      newState.deltaX = touch.clientX < 0 ? 0 : touch.clientX - newState.startX;\n      newState.deltaY = touch.clientY - newState.startY;\n      newState.offsetX = Math.abs(newState.deltaX);\n      newState.offsetY = Math.abs(newState.deltaY);\n\n      if (!newState.direction) {\n        newState.direction = getDirection(newState.offsetX, newState.offsetY);\n      }\n      return newState;\n    });\n  }) as EventListener;\n\n  return {\n    ...innerState,\n    move,\n    start,\n    reset,\n    isVertical,\n    isHorizontal\n  };\n};\n\nexport default useTouch;\n"
    ]
}