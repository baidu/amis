{
    "version": 3,
    "file": "index.js",
    "sourceRoot": "",
    "sources": [
        "/src/store/index.ts"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {\n  types,\n  getEnv,\n  detach,\n  setLivelynessChecking,\n  isAlive,\n  Instance\n} from 'mobx-state-tree';\nimport {iRendererStore, IIRendererStore, SIRendererStore} from './iRenderer';\nimport {ServiceStore} from './service';\nimport {ComboStore} from './combo';\nimport {FormStore} from './form';\nimport {CRUDStore} from './crud';\nimport {TableStore} from './table';\nimport {TableStoreV2} from './table-v2';\nimport {ListStore} from './list';\nimport {ModalStore} from './modal';\nimport {TranslateFn} from '../locale';\nimport find from 'lodash/find';\nimport {IStoreNode} from './node';\nimport {FormItemStore} from './formItem';\nimport {addStore, getStoreById, getStores, removeStore} from './manager';\nimport {PaginationStore} from './pagination';\nimport {AppStore} from './app';\nimport {RootStore} from './root';\n\nsetLivelynessChecking(\n  process.env.NODE_ENV === 'production' ? 'ignore' : 'error'\n);\n\nconst allowedStoreList = [\n  ServiceStore,\n  FormStore,\n  ComboStore,\n  CRUDStore,\n  TableStore,\n  TableStoreV2,\n  ListStore,\n  ModalStore,\n  FormItemStore,\n  PaginationStore,\n  AppStore\n];\n\nexport const RendererStore = types\n  .model('RendererStore', {\n    storeType: 'RendererStore'\n  })\n  .props({\n    visibleState: types.optional(types.frozen(), {}),\n    disableState: types.optional(types.frozen(), {})\n  })\n  .views(self => ({\n    get fetcher() {\n      return getEnv(self).fetcher;\n    },\n\n    get notify() {\n      return getEnv(self).notify;\n    },\n\n    get isCancel(): (value: any) => boolean {\n      return getEnv(self).isCancel;\n    },\n\n    get __(): TranslateFn {\n      return getEnv(self).translate;\n    },\n    getStoreById(id: string) {\n      return getStoreById(id);\n    },\n\n    get stores() {\n      return getStores();\n    }\n  }))\n  .actions(self => ({\n    addStore(store: {\n      storeType: string;\n      id: string;\n      path: string;\n      parentId?: string;\n      [propName: string]: any;\n    }): IStoreNode {\n      if (store.storeType === RootStore.name) {\n        return addStore(RootStore.create(store, getEnv(self)));\n      }\n\n      const factory = find(\n        allowedStoreList,\n        item => item.name === store.storeType\n      )!;\n\n      return addStore(factory.create(store as any, getEnv(self)));\n    },\n\n    removeStore(store: IStoreNode) {\n      // store.dispose();\n      removeStore(store);\n    },\n\n    setVisible(id: string, value: boolean) {\n      const state = {\n        ...self.visibleState,\n        [id]: value\n      };\n      self.visibleState = state;\n    },\n\n    setDisable(id: string, value: boolean) {\n      const state = {\n        ...self.disableState,\n        [id]: value\n      };\n      self.disableState = state;\n    }\n  }));\n\nexport type IRendererStore = Instance<typeof RendererStore>;\nexport {iRendererStore, IIRendererStore};\nexport const RegisterStore = function (store: any) {\n  allowedStoreList.push(store as any);\n};\n"
    ]
}