{
    "version": 3,
    "file": "app.js",
    "sourceRoot": "",
    "sources": [
        "/src/store/app.ts"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {Instance, SnapshotIn, types} from 'mobx-state-tree';\nimport {Navigation} from '../components/AsideNav';\nimport {RendererEnv} from '../factory';\nimport {\n  createObject,\n  filterTree,\n  findTree,\n  guid,\n  mapTree\n} from '../utils/helper';\nimport {ServiceStore} from './service';\n\nexport const AppStore = ServiceStore.named('AppStore')\n  .props({\n    pages: types.frozen(),\n    activePage: types.frozen(),\n    folded: false,\n    offScreen: false\n  })\n  .views(self => ({\n    get navigations(): Array<Navigation> {\n      if (Array.isArray(self.pages)) {\n        return mapTree(self.pages, item => {\n          let visible = item.visible;\n\n          if (\n            visible !== false &&\n            item.path &&\n            !~item.path.indexOf('http') &&\n            ~item.path.indexOf(':')\n          ) {\n            visible = false;\n          }\n\n          return {\n            label: item.label,\n            icon: item.icon,\n            path: item.path,\n            children: item.children,\n            className: item.className,\n            visible\n          };\n        });\n      }\n\n      return [\n        {\n          label: self.__('App.navigation'),\n          children: []\n        }\n      ];\n    },\n    get bcn() {\n      return self.activePage?.bcn || [];\n    },\n\n    get pageData() {\n      return createObject(self.data, {\n        params: self.activePage?.params || {}\n      });\n    }\n  }))\n  .actions(self => ({\n    toggleFolded() {\n      self.folded = !self.folded;\n    },\n    toggleOffScreen() {\n      self.offScreen = !self.offScreen;\n    },\n\n    setPages(pages: any) {\n      if (pages && !Array.isArray(pages)) {\n        pages = [pages];\n      } else if (!Array.isArray(pages)) {\n        return;\n      }\n\n      pages = mapTree(pages, (item, index, level, paths) => {\n        let path = item.link || item.url;\n\n        if (item.schema || item.schemaApi) {\n          path =\n            item.url ||\n            `/${paths\n              .map(item => item.index)\n              .concat(index)\n              .map(index => `page-${index + 1}`)\n              .join('/')}`;\n\n          if (path && path[0] !== '/') {\n            let parentPath = '/';\n            let index = paths.length;\n            while (index > 0) {\n              const item = paths[index - 1];\n\n              if (item?.path) {\n                parentPath = item.path + '/';\n                break;\n              }\n              index--;\n            }\n\n            path = parentPath + path;\n          }\n        }\n\n        return {\n          ...item,\n          index,\n          id: item.id || guid(),\n          label: item.label,\n          icon: item.icon,\n          path\n        };\n      });\n      self.pages = pages;\n    },\n\n    rewrite(to: string, env: RendererEnv) {\n      let page = findTree(self.pages, item => {\n        if (item.path === to) {\n          return true;\n        }\n        return false;\n      });\n\n      if (page) {\n        this.setActivePage(page, env);\n      }\n    },\n\n    setActivePage(page: any, env: RendererEnv, params?: any) {\n      // 同一个页面直接返回。\n      if (self.activePage?.id === page.id) {\n        return;\n      }\n\n      let bcn: Array<any> = [];\n\n      findTree(self.pages, (item, index, level, paths) => {\n        if (item.id === page.id) {\n          bcn = paths.filter(item => item.path && item.label);\n          bcn.push({\n            ...item,\n            path: ''\n          });\n          self.__;\n          if (bcn[0].path !== '/') {\n            bcn.unshift({\n              label: self.__('App.home'),\n              path: '/'\n            });\n          }\n          return true;\n        }\n        return false;\n      });\n\n      self.activePage = {\n        ...page,\n        params: params || {},\n        bcn\n      };\n\n      if (page.label) {\n        document.title = page.label;\n      }\n\n      if (page.schema) {\n        self.schema = page.schema;\n        self.schemaKey = '' + Date.now();\n      } else if (page.schemaApi) {\n        self.schema = null;\n        self.fetchSchema(page.schemaApi, self.activePage, {method: 'get'});\n      } else if (page.redirect) {\n        env.jumpTo(page.redirect);\n        return;\n      } else if (page.rewrite) {\n        this.rewrite(page.rewrite, env);\n      } else {\n        self.schema = null;\n        self.schemaKey = '';\n      }\n    },\n\n    updateActivePage(env: RendererEnv) {\n      if (!Array.isArray(self.pages)) {\n        return;\n      }\n      let matched: any;\n\n      let page = findTree(self.pages, item => {\n        if (item.path) {\n          matched = env.isCurrentUrl(item.path, item);\n\n          if (matched) {\n            return true;\n          }\n        }\n        return false;\n      });\n\n      if (page) {\n        this.setActivePage(\n          page,\n          env,\n          typeof matched === 'object' ? matched.params : undefined\n        );\n      } else {\n        const page = findTree(self.pages, item => item.isDefaultPage);\n\n        if (page) {\n          this.setActivePage(page, env);\n        } else {\n          self.activePage = null;\n        }\n      }\n    }\n  }));\n\nexport type IAppStore = Instance<typeof AppStore>;\nexport type SAppStore = SnapshotIn<typeof AppStore>;\n"
    ]
}