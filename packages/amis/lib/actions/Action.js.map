{
    "version": 3,
    "file": "Action.js",
    "sourceRoot": "",
    "sources": [
        "/src/actions/Action.ts"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {RendererProps} from '../factory';\nimport {extendObject} from '../utils/helper';\nimport {RendererEvent} from '../utils/renderer-event';\nimport {evalExpression} from '../utils/tpl';\nimport {dataMapping} from '../utils/tpl-builtin';\nimport {IBreakAction} from './BreakAction';\nimport {IContinueAction} from './ContinueAction';\nimport {ILoopAction} from './LoopAction';\nimport {IParallelAction} from './ParallelAction';\nimport {ISwitchAction} from './SwitchAction';\n\n// 循环动作执行状态\nexport enum LoopStatus {\n  NORMAL,\n  BREAK,\n  CONTINUE\n}\n\n// 监听器动作定义\nexport interface ListenerAction {\n  actionType: string; // 动作类型 逻辑动作|自定义（脚本支撑）|reload|url|ajax|dialog|drawer 其他扩充的组件动作\n  description?: string; // 事件描述，actionType: broadcast\n  componentId?: string; // 组件ID，用于直接执行指定组件的动作\n  args?: Record<string, any>; // 参数，可以配置数据映射\n  outputVar?: string; // 输出数据变量名\n  preventDefault?: boolean; // 阻止原有组件的动作行为\n  stopPropagation?: boolean; // 阻止后续的事件处理器执行\n  expression?: string; // 执行条件\n  execOn?: string; // 执行条件，1.9.0废弃\n}\n\nexport interface ILogicAction extends ListenerAction {\n  children?: ListenerAction[]; // 子动作\n}\n\n// 逻辑动作类型，支持并行、排他（switch）、循环（支持continue和break）\nexport type LogicAction =\n  | IParallelAction\n  | ISwitchAction\n  | ILoopAction\n  | IContinueAction\n  | IBreakAction;\n\nexport interface ListenerContext extends React.Component<RendererProps> {\n  [propName: string]: any;\n}\n\n// Action 基础接口\nexport interface RendererAction {\n  // 运行这个 Action，每个类型的 Action 都只有一个实例，run 函数是个可重入的函数\n  run: (\n    action: ListenerAction,\n    renderer: ListenerContext,\n    event: RendererEvent<any>,\n    mergeData?: any // 有些Action内部需要通过上下文数据处理专有逻辑，这里的数据是事件数据+渲染器数据\n  ) => Promise<RendererEvent<any> | void>;\n}\n\n// 存储 Action 和类型的映射关系，用于后续查找\nconst ActionTypeMap: {[key: string]: RendererAction} = {};\n\n// 注册 Action\nexport const registerAction = (type: string, action: RendererAction) => {\n  ActionTypeMap[type] = action;\n};\n\n// 通过类型获取 Action 实例\nexport const getActionByType = (type: string) => {\n  return ActionTypeMap[type];\n};\n\nexport const runActions = async (\n  actions: ListenerAction | ListenerAction[],\n  renderer: ListenerContext,\n  event: any\n) => {\n  if (!Array.isArray(actions)) {\n    actions = [actions];\n  }\n\n  for (const actionConfig of actions) {\n    let actionInstrance = getActionByType(actionConfig.actionType);\n\n    // 如果存在指定组件ID，说明是组件专有动作\n    if (!actionInstrance && actionConfig.componentId) {\n      actionInstrance = getActionByType('component');\n    } else if (\n      actionConfig.actionType === 'url' ||\n      actionConfig.actionType === 'link' ||\n      actionConfig.actionType === 'jump'\n    ) {\n      // 打开页面动作\n      actionInstrance = getActionByType('openlink');\n    }\n\n    // 找不到就通过组件专有动作完成\n    if (!actionInstrance) {\n      actionInstrance = getActionByType('component');\n    }\n\n    // 这些节点的子节点运行逻辑由节点内部实现\n    await runAction(actionInstrance, actionConfig, renderer, event);\n\n    if (event.stoped) {\n      break;\n    }\n  }\n};\n\n// 执行动作，与原有动作处理打通\nexport const runAction = async (\n  actionInstrance: RendererAction,\n  actionConfig: ListenerAction,\n  renderer: ListenerContext,\n  event: any\n) => {\n  // 用户可能，需要用到事件数据和当前域的数据，因此merge事件数据和当前渲染器数据\n  // 需要保持渲染器数据链完整\n  const mergeData = extendObject(renderer.props.data, {\n    event\n  });\n\n  // 兼容一下1.9.0之前的版本\n  const expression = actionConfig.expression ?? actionConfig.execOn;\n\n  if (expression && !evalExpression(expression, mergeData)) {\n    return;\n  }\n\n  // 支持表达式 >=1.10.0\n  const preventDefault =\n    actionConfig.preventDefault &&\n    evalExpression(String(actionConfig.preventDefault), mergeData);\n  const stopPropagation =\n    actionConfig.stopPropagation &&\n    evalExpression(String(actionConfig.stopPropagation), mergeData);\n\n  // 修正参数，处理数据映射\n  let args = event.data;\n\n  if (actionConfig.args) {\n    args = dataMapping(actionConfig.args, mergeData, key =>\n      ['adaptor', 'responseAdaptor', 'requestAdaptor'].includes(key)\n    );\n  }\n\n  await actionInstrance.run(\n    {\n      ...actionConfig,\n      args\n    },\n    renderer,\n    event,\n    mergeData\n  );\n\n  // 阻止原有动作执行\n  preventDefault && event.preventDefault();\n  // 阻止后续动作执行\n  stopPropagation && event.stopPropagation();\n};\n"
    ]
}