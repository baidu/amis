{
    "version": 3,
    "file": "CopyAction.js",
    "sourceRoot": "",
    "sources": [
        "/src/actions/CopyAction.ts"
    ],
    "names": [],
    "mappings": ";;;;AACA,mCAKkB;AAWlB;;;;;;GAMG;AACH;IAAA;IAgBA,CAAC;IAfO,wBAAG,GAAT,UACE,MAAmB,EACnB,QAAyB,EACzB,KAAyB;;;;gBAEzB,IAAI,CAAC,CAAA,MAAA,QAAQ,CAAC,KAAK,CAAC,GAAG,0CAAE,IAAI,CAAA,EAAE;oBAC7B,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;iBAC1C;gBAED,IAAI,MAAA,MAAM,CAAC,IAAI,0CAAE,OAAO,EAAE;oBACxB,MAAA,MAAA,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAC,IAAI,mDAAG,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE;wBAC7C,MAAM,EAAE,MAAA,MAAA,MAAM,CAAC,IAAI,0CAAE,UAAU,mCAAI,WAAW;qBAC/C,CAAC,CAAC;iBACJ;;;;KACF;IACH,iBAAC;AAAD,CAAC,AAhBD,IAgBC;AAhBY,gCAAU;AAkBvB,IAAA,uBAAc,EAAC,MAAM,EAAE,IAAI,UAAU,EAAE,CAAC,CAAC",
    "sourcesContent": [
        "import {RendererEvent} from '../utils/renderer-event';\nimport {\n  RendererAction,\n  ListenerAction,\n  ListenerContext,\n  registerAction\n} from './Action';\n\nexport interface ICopyAction extends ListenerAction {\n  actionType: 'copy';\n  args: {\n    content: string;\n    copyFormat?: string;\n    [propName: string]: any;\n  };\n}\n\n/**\n * 复制动作\n *\n * @export\n * @class CopyAction\n * @implements {Action}\n */\nexport class CopyAction implements RendererAction {\n  async run(\n    action: ICopyAction,\n    renderer: ListenerContext,\n    event: RendererEvent<any>\n  ) {\n    if (!renderer.props.env?.copy) {\n      throw new Error('env.copy is required!');\n    }\n\n    if (action.args?.content) {\n      renderer.props.env.copy?.(action.args.content, {\n        format: action.args?.copyFormat ?? 'text/html'\n      });\n    }\n  }\n}\n\nregisterAction('copy', new CopyAction());\n"
    ]
}