{
    "version": 3,
    "file": "CmptAction.js",
    "sourceRoot": "",
    "sources": [
        "/src/actions/CmptAction.ts"
    ],
    "names": [],
    "mappings": ";;;;AACA,mCAKkB;AAelB;;;;;;GAMG;AACH;IAAA;IA6CA,CAAC;IA5CO,wBAAG,GAAT,UACE,MAAmB,EACnB,QAAyB,EACzB,KAAyB;;;;;gBAMnB,SAAS,GACb,MAAM,CAAC,WAAW,IAAI,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,KAAK,MAAM,CAAC,WAAW;oBACpE,CAAC,CAAC,MAAA,KAAK,CAAC,OAAO,CAAC,MAAM,0CAAE,gBAAgB,CAAC,MAAM,CAAC,WAAW,CAAC;oBAC5D,CAAC,CAAC,QAAQ,CAAC;gBAEf,UAAU;gBACV,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;oBAClD,sBAAO,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,CACxC,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,UAAU,KAAK,MAAM,CAC7B,EAAC;iBACH;qBAAM,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;oBAC9D,sBAAO,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,CACxC,MAAM,CAAC,WAAW,EAClB,MAAM,CAAC,UAAU,KAAK,UAAU,CACjC,EAAC;iBACH;gBAED,OAAO;gBACP,IAAI,MAAM,CAAC,UAAU,KAAK,UAAU,EAAE;oBACpC,IAAI,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,OAAO,EAAE;wBACtB,sBAAO,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,OAAO,CAAC,MAAA,MAAM,CAAC,IAAI,0CAAE,KAAK,CAAC,EAAC;qBAC/C;yBAAM;wBACL,sBAAO,MAAA,SAAS,aAAT,SAAS,6BAAT,SAAS,CAAE,KAAK,EAAC,QAAQ,mDAAG,MAAA,MAAM,CAAC,IAAI,0CAAE,KAAK,CAAC,EAAC;qBACxD;iBACF;gBAED,KAAK;gBACL,IAAI,MAAM,CAAC,UAAU,KAAK,QAAQ,EAAE;oBAClC,sBAAO,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,MAAM,+CAAjB,SAAS,EAAW,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,EAAC;iBACpD;gBAED,SAAS;gBACT,sBAAO,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,+CAAnB,SAAS,EAAa,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAC;;;KACnD;IACH,iBAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,gCAAU;AA+CvB,IAAA,uBAAc,EAAC,WAAW,EAAE,IAAI,UAAU,EAAE,CAAC,CAAC",
    "sourcesContent": [
        "import {RendererEvent} from '../utils/renderer-event';\nimport {\n  RendererAction,\n  ListenerAction,\n  ListenerContext,\n  registerAction\n} from './Action';\n\nexport interface ICmptAction extends ListenerAction {\n  actionType:\n    | 'setValue'\n    | 'show'\n    | 'hidden'\n    | 'enabled'\n    | 'disabled'\n    | 'reload';\n  args: {\n    value?: string | {[key: string]: string};\n  };\n}\n\n/**\n * 组件动作\n *\n * @export\n * @class CmptAction\n * @implements {Action}\n */\nexport class CmptAction implements RendererAction {\n  async run(\n    action: ICmptAction,\n    renderer: ListenerContext,\n    event: RendererEvent<any>\n  ) {\n    /**\n     * 根据唯一ID查找指定组件\n     * 触发组件未指定id或未指定响应组件componentId，则使用触发组件响应\n     */\n    const component =\n      action.componentId && renderer.props.$schema.id !== action.componentId\n        ? event.context.scoped?.getComponentById(action.componentId)\n        : renderer;\n\n    // 显隐&状态控制\n    if (['show', 'hidden'].includes(action.actionType)) {\n      return renderer.props.rootStore.setVisible(\n        action.componentId,\n        action.actionType === 'show'\n      );\n    } else if (['enabled', 'disabled'].includes(action.actionType)) {\n      return renderer.props.rootStore.setDisable(\n        action.componentId,\n        action.actionType === 'disabled'\n      );\n    }\n\n    // 数据更新\n    if (action.actionType === 'setValue') {\n      if (component?.setData) {\n        return component?.setData(action.args?.value);\n      } else {\n        return component?.props.onChange?.(action.args?.value);\n      }\n    }\n\n    // 刷新\n    if (action.actionType === 'reload') {\n      return component?.reload?.(undefined, action.args);\n    }\n\n    // 执行组件动作\n    return component?.doAction?.(action, action.args);\n  }\n}\n\nregisterAction('component', new CmptAction());\n"
    ]
}