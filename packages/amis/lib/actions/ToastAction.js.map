{
    "version": 3,
    "file": "ToastAction.js",
    "sourceRoot": "",
    "sources": [
        "/src/actions/ToastAction.ts"
    ],
    "names": [],
    "mappings": ";;;;AACA,mCAKkB;AAqBlB;;GAEG;AACH;IAAA;IAgBA,CAAC;IAfO,yBAAG,GAAT,UACE,MAAoB,EACpB,QAAyB,EACzB,KAAyB;;;;gBAEzB,IAAI,CAAC,CAAA,MAAA,QAAQ,CAAC,KAAK,CAAC,GAAG,0CAAE,MAAM,CAAA,EAAE;oBAC/B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;iBAC5C;gBAED,MAAA,MAAA,KAAK,CAAC,OAAO,CAAC,GAAG,EAAC,MAAM,mDACtB,CAAA,MAAA,MAAM,CAAC,IAAI,0CAAE,OAAO,KAAI,MAAM,EAC9B,MAAM,CAAC,MAAA,MAAM,CAAC,IAAI,0CAAE,GAAG,CAAC,EACxB,MAAM,CAAC,IAAI,CACZ,CAAC;;;;KACH;IACH,kBAAC;AAAD,CAAC,AAhBD,IAgBC;AAhBY,kCAAW;AAkBxB,IAAA,uBAAc,EAAC,OAAO,EAAE,IAAI,WAAW,EAAE,CAAC,CAAC",
    "sourcesContent": [
        "import {RendererEvent} from '../utils/renderer-event';\nimport {\n  RendererAction,\n  ListenerContext,\n  registerAction,\n  ListenerAction\n} from './Action';\n\nexport interface IToastAction extends ListenerAction {\n  actionType: 'toast';\n  args: {\n    msg: string;\n    msgType?: string;\n    position?:\n      | 'top-right'\n      | 'top-center'\n      | 'top-left'\n      | 'bottom-center'\n      | 'bottom-left'\n      | 'bottom-right'\n      | 'center';\n    closeButton?: boolean;\n    showIcon?: boolean;\n    timeout?: number;\n  };\n}\n\n/**\n * 全局toast\n */\nexport class ToastAction implements RendererAction {\n  async run(\n    action: IToastAction,\n    renderer: ListenerContext,\n    event: RendererEvent<any>\n  ) {\n    if (!renderer.props.env?.notify) {\n      throw new Error('env.notify is required!');\n    }\n\n    event.context.env.notify?.(\n      action.args?.msgType || 'info',\n      String(action.args?.msg),\n      action.args\n    );\n  }\n}\n\nregisterAction('toast', new ToastAction());\n"
    ]
}