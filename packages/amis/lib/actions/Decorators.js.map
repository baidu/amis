{
    "version": 3,
    "file": "Decorators.js",
    "sourceRoot": "",
    "sources": [
        "/src/actions/Decorators.ts"
    ],
    "names": [],
    "mappings": ";;;;AAAA,0CAA6C;AAO7C;;;;;;GAMG;AACH,SAAsB,uBAAuB,CAI3C,KAAQ,EACR,CAAI,EACJ,GAA6B;IAA7B,oBAAA,EAAA,QAA6B;gDAC5B,OAAO;;;YACD,aAAa,GAAU,KAAK,cAAf,EAAE,IAAI,GAAI,KAAK,KAAT,CAAU;YAEpC,sBAAO,aAAa,CAAC,CAAC,EAAE,IAAA,qBAAY,EAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAC;;;CAClD;AAXD,0DAWC;AAED;;;;;;GAMG;AACH,SAAgB,iBAAiB,CAC/B,KAAQ,EACR,GAA6B;IAA7B,oBAAA,EAAA,QAA6B;IAE7B,OAAO,UACL,MAAW,EACX,WAAmB,EACnB,UAAwC;QAExC,IAAI,EAAE,GACJ,UAAU,CAAC,KAAK,IAAI,OAAO,UAAU,CAAC,KAAK,KAAK,UAAU;YACxD,CAAC,CAAC,UAAU,CAAC,KAAK;YAClB,CAAC,CAAC,OAAO,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,GAAG,CAAA,KAAK,UAAU;gBACvC,CAAC,CAAC,UAAU,CAAC,GAAG,EAAE;gBAClB,CAAC,CAAC,IAAI,CAAC;QAEX,IAAI,CAAC,EAAE,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;YACnC,MAAM,IAAI,KAAK,CACb,wDAAiD,OAAO,EAAE,CAAE,CAC7D,CAAC;SACH;QAED,uDACK,UAAU,KAEb,KAAK,EAAE,SAAe,OAAO;;gBAAC,gBAAgB;qBAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;oBAAhB,2BAAgB;;;;;;;gCACtC,YAAY,GAAG,MAAC,IAAkD,0CACpE,KAAK,CAAC;gCACN,KAAK,GAAG,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,KAAK,CAAC;gCAEhC,cAAc;gCACd,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,OAAO,EAAE;oCAClD,KAAK,GAAG,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,UAAU,CAAC;iCAClC;gCAEkB,qBAAM,uBAAuB,CAC9C,YAAY,EACZ,KAAK,EACL;wCACE,KAAK,OAAA;qCACN,CACF,EAAA;;gCANK,UAAU,GAAG,SAMlB;gCAED,IAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,SAAS,EAAE;oCACzB,sBAAO;iCACR;gCAED,sBAAO,EAAE,CAAC,KAAK,CAAC,IAAI,iCAAM,MAAM,QAAE,EAAC;;;;aACpC,IACD;IACJ,CAAC,CAAC;AACJ,CAAC;AAnDD,8CAmDC",
    "sourcesContent": [
        "import {createObject} from '../utils/helper';\n\nimport type {ListenerAction} from './Action';\nimport type {OptionsControlProps} from '../renderers/Form/Options';\nimport type {FormControlProps} from '../renderers/Form/Item';\nimport type {RendererEvent} from '../utils/renderer-event';\n\n/**\n * 渲染器事件派发\n *\n * @param props 组件props\n * @param e 事件类型\n * @param ctx 上下文数据\n */\nexport async function rendererEventDispatcher<\n  T extends FormControlProps,\n  E = any\n>(\n  props: T,\n  e: E,\n  ctx: Record<string, any> = {}\n): Promise<RendererEvent<any> | undefined> {\n  const {dispatchEvent, data} = props;\n\n  return dispatchEvent(e, createObject(data, ctx));\n}\n\n/**\n * 渲染器事件方法装饰器\n *\n * @param event 事件类型\n * @param ctx 上下文数据\n * @returns {Function}\n */\nexport function bindRendererEvent<T extends FormControlProps, E = any>(\n  event: E,\n  ctx: Record<string, any> = {}\n) {\n  return function (\n    target: any,\n    propertyKey: string,\n    descriptor: TypedPropertyDescriptor<any>\n  ) {\n    let fn =\n      descriptor.value && typeof descriptor.value === 'function'\n        ? descriptor.value\n        : typeof descriptor?.get === 'function'\n        ? descriptor.get()\n        : null;\n\n    if (!fn || typeof fn !== 'function') {\n      throw new Error(\n        `decorator can only be applied to methods not: ${typeof fn}`\n      );\n    }\n\n    return {\n      ...descriptor,\n\n      value: async function boundFn(...params: any[]) {\n        const triggerProps = (this as TypedPropertyDescriptor<any> & {props: T})\n          ?.props;\n        let value = triggerProps?.value;\n\n        // clear清除内容事件\n        if (typeof event === 'string' && event === 'clear') {\n          value = triggerProps?.resetValue;\n        }\n\n        const dispatcher = await rendererEventDispatcher<T>(\n          triggerProps,\n          event,\n          {\n            value\n          }\n        );\n\n        if (dispatcher?.prevented) {\n          return;\n        }\n\n        return fn.apply(this, [...params]);\n      }\n    };\n  };\n}\n"
    ]
}