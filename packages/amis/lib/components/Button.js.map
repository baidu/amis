{
    "version": 3,
    "file": "Button.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/Button.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\n * @file Button\n * @author fex\n */\n\nimport React from 'react';\nimport TooltipWrapper, {TooltipObject, Trigger} from './TooltipWrapper';\nimport {pickEventsProps} from '../utils/helper';\nimport {ClassNamesFn, themeable} from '../theme';\nimport {Icon} from './icons';\ninterface ButtonProps extends React.DOMAttributes<HTMLButtonElement> {\n  id?: string;\n  className?: string;\n  href?: string;\n  title?: string;\n  size?: 'xs' | 'sm' | 'md' | 'lg';\n  type: 'button' | 'reset' | 'submit';\n  level: string; // 'link' | 'primary' | 'secondary' | 'info' | 'success' | 'warning' | 'danger' | 'light' | 'dark' | 'default';\n  tooltip?: string | TooltipObject;\n  tooltipPlacement: 'top' | 'right' | 'bottom' | 'left';\n  tooltipContainer?: any;\n  tooltipTrigger: Trigger | Array<Trigger>;\n  tooltipRootClose: boolean;\n  disabled?: boolean;\n  active?: boolean;\n  block?: boolean;\n  iconOnly?: boolean;\n  disabledTip?: string | TooltipObject;\n  classPrefix: string;\n  classnames: ClassNamesFn;\n  componentClass: React.ReactType;\n  overrideClassName?: boolean;\n  loading?: boolean;\n  loadingClassName?: string;\n}\n\nexport class Button extends React.Component<ButtonProps> {\n  static defaultProps: Pick<\n    ButtonProps,\n    | 'componentClass'\n    | 'level'\n    | 'type'\n    | 'tooltipPlacement'\n    | 'tooltipTrigger'\n    | 'tooltipRootClose'\n  > = {\n    componentClass: 'button',\n    level: 'default',\n    type: 'button',\n    tooltipPlacement: 'top',\n    tooltipTrigger: ['hover', 'focus'],\n    tooltipRootClose: false\n  };\n\n  renderButton() {\n    let {\n      level,\n      size,\n      disabled,\n      className,\n      title,\n      componentClass: Comp,\n      classnames: cx,\n      children,\n      disabledTip,\n      block,\n      type,\n      active,\n      iconOnly,\n      href,\n      loading,\n      loadingClassName,\n      overrideClassName,\n      ...rest\n    } = this.props;\n\n    if (href) {\n      Comp = 'a';\n    } else if ((Comp === 'button' && disabled) || loading) {\n      Comp = 'div';\n    }\n\n    return (\n      <Comp\n        type={Comp === 'input' || Comp === 'button' ? type : undefined}\n        {...pickEventsProps(rest)}\n        onClick={rest.onClick && disabled ? () => {} : rest.onClick}\n        href={href}\n        className={cx(\n          overrideClassName\n            ? ''\n            : {\n                'Button': true,\n                [`Button--${level}`]: level,\n                [`Button--${size}`]: size,\n                [`Button--block`]: block,\n                [`Button--iconOnly`]: iconOnly,\n                'is-disabled': disabled,\n                'is-active': active\n              },\n          className\n        )}\n        title={title}\n        disabled={disabled}\n      >\n        {loading && !disabled ? (\n          <span\n            className={cx(\n              overrideClassName\n                ? ''\n                : {[`Button--loading Button--loading--${level}`]: level},\n              loadingClassName\n            )}\n          >\n            <Icon icon=\"loading-outline\" className=\"icon\" />\n          </span>\n        ) : null}\n        {children}\n      </Comp>\n    );\n  }\n\n  render() {\n    const {\n      tooltip,\n      tooltipPlacement,\n      tooltipContainer,\n      tooltipTrigger,\n      tooltipRootClose,\n      disabled,\n      disabledTip,\n      classnames: cx\n    } = this.props;\n\n    return (\n      <TooltipWrapper\n        placement={tooltipPlacement}\n        tooltip={disabled ? disabledTip : tooltip}\n        container={tooltipContainer}\n        trigger={tooltipTrigger}\n        rootClose={tooltipRootClose}\n      >\n        {this.renderButton()}\n      </TooltipWrapper>\n    );\n  }\n}\n\nexport default themeable(Button);\n"
    ]
}