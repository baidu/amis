{
    "version": 3,
    "file": "AssociatedSelection.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/AssociatedSelection.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\n * 关联多选框，仅支持两层关联选择。\n * 左边先点选，然后右边再次点选。\n * 可以满足，先从 tree 中选中一个元素，然后查出来一个列表再次勾选。\n */\n\nimport React from 'react';\nimport {BaseSelectionProps, BaseSelection} from './Selection';\nimport {Options, Option} from './Select';\nimport {autobind} from '../utils/helper';\nimport {themeable} from '../theme';\nimport {uncontrollable} from 'uncontrollable';\nimport GroupedSelection from './GroupedSelection';\nimport TableSelection from './TableSelection';\nimport TreeSelection from './TreeSelection';\nimport GroupedSelecton from './GroupedSelection';\nimport ChainedSelection from './ChainedSelection';\nimport {Icon} from './icons';\nimport {localeable} from '../locale';\n\nexport interface AssociatedSelectionProps extends BaseSelectionProps {\n  leftOptions: Options;\n  leftDefaultValue?: any;\n  leftMode?: 'tree' | 'list' | 'group';\n  rightMode?: 'table' | 'list' | 'group' | 'tree' | 'chained';\n  columns?: Array<any>;\n  cellRender?: (\n    column: {\n      name: string;\n      label: string;\n      [propName: string]: any;\n    },\n    option: Option,\n    colIndex: number,\n    rowIndex: number\n  ) => JSX.Element;\n}\n\nexport interface AssociatedSelectionState {\n  leftValue?: Option;\n}\n\nexport class AssociatedSelection extends BaseSelection<\n  AssociatedSelectionProps,\n  AssociatedSelectionState\n> {\n  state: AssociatedSelectionState = {\n    leftValue: this.props.leftDefaultValue\n  };\n\n  componentDidMount() {\n    const leftValue = this.state.leftValue;\n    const {options, onDeferLoad} = this.props;\n\n    if (leftValue) {\n      const selectdOption = BaseSelection.resolveSelected(\n        leftValue,\n        options,\n        (option: Option) => option.ref\n      );\n\n      if (selectdOption && onDeferLoad && selectdOption.defer) {\n        onDeferLoad(selectdOption);\n      }\n    }\n  }\n\n  @autobind\n  leftOption2Value(option: Option) {\n    return option.value;\n  }\n\n  @autobind\n  handleLeftSelect(value: Option) {\n    const {options, onDeferLoad} = this.props;\n    this.setState({leftValue: value});\n\n    const selectdOption = BaseSelection.resolveSelected(\n      value,\n      options,\n      (option: Option) => option.ref\n    );\n\n    if (selectdOption && onDeferLoad && selectdOption.defer) {\n      onDeferLoad(selectdOption);\n    }\n  }\n\n  @autobind\n  handleLeftDeferLoad(option: Option) {\n    const {leftOptions, onLeftDeferLoad, onDeferLoad} = this.props;\n\n    if (typeof onLeftDeferLoad === 'function') {\n      // TabsTransfer\n      return onLeftDeferLoad?.(option, leftOptions);\n    } else if (typeof onDeferLoad === 'function') {\n      // Select\n      return onDeferLoad?.(option);\n    }\n  }\n\n  handleRetry(option: Option) {\n    const {onDeferLoad} = this.props;\n    onDeferLoad?.(option);\n  }\n\n  render() {\n    const {\n      classnames: cx,\n      className,\n      leftOptions,\n      options,\n      option2value,\n      rightMode,\n      onChange,\n      columns,\n      value,\n      disabled,\n      leftMode,\n      cellRender,\n      multiple,\n      itemRender\n    } = this.props;\n\n    const selectdOption = BaseSelection.resolveSelected(\n      this.state.leftValue,\n      options,\n      (option: Option) => option.ref\n    );\n    const __ = this.props.translate;\n\n    return (\n      <div className={cx('AssociatedSelection', className)}>\n        <div className={cx('AssociatedSelection-left')}>\n          {leftMode === 'tree' ? (\n            <TreeSelection\n              option2value={this.leftOption2Value}\n              options={leftOptions}\n              value={this.state.leftValue}\n              disabled={disabled}\n              onChange={this.handleLeftSelect}\n              multiple={false}\n              clearable={false}\n              onDeferLoad={this.handleLeftDeferLoad}\n            />\n          ) : (\n            <GroupedSelecton\n              option2value={this.leftOption2Value}\n              options={leftOptions}\n              value={this.state.leftValue}\n              disabled={disabled}\n              onChange={this.handleLeftSelect}\n              multiple={false}\n              clearable={false}\n            />\n          )}\n        </div>\n        <div className={cx('AssociatedSelection-right')}>\n          {this.state.leftValue ? (\n            selectdOption ? (\n              selectdOption.defer && !selectdOption.loaded ? (\n                <div className={cx('AssociatedSelection-box')}>\n                  <div\n                    className={cx(\n                      'AssociatedSelection-reload',\n                      selectdOption.loading ? 'is-spin' : 'is-clickable'\n                    )}\n                    onClick={\n                      selectdOption.loading\n                        ? undefined\n                        : this.handleRetry.bind(this, selectdOption)\n                    }\n                  >\n                    <Icon icon=\"reload\" className=\"icon\" />\n                  </div>\n\n                  {selectdOption.loading ? (\n                    <p>{__('loading')}</p>\n                  ) : (\n                    <p>{__('Transfer.refreshIcon')}</p>\n                  )}\n                </div>\n              ) : rightMode === 'table' ? (\n                <TableSelection\n                  columns={columns!}\n                  value={value}\n                  disabled={disabled}\n                  options={selectdOption.children || []}\n                  onChange={onChange}\n                  option2value={option2value}\n                  cellRender={cellRender}\n                  multiple={multiple}\n                />\n              ) : rightMode === 'tree' ? (\n                <TreeSelection\n                  value={value}\n                  disabled={disabled}\n                  options={selectdOption.children || []}\n                  onChange={onChange}\n                  option2value={option2value}\n                  multiple={multiple}\n                  itemRender={itemRender}\n                />\n              ) : rightMode === 'chained' ? (\n                <ChainedSelection\n                  value={value}\n                  disabled={disabled}\n                  options={selectdOption.children || []}\n                  onChange={onChange}\n                  option2value={option2value}\n                  multiple={multiple}\n                  itemRender={itemRender}\n                />\n              ) : (\n                <GroupedSelection\n                  value={value}\n                  disabled={disabled}\n                  options={selectdOption.children || []}\n                  onChange={onChange}\n                  option2value={option2value}\n                  multiple={multiple}\n                  itemRender={itemRender}\n                />\n              )\n            ) : (\n              <div className={cx('AssociatedSelection-box')}>\n                {__('Transfer.configError')}\n              </div>\n            )\n          ) : (\n            <div className={cx('AssociatedSelection-box')}>\n              {__('Transfer.selectFromLeft')}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default themeable(\n  localeable(\n    uncontrollable(AssociatedSelection, {\n      value: 'onChange'\n    })\n  )\n);\n"
    ]
}