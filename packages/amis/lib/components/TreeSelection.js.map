{
    "version": 3,
    "file": "TreeSelection.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/TreeSelection.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {BaseSelection, BaseSelectionProps} from './Selection';\nimport {themeable} from '../theme';\nimport React from 'react';\nimport {uncontrollable} from 'uncontrollable';\nimport Checkbox from './Checkbox';\nimport {Option} from './Select';\nimport {autobind, eachTree, everyTree} from '../utils/helper';\nimport Spinner from './Spinner';\nimport {localeable} from '../locale';\nimport {Icon} from './icons';\n\nexport interface TreeSelectionProps extends BaseSelectionProps {\n  expand?: 'all' | 'first' | 'root' | 'none';\n}\n\nexport interface TreeSelectionState {\n  expanded: Array<string>;\n}\n\nexport class TreeSelection extends BaseSelection<\n  TreeSelectionProps,\n  TreeSelectionState\n> {\n  valueArray: Array<Option>;\n  state: TreeSelectionState = {\n    expanded: []\n  };\n\n  static defaultProps = {\n    ...BaseSelection.defaultProps,\n    expand: 'first' as 'first'\n  };\n\n  componentDidMount() {\n    this.syncExpanded();\n  }\n\n  componentDidUpdate(prevProps: TreeSelectionProps) {\n    const props = this.props;\n\n    if (\n      !this.state.expanded.length &&\n      (props.expand !== prevProps.expand || props.options !== prevProps.options)\n    ) {\n      this.syncExpanded();\n    }\n  }\n\n  syncExpanded() {\n    const options = this.props.options;\n    const mode = this.props.expand;\n    const expanded: Array<string> = [];\n\n    if (!Array.isArray(options)) {\n      return;\n    }\n\n    if (mode === 'first' || mode === 'root') {\n      options.every((option, index) => {\n        if (Array.isArray(option.children)) {\n          expanded.push(`${index}`);\n          return mode === 'root';\n        }\n        return true;\n      });\n    } else if (mode === 'all') {\n      everyTree(options, (option, index, level, paths, indexes) => {\n        if (Array.isArray(option.children)) {\n          expanded.push(`${indexes.concat(index).join('-')}`);\n        }\n        return true;\n      });\n    }\n\n    this.setState({expanded});\n  }\n\n  toggleOption(option: Option) {\n    const {\n      value,\n      onChange,\n      option2value,\n      options,\n      onDeferLoad,\n      disabled,\n      multiple,\n      clearable\n    } = this.props;\n\n    if (disabled || option.disabled) {\n      return;\n    } else if (option.defer && !option.loaded) {\n      onDeferLoad?.(option);\n      return;\n    }\n\n    let valueArray = BaseSelection.value2array(value, options, option2value);\n\n    if (\n      option.value === void 0 &&\n      Array.isArray(option.children) &&\n      option.children.length &&\n      multiple\n    ) {\n      const someCheckedFn = (child: Option) =>\n        (Array.isArray(child.children) && child.children.length\n          ? child.children.some(someCheckedFn)\n          : false) ||\n        (child.value !== void 0 && ~valueArray.indexOf(child));\n      const someChecked = option.children.some(someCheckedFn);\n      const eachFn = (child: Option) => {\n        if (Array.isArray(child.children) && child.children.length) {\n          child.children.forEach(eachFn);\n        }\n\n        if (child.value !== void 0) {\n          const idx = valueArray.indexOf(child);\n\n          ~idx && valueArray.splice(idx, 1);\n\n          if (!someChecked) {\n            valueArray.push(child);\n          }\n        }\n      };\n      option.children.forEach(eachFn);\n    } else {\n      let idx = valueArray.indexOf(option);\n\n      if (~idx && (multiple || clearable)) {\n        valueArray.splice(idx, 1);\n      } else if (multiple) {\n        valueArray.push(option);\n      } else {\n        valueArray = [option];\n      }\n    }\n\n    let newValue: string | Array<Option> = option2value\n      ? valueArray.map(item => option2value(item))\n      : valueArray;\n\n    onChange && onChange(multiple ? newValue : newValue[0]);\n  }\n\n  toggleCollapsed(option: Option, index: string) {\n    const onDeferLoad = this.props.onDeferLoad;\n    const expanded = this.state.expanded.concat();\n    const idx = expanded.indexOf(index);\n\n    if (~idx) {\n      expanded.splice(idx, 1);\n    } else {\n      expanded.push(index);\n    }\n\n    this.setState(\n      {\n        expanded: expanded\n      },\n      option.defer && onDeferLoad ? () => onDeferLoad(option) : undefined\n    );\n  }\n\n  renderItem(option: Option, index: number, indexes: Array<number> = []) {\n    const {\n      labelClassName,\n      disabled,\n      classnames: cx,\n      itemClassName,\n      itemRender,\n      multiple\n    } = this.props;\n    const id = indexes.join('-');\n    const valueArray = this.valueArray;\n    let partial = false;\n    let checked = false;\n    let hasChildren = Array.isArray(option.children) && option.children.length;\n\n    if (option.value === void 0 && hasChildren) {\n      let allchecked = true;\n      let partialChecked = false;\n      const eachFn = (child: Option) => {\n        if (Array.isArray(child.children) && child.children.length) {\n          child.children.forEach(eachFn);\n        }\n\n        if (child.value !== void 0) {\n          const isIn = !!~valueArray.indexOf(child);\n\n          if (isIn && !partialChecked) {\n            partialChecked = true;\n          } else if (!isIn && allchecked) {\n            allchecked = false;\n          }\n\n          checked = partialChecked;\n          partial = partialChecked && !allchecked;\n        }\n      };\n\n      option.children!.forEach(eachFn);\n    } else {\n      checked = !!~valueArray.indexOf(option);\n    }\n\n    const expaned = !!~this.state.expanded.indexOf(id);\n\n    return (\n      <div\n        key={index}\n        className={cx(\n          'TreeSelection-item',\n          disabled || option.disabled || (option.defer && option.loading)\n            ? 'is-disabled'\n            : '',\n          expaned ? 'is-expanded' : ''\n        )}\n      >\n        <div\n          className={cx(\n            'TreeSelection-itemInner',\n            itemClassName,\n            option.className,\n            checked ? 'is-active' : ''\n          )}\n          onClick={() => this.toggleOption(option)}\n        >\n          {hasChildren || option.defer ? (\n            <a\n              onClick={(e: React.MouseEvent<any>) => {\n                e.stopPropagation();\n                this.toggleCollapsed(option, id);\n              }}\n              className={cx('Table-expandBtn', expaned ? 'is-active' : '')}\n            >\n              <Icon icon=\"right-arrow-bold\" className=\"icon\" />\n            </a>\n          ) : null}\n\n          {option.defer && option.loading ? <Spinner show size=\"sm\" /> : null}\n\n          {multiple && (!option.defer || option.loaded) ? (\n            <Checkbox\n              size=\"sm\"\n              checked={checked}\n              partial={partial}\n              disabled={disabled || option.disabled}\n              labelClassName={labelClassName}\n              description={option.description}\n            />\n          ) : null}\n\n          <div className={cx('TreeSelection-itemLabel')}>\n            {itemRender(option, {\n              index: index,\n              multiple: multiple,\n              checked: checked,\n              onChange: () => this.toggleOption(option),\n              disabled: disabled || option.disabled\n            })}\n          </div>\n\n          {option.defer && option.loading ? <Spinner show size=\"sm\" /> : null}\n        </div>\n        {hasChildren ? (\n          <div className={cx('TreeSelection-sublist')}>\n            {option.children!.map((option, key) =>\n              this.renderItem(option, key, indexes.concat(key))\n            )}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      value,\n      options,\n      className,\n      placeholder,\n      classnames: cx,\n      option2value,\n      translate: __\n    } = this.props;\n\n    this.valueArray = BaseSelection.value2array(value, options, option2value);\n    let body: Array<React.ReactNode> = [];\n\n    if (Array.isArray(options) && options.length) {\n      body = options.map((option, key) => this.renderItem(option, key, [key]));\n    }\n\n    return (\n      <div className={cx('TreeSelection', className)}>\n        {body && body.length ? (\n          body\n        ) : (\n          <div className={cx('TreeSelection-placeholder')}>\n            {__(placeholder)}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default themeable(\n  localeable(\n    uncontrollable(TreeSelection, {\n      value: 'onChange'\n    })\n  )\n);\n"
    ]
}