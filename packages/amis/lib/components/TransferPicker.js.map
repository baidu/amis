{
    "version": 3,
    "file": "TransferPicker.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/TransferPicker.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {localeable} from '../locale';\nimport {themeable} from '../theme';\nimport Transfer, {TransferProps} from './Transfer';\nimport {uncontrollable} from 'uncontrollable';\nimport React from 'react';\nimport ResultBox from './ResultBox';\nimport {Icon} from './icons';\nimport PickerContainer from './PickerContainer';\nimport {autobind, mapTree} from '../utils/helper';\n\nexport interface TransferPickerProps extends Omit<TransferProps, 'itemRender'> {\n  // 新的属性？\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full';\n\n  /**\n   * 边框模式，全边框，还是半边框，或者没边框。\n   */\n  borderMode?: 'full' | 'half' | 'none';\n\n  onFocus?: () => void;\n\n  onBlur?: () => void;\n}\n\nexport class TransferPicker extends React.Component<TransferPickerProps> {\n  optionModified = false;\n  @autobind\n  handleConfirm(value: any) {\n    this.props.onChange?.(value, this.optionModified);\n    this.optionModified = false;\n  }\n\n  @autobind\n  onFoucs() {\n    this.props.onFocus?.();\n  }\n\n  @autobind\n  onBlur() {\n    this.props.onBlur?.();\n  }\n\n  render() {\n    const {\n      classnames: cx,\n      value,\n      translate: __,\n      disabled,\n      className,\n      onChange,\n      size,\n      borderMode,\n      ...rest\n    } = this.props;\n\n    return (\n      <PickerContainer\n        title={__('Select.placeholder')}\n        onFocus={this.onFoucs}\n        onClose={this.onBlur}\n        bodyRender={({onClose, value, onChange, setState, ...states}) => {\n          return (\n            <Transfer\n              {...rest}\n              {...states}\n              value={value}\n              onChange={(value: any, optionModified) => {\n                if (optionModified) {\n                  let options = mapTree(rest.options, item => {\n                    return (\n                      value.find((a: any) => a.value === item.value) || item\n                    );\n                  });\n                  this.optionModified = true;\n                  setState({options, value});\n                } else {\n                  onChange(value);\n                }\n              }}\n            />\n          );\n        }}\n        value={value}\n        onConfirm={this.handleConfirm}\n        size={size}\n      >\n        {({onClick, isOpened}) => (\n          <ResultBox\n            className={cx(\n              'TransferPicker',\n              className,\n              isOpened ? 'is-active' : ''\n            )}\n            allowInput={false}\n            result={value}\n            onResultChange={onChange}\n            onResultClick={onClick}\n            placeholder={__('Select.placeholder')}\n            disabled={disabled}\n            borderMode={borderMode}\n          >\n            <span className={cx('TransferPicker-icon')}>\n              <Icon icon=\"pencil\" className=\"icon\" />\n            </span>\n          </ResultBox>\n        )}\n      </PickerContainer>\n    );\n  }\n}\n\nexport default themeable(\n  localeable(\n    uncontrollable(TransferPicker, {\n      value: 'onChange'\n    })\n  )\n);\n"
    ]
}