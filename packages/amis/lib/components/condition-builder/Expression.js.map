{
    "version": 3,
    "file": "Expression.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/condition-builder/Expression.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {\n  ExpressionComplex,\n  Field,\n  Funcs,\n  Func,\n  ExpressionFunc,\n  Type,\n  FieldSimple,\n  FieldGroup,\n  OperatorType\n} from './types';\nimport React from 'react';\nimport ConditionField from './Field';\nimport {autobind, findTree, filterTree} from '../../utils/helper';\nimport Value from './Value';\nimport InputSwitch from './InputSwitch';\nimport ConditionFunc from './Func';\nimport {ThemeProps, themeable} from '../../theme';\nimport {Config} from './config';\nimport InputBox from '../InputBox';\nimport Formula from './Formula';\nimport {FormulaPickerProps} from '../formula/Picker';\nimport {localeable, LocaleProps} from '../../locale';\n\n/**\n * 支持4中表达式设置方式\n *\n * 1. 直接就是值，由用户直接填写。\n * 2. 选择字段，让用户选一个字段。\n * 3. 选择一个函数，然后会参数里面的输入情况是个递归。\n * 4. 粗暴点，函数让用户自己书写。\n */\n\nexport interface ExpressionProps extends ThemeProps, LocaleProps {\n  value: ExpressionComplex;\n  data?: any;\n  index?: number;\n  onChange: (value: ExpressionComplex, index?: number) => void;\n  valueField?: FieldSimple;\n  fields?: Field[];\n  funcs?: Funcs;\n  allowedTypes?: Array<'value' | 'field' | 'func' | 'formula'>;\n  op?: OperatorType;\n  config: Config;\n  disabled?: boolean;\n  searchable?: boolean;\n  fieldClassName?: string;\n  formula?: FormulaPickerProps;\n  popOverContainer?: any;\n  renderEtrValue?: any;\n}\n\nconst fieldMap = {\n  value: '值',\n  field: '字段',\n  func: '函数',\n  formula: '公式'\n};\n\nexport class Expression extends React.Component<ExpressionProps> {\n  @autobind\n  handleInputTypeChange(type: 'value' | 'field' | 'func' | 'formula') {\n    let value = this.props.value;\n    const onChange = this.props.onChange;\n\n    if (type === 'value') {\n      value = '';\n    } else if (type === 'func') {\n      value = {\n        type: 'func',\n        func: (findTree(this.props.funcs!, item => (item as Func).type) as Func)\n          ?.type,\n        args: []\n      };\n    } else if (type === 'field') {\n      value = {\n        type: 'field',\n        field: ''\n      };\n    } else if (type === 'formula') {\n      value = {\n        type: 'formula',\n        value: ''\n      };\n    }\n    onChange(value, this.props.index);\n  }\n\n  @autobind\n  handleValueChange(data: any) {\n    this.props.onChange(data, this.props.index);\n  }\n\n  @autobind\n  handleFieldChange(field: string) {\n    let value = this.props.value;\n    const onChange = this.props.onChange;\n    value = {\n      type: 'field',\n      field\n    };\n    onChange(value, this.props.index);\n  }\n\n  @autobind\n  handleFuncChange(func: any) {\n    let value = this.props.value;\n    const onChange = this.props.onChange;\n    value = {\n      ...func,\n      type: 'func'\n    };\n    onChange(value, this.props.index);\n  }\n\n  @autobind\n  handleFormulaChange(formula: string) {\n    let value = this.props.value;\n    const onChange = this.props.onChange;\n    value = {\n      type: 'formula',\n      value: formula\n    };\n    onChange(value, this.props.index);\n  }\n\n  render() {\n    const {\n      value,\n      valueField,\n      allowedTypes,\n      funcs,\n      fields,\n      op,\n      classnames: cx,\n      fieldClassName,\n      config,\n      data,\n      disabled,\n      searchable,\n      formula,\n      popOverContainer,\n      renderEtrValue\n    } = this.props;\n    const inputType =\n      ((value as any)?.type === 'field'\n        ? 'field'\n        : (value as any)?.type === 'func'\n        ? 'func'\n        : (value as any)?.type === 'formula'\n        ? 'formula'\n        : value !== undefined\n        ? 'value'\n        : undefined) ||\n      allowedTypes?.[0] ||\n      'value';\n    const types = allowedTypes || ['value', 'field', 'func'];\n\n    if ((!Array.isArray(funcs) || !funcs.length) && ~types.indexOf('func')) {\n      types.splice(types.indexOf('func'), 1);\n    }\n\n    return (\n      <>\n        {inputType === 'value' ? (\n          <Value\n            field={valueField!}\n            value={value}\n            onChange={this.handleValueChange}\n            op={op}\n            data={data}\n            disabled={disabled}\n            formula={formula}\n            popOverContainer={popOverContainer}\n            renderEtrValue={renderEtrValue}\n          />\n        ) : null}\n\n        {inputType === 'field' ? (\n          <ConditionField\n            value={(value as any)?.field}\n            onChange={this.handleFieldChange}\n            fieldClassName={fieldClassName}\n            disabled={disabled}\n            searchable={searchable}\n            popOverContainer={popOverContainer}\n            options={\n              valueField\n                ? filterTree(\n                    fields!,\n                    item =>\n                      (item as any).children ||\n                      (item as FieldSimple).type === valueField.type\n                  )\n                : fields!\n            }\n          />\n        ) : null}\n\n        {inputType === 'func' ? (\n          <ConditionFunc\n            config={config}\n            value={value as ExpressionFunc}\n            onChange={this.handleFuncChange}\n            fieldClassName={fieldClassName}\n            funcs={funcs}\n            fields={fields}\n            allowedTypes={allowedTypes}\n            disabled={disabled}\n          />\n        ) : null}\n\n        {inputType === 'formula' ? (\n          <Formula\n            value={(value as any)?.value}\n            onChange={this.handleFormulaChange}\n            disabled={disabled}\n          />\n        ) : null}\n\n        {types.length > 1 ? (\n          <InputSwitch\n            disabled={disabled}\n            value={inputType}\n            popOverContainer={popOverContainer}\n            onChange={this.handleInputTypeChange}\n            options={types.map(item => ({\n              label: fieldMap[item],\n              value: item\n            }))}\n          />\n        ) : null}\n      </>\n    );\n  }\n}\n\nexport default themeable(localeable(Expression));\n"
    ]
}