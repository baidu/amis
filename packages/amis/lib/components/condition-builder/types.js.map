{
    "version": 3,
    "file": "types.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/condition-builder/types.ts"
    ],
    "names": [],
    "mappings": "",
    "sourcesContent": [
        "import {BaseSchema, SchemaApi} from '../../Schema';\nimport {Api} from '../../types';\n\nexport type FieldTypes =\n  | 'text'\n  | 'number'\n  | 'boolean'\n  | 'date'\n  | 'time'\n  | 'datetime'\n  | 'select'\n  | 'custom';\n\nexport type OperatorType =\n  | 'equal'\n  | 'not_equal'\n  | 'is_empty'\n  | 'is_not_empty'\n  | 'like'\n  | 'not_like'\n  | 'starts_with'\n  | 'ends_with'\n  | 'less'\n  | 'less_or_equal'\n  | 'greater'\n  | 'greater_or_equal'\n  | 'between'\n  | 'not_between'\n  | 'select_equals'\n  | 'select_not_equals'\n  | 'select_any_in'\n  | 'select_not_any_in'\n  | {\n      label: string;\n      value: string;\n    };\n\nexport type FieldItem = {\n  type: 'text';\n  operators: Array<OperatorType>;\n};\n\nexport type ExpressionSimple = string | number | object | undefined;\nexport type ExpressionValue =\n  | ExpressionSimple\n  | {\n      type: 'value';\n      value: ExpressionSimple;\n    };\nexport type ExpressionFunc = {\n  type: 'func';\n  func: string;\n  args: Array<ExpressionComplex>;\n};\nexport type ExpressionField = {\n  type: 'field';\n  field: string;\n};\nexport type ExpressionFormula = {\n  type: 'formula';\n  value: string;\n};\n\nexport type ExpressionComplex =\n  | ExpressionValue\n  | ExpressionFunc\n  | ExpressionField\n  | ExpressionFormula;\n\nexport interface ConditionRule {\n  id: any;\n  left?: ExpressionComplex;\n  op?: OperatorType;\n  right?: ExpressionComplex | Array<ExpressionComplex>;\n}\n\nexport interface ConditionGroupValue {\n  id: string;\n  conjunction: 'and' | 'or';\n  not?: boolean;\n  children?: Array<ConditionRule | ConditionGroupValue>;\n}\n\nexport interface ConditionValue extends ConditionGroupValue {}\n\ninterface customOperator {\n  lable: string;\n  value: string;\n  values?: any[];\n}\n\ninterface BaseField {\n  type: FieldTypes;\n  label: string;\n  valueTypes?: Array<'value' | 'field' | 'func' | 'formula'>;\n  operators?: Array<string | customOperator>;\n\n  // valueTypes 里面配置 func 才有效。\n  funcs?: Array<string>;\n\n  defaultValue?: any;\n  placeholder?: string;\n}\n\nexport type FieldGroup = {\n  label: string;\n  children: Array<FieldSimple>;\n};\n\ninterface TextField extends BaseField {\n  name: string;\n  type: 'text';\n  minLength?: number;\n  maxLength?: number;\n}\n\ninterface NumberField extends BaseField {\n  name: string;\n  type: 'number';\n  maximum?: number;\n  minimum?: number;\n  step?: number;\n  precision?: number;\n}\n\ninterface DateField extends BaseField {\n  name: string;\n  type: 'date';\n  format?: string;\n  inputFormat?: string;\n  minDate?: any;\n  maxDate?: any;\n}\n\ninterface TimeField extends BaseField {\n  name: string;\n  type: 'time';\n  minTime?: any;\n  maxTime?: any;\n  format?: string;\n  inputFormat?: string;\n}\n\ninterface DatetimeField extends BaseField {\n  type: 'datetime';\n  name: string;\n  format?: string;\n  inputFormat?: string;\n  timeFormat?: string;\n}\n\ninterface SelectField extends BaseField {\n  type: 'select';\n  name: string;\n  multiple?: boolean;\n  options?: Array<any>;\n  source?: SchemaApi;\n  searchable?: boolean;\n\n  /**\n   * 自动完成 API，当输入部分文字的时候，会将这些文字通过 ${term} 可以取到，发送给接口。\n   * 接口可以返回匹配到的选项，帮助用户输入。\n   */\n  autoComplete?: SchemaApi;\n}\n\ninterface BooleanField extends BaseField {\n  type: 'boolean';\n  name: string;\n}\n\ninterface CustomField extends BaseField {\n  type: 'custom';\n  name: string;\n  value: BaseSchema;\n}\n\ninterface GroupField {\n  type: 'group';\n  label: string;\n  name: string;\n  children: Array<FieldSimple>;\n}\n\nexport type FieldSimple =\n  | TextField\n  | NumberField\n  | DateField\n  | TimeField\n  | DatetimeField\n  | SelectField\n  | BooleanField\n  | CustomField;\n\nexport type Field = FieldSimple | FieldGroup | GroupField;\n\ninterface FuncGroup {\n  label: string;\n  children: Array<Func>;\n}\n\nexport interface Func {\n  type: string;\n  returnType: FieldTypes;\n  args: Array<FuncArg>;\n  label: string;\n}\nexport interface FuncArg extends BaseField {\n  isOptional?: boolean;\n}\nexport type Funcs = Array<Func | FuncGroup>;\nexport type Fields = Array<Field>;\n\nexport type Type = {\n  defaultOp?: OperatorType;\n  operators: Array<OperatorType>;\n  placeholder?: string;\n  valueTypes?: Array<'value' | 'field' | 'func' | 'formula'>;\n};\n"
    ]
}