{
    "version": 3,
    "file": "HeadCellDropDown.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/table/HeadCellDropDown.tsx"
    ],
    "names": [],
    "mappings": ";AAAA;;;GAGG;;;;AAEH,6DAA0B;AAC1B,uCAAsC;AAEtC,qCAAkD;AAClD,uCAAqD;AACrD,oEAAiC;AACjC,oEAAiC;AA4BjC;IAAsC,iDAA6B;IACjE,0BAAY,KAAY;QAAxB,YACE,kBAAM,KAAK,CAAC,SAQb;QANC,KAAI,CAAC,KAAK,GAAG;YACX,QAAQ,EAAE,KAAK;SAChB,CAAA;QAED,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAC3C,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IAC/C,CAAC;IAED,iCAAM,GAAN;QAAA,iBAoDC;QAnDQ,IAAA,QAAQ,GAAI,IAAI,CAAC,KAAK,SAAd,CAAe;QACxB,IAAA,KASF,IAAI,CAAC,KAAK,EARZ,gBAAgB,sBAAA,EAChB,MAAM,YAAA,EACN,SAAS,eAAA,EACT,cAAc,oBAAA,EACd,UAAU,gBAAA,EACV,cAAc,oBAAA,EACF,EAAE,gBAAA,EACD,EAAE,iBACH,CAAC;QAEf,OAAO,CACL,wCACE,SAAS,EAAE,EAAE,CACX,SAAS,EACT,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAC1B;YAED,wCAAM,OAAO,EAAE,IAAI,CAAC,SAAS,IAC1B,UAAU,IAAI,OAAO,UAAU,KAAK,UAAU;gBAC7C,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,CACxC;YAEL,QAAQ,CAAC,CAAC,CAAC,CACX,8BAAC,iBAAO,IACN,SAAS,EAAE,gBAAgB,IAAI,CAAC,cAAM,OAAA,IAAA,uBAAW,EAAC,KAAI,CAAC,EAAjB,CAAiB,CAAC,EACxD,SAAS,EAAC,6CAA6C,EACvD,MAAM,EACJ,gBAAgB,CAAC,CAAC,CAAC,cAAM,OAAA,IAAA,uBAAW,EAAC,KAAI,CAAE,CAAC,UAAU,EAA7B,CAA6B,CAAC,CAAC,CAAC,IAAI,EAE/D,IAAI;gBAEJ,8BAAC,iBAAO,IACN,WAAW,EAAE,EAAE,EACf,MAAM,EAAE,IAAI,CAAC,UAAU,EACvB,SAAS,EAAE,EAAE,CAAC,cAAc,CAAC,EAC7B,OAAO,UAEN,cAAc,IAAI,OAAO,cAAc,KAAK,UAAU;oBACrD,CAAC,CAAC,cAAc,iDAAK,IAAI,CAAC,KAAK,KAAE,OAAO,EAAE,UAAC,OAAsB;4BAC/D,IAAI,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,aAAa,KAAK,KAAK,CAAC,EAAE;gCACjD,KAAI,CAAC,UAAU,EAAE,CAAC;6BACnB;wBACH,CAAC,IAAE,CAAC,CAAC,CAAC,CAAC,cAAc,IAAI,IAAI,CAAC,CACxB,CACF,CAAC;gBACX,CAAC,CAAC,IAAI,CAEH,CACR,CAAC;IACJ,CAAC;IAED,oCAAS,GAAT;QACE,IAAI,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;IAClC,CAAC;IAED,qCAAU,GAAV;QACE,IAAI,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC,CAAC;IACnC,CAAC;IACH,uBAAC;AAAD,CAAC,AAzED,CAAsC,eAAK,CAAC,SAAS,GAyEpD;AAzEY,4CAAgB;AA2E7B,kBAAe,IAAA,iBAAS,EAAC,IAAA,mBAAU,EAAC,gBAAgB,CAAC,CAAC,CAAC",
    "sourcesContent": [
        "/**\n * @file table/HeadCellDropDown\n * @author fex\n */\n\nimport React from 'react';\nimport {findDOMNode} from 'react-dom';\n\nimport {themeable, ThemeProps} from '../../theme';\nimport {LocaleProps, localeable} from '../../locale';\nimport Overlay from '../Overlay';\nimport PopOver from '../PopOver';\n\nexport interface FilterPayload {\n  closeDropdown?: boolean;\n}\n\nexport interface FilterDropdownProps {\n  setSelectedKeys?: (keys: Array<string | number> | string) => void,\n  selectedKeys?: Array<string | number> | string,\n  confirm: (payload: FilterPayload) => void,\n  clearFilters?: () => void\n}\n\nexport interface Props extends ThemeProps, LocaleProps {\n  filterIcon: Function | React.ReactNode; // 图标方法 返回ReactNode\n  className: string; // 图标样式\n  layerClassName: string; // 展开层样式\n  active: boolean; // 图标是否高亮\n  popOverContainer?: () => Element | Text | null;\n  filterDropdown: (payload: FilterDropdownProps) => JSX.Element | null ; // 菜单内容\n  selectedKeys?: Array<string | number> | string;\n  setSelectedKeys?: (keys: Array<string | number> | string) => void;\n}\n\nexport interface State {\n  isOpened: boolean;\n}\n\nexport class HeadCellDropDown extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isOpened: false\n    }\n\n    this.openLayer = this.openLayer.bind(this);\n    this.closeLayer = this.closeLayer.bind(this);\n  }\n\n  render() {\n    const {isOpened} = this.state;\n    const {\n      popOverContainer,\n      active,\n      className,\n      layerClassName,\n      filterIcon,\n      filterDropdown,\n      classnames: cx,\n      classPrefix: ns\n    } = this.props;\n\n    return (\n      <span\n        className={cx(\n          className,\n          active ? 'is-active' : ''\n        )}\n      >\n        <span onClick={this.openLayer}>\n          {filterIcon && typeof filterIcon === 'function'\n            ? filterIcon(active) : (filterIcon || null)}\n        </span>\n        {\n          isOpened ? (\n          <Overlay\n            container={popOverContainer || (() => findDOMNode(this))}\n            placement=\"left-bottom-left-top right-bottom-right-top\"\n            target={\n              popOverContainer ? () => findDOMNode(this)!.parentNode : null\n            }\n            show\n          >\n            <PopOver\n              classPrefix={ns}\n              onHide={this.closeLayer}\n              className={cx(layerClassName)}\n              overlay\n            >\n              {filterDropdown && typeof filterDropdown === 'function'\n                ? filterDropdown({...this.props, confirm: (payload: FilterPayload) => {\n                  if (!(payload && payload.closeDropdown === false)) {\n                    this.closeLayer();\n                  }\n                }}) : (filterDropdown || null)}\n            </PopOver>\n          </Overlay>)\n          : null\n        }\n      </span>\n    );\n  }\n\n  openLayer() {\n    this.setState({isOpened: true});\n  }\n\n  closeLayer() {\n    this.setState({isOpened: false});\n  }\n}\n\nexport default themeable(localeable(HeadCellDropDown));"
    ]
}