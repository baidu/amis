{
    "version": 3,
    "file": "HeadCellSelect.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/table/HeadCellSelect.tsx"
    ],
    "names": [],
    "mappings": ";AAAA;;;GAGG;;;;AAEH,6DAA0B;AAC1B,uCAAsC;AAEtC,qCAAkD;AAClD,uCAAqD;AACrD,qFAAmE;AAEnE,kCAA8B;AAY9B;IAAoC,+CAA6B;IAK/D,wBAAY,KAAY;QAAxB,YACE,kBAAM,KAAK,CAAC,SAKb;QAHC,KAAI,CAAC,KAAK,GAAG;YACX,GAAG,EAAE,EAAE;SACR,CAAA;;IACH,CAAC;IAED,+BAAM,GAAN;QAAA,iBAmCC;QAlCO,IAAA,KAMF,IAAI,CAAC,KAAK,EALZ,UAAU,gBAAA,EACJ,OAAO,UAAA,EACb,gBAAgB,sBAAA,EACJ,EAAE,gBAAA,EACD,EAAE,iBACH,CAAC;QAEf,OAAO,CACL,8BAAC,0BAAgB,IACf,SAAS,EAAE,UAAG,EAAE,2BAAwB,EACxC,cAAc,EAAE,UAAG,EAAE,+BAA4B,EACjD,UAAU,EAAE,8BAAC,YAAI,IAAC,IAAI,EAAC,YAAY,EAAC,SAAS,EAAC,MAAM,GAAG,EACvD,MAAM,EAAE,KAAK,EACb,gBAAgB,EAAE,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,cAAM,OAAA,IAAA,uBAAW,EAAC,KAAI,CAAC,EAAjB,CAAiB,EAC/E,cAAc,EAAE,UAAC,EAAsD;oBAArD,eAAe,qBAAA,EAAE,YAAY,kBAAA,EAAE,OAAO,aAAA,EAAE,YAAY,kBAAA;gBACpE,OAAO,sCAAI,SAAS,EAAE,EAAE,CAAC,eAAe,CAAC,IACtC,UAAU,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,CAC/B,sCACE,GAAG,EAAE,KAAK,EACV,OAAO,EAAE;wBACP,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;wBACxC,KAAI,CAAC,WAAW,CAAC,OAAO,EAAE,eAAe,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;oBACvD,CAAC,IACA,IAAI,CAAC,IAAI,CACP,CACN,EATgC,CAShC,CAAC,CACC,CAAE;YACT,CAAC,EACD,eAAe,EAAE,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAC,GAAG,EAAE,IAAI,EAAC,CAAC,EAA1B,CAA0B,EACnD,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,GAEX,CACpB,CAAC;IACJ,CAAC;IAED,oCAAW,GAAX,UACE,OAA0C,EAC1C,eAA8E,EAC9E,YAAqC;QAEnC,eAAe,IAAI,eAAe,CAAC,YAAY,CAAC,CAAC;QAEjD,OAAO,EAAE,CAAC;IACd,CAAC;IAzDM,2BAAY,GAAG;QACpB,UAAU,EAAE,EAAE;KACf,CAAC;IAwDJ,qBAAC;CAAA,AA3DD,CAAoC,eAAK,CAAC,SAAS,GA2DlD;AA3DY,wCAAc;AA6D3B,kBAAe,IAAA,iBAAS,EAAC,IAAA,mBAAU,EAAC,cAAc,CAAC,CAAC,CAAC",
    "sourcesContent": [
        "/**\n * @file table/HeadCellSelect\n * @author fex\n */\n\nimport React from 'react';\nimport {findDOMNode} from 'react-dom';\n\nimport {themeable, ThemeProps} from '../../theme';\nimport {LocaleProps, localeable} from '../../locale';\nimport HeadCellDropDown, {FilterPayload} from './HeadCellDropDown';\nimport {RowSelectionOptionProps} from './index';\nimport {Icon} from '../icons';\n\nexport interface Props extends ThemeProps, LocaleProps {\n  selections: Array<RowSelectionOptionProps>;\n  keys: Array<string | number> | string;\n  popOverContainer?: () => Element | Text | null;\n}\n\nexport interface State {\n  key: Array<string | number> | string;\n}\n\nexport class HeadCellSelect extends React.Component<Props, State> {\n  static defaultProps = {\n    selections: []\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      key: ''\n    }\n  }\n\n  render() {\n    const {\n      selections,\n      keys: allKeys,\n      popOverContainer,\n      classnames: cx,\n      classPrefix: ns\n    } = this.props;\n\n    return (\n      <HeadCellDropDown\n        className={`${ns}TableCell-selectionBtn`}\n        layerClassName={`${ns}TableCell-selectionPopOver`}\n        filterIcon={<Icon icon=\"left-arrow\" className=\"icon\" />}\n        active={false}\n        popOverContainer={popOverContainer ? popOverContainer : () => findDOMNode(this)}\n        filterDropdown={({setSelectedKeys, selectedKeys, confirm, clearFilters}) => {\n          return <ul className={cx('DropDown-menu')}>\n            {selections.map((item, index) => (\n              <li\n                key={index}\n                onClick={() => {\n                  item.onSelect && item.onSelect(allKeys);\n                  this.handleClick(confirm, setSelectedKeys, item.key);\n                }}>\n                {item.text}\n              </li>\n            ))}\n          </ul> ;\n        }}\n        setSelectedKeys={keys => this.setState({key: keys})}\n        selectedKeys={this.state.key}\n        >\n      </HeadCellDropDown>\n    );\n  }\n\n  handleClick(\n    confirm: (payload?: FilterPayload) => void,\n    setSelectedKeys?: (keys?: Array<string | number> | string) => void | undefined,\n    selectedKeys?: Array<string> | string\n  ) {\n      setSelectedKeys && setSelectedKeys(selectedKeys);\n\n      confirm();\n  }\n}\n\nexport default themeable(localeable(HeadCellSelect));"
    ]
}