{
    "version": 3,
    "file": "Textarea.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/Textarea.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport {findDOMNode} from 'react-dom';\nimport BaseTextArea from 'react-textarea-autosize';\nimport {localeable, LocaleProps} from '../locale';\nimport {themeable, ThemeProps} from '../theme';\nimport {autobind, ucFirst} from '../utils/helper';\nimport {Icon} from './icons';\n\nexport interface TextAreaProps extends ThemeProps, LocaleProps {\n  /**\n   * 最大行数\n   */\n  maxRows?: number;\n\n  /**\n   * 最小行数\n   */\n  minRows?: number;\n\n  /**\n   * 是否只读\n   */\n  readOnly?: boolean;\n\n  /**\n   * 边框模式，全边框，还是半边框，或者没边框。\n   */\n  borderMode?: 'full' | 'half' | 'none';\n\n  /**\n   * 限制文字个数\n   */\n  maxLength?: number;\n\n  /**\n   * 是否显示计数\n   */\n  showCounter?: boolean;\n\n  /**\n   * 输入内容是否可清除\n   */\n  clearable?: boolean;\n\n  /**\n   * 重置值\n   */\n  resetValue?: string;\n\n  trimContents?: boolean;\n\n  value?: any;\n  onChange?: (value: any) => void;\n\n  onFocus?: (e: any) => void;\n  onBlur?: (e: any) => void;\n\n  placeholder?: string;\n  name?: string;\n  disabled?: boolean;\n}\n\nexport interface TextAreaState {\n  focused: boolean;\n}\n\nexport class Textarea extends React.Component<TextAreaProps, TextAreaState> {\n  static defaultProps = {\n    minRows: 3,\n    maxRows: 20,\n    trimContents: true,\n    resetValue: '',\n    clearable: false\n  };\n\n  state = {\n    focused: false\n  };\n\n  input?: HTMLInputElement;\n  inputRef = (ref: any) => (this.input = findDOMNode(ref) as HTMLInputElement);\n\n  valueToString(value: any) {\n    return typeof value === 'undefined' || value === null\n      ? ''\n      : typeof value === 'string'\n      ? value\n      : JSON.stringify(value);\n  }\n\n  focus() {\n    if (!this.input) {\n      return;\n    }\n\n    this.setState(\n      {\n        focused: true\n      },\n      () => {\n        if (!this.input) {\n          return;\n        }\n\n        this.input.focus();\n\n        // 光标放到最后\n        const len = this.input.value.length;\n        len && this.input.setSelectionRange(len, len);\n      }\n    );\n  }\n\n  @autobind\n  handleChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    const {onChange} = this.props;\n    let value = e.currentTarget.value;\n\n    onChange?.(value);\n  }\n\n  @autobind\n  handleFocus(e: React.FocusEvent<HTMLTextAreaElement>) {\n    const {onFocus} = this.props;\n\n    this.setState(\n      {\n        focused: true\n      },\n      () => {\n        onFocus?.(e);\n      }\n    );\n  }\n\n  @autobind\n  handleBlur(e: React.FocusEvent<HTMLTextAreaElement>) {\n    const {onBlur, trimContents, value, onChange} = this.props;\n\n    this.setState(\n      {\n        focused: false\n      },\n      () => {\n        if (trimContents && value && typeof value === 'string') {\n          onChange?.(value.trim());\n        }\n\n        onBlur && onBlur(e);\n      }\n    );\n  }\n\n  @autobind\n  async handleClear() {\n    const {onChange, resetValue} = this.props;\n\n    onChange?.(resetValue);\n    this.focus();\n  }\n\n  render() {\n    const {\n      className,\n      classPrefix: ns,\n      value,\n      placeholder,\n      disabled,\n      minRows,\n      maxRows,\n      readOnly,\n      name,\n      borderMode,\n      classnames: cx,\n      maxLength,\n      showCounter,\n      clearable\n    } = this.props;\n    const counter = showCounter ? this.valueToString(value).length : 0;\n\n    return (\n      <div\n        className={cx(\n          `TextareaControl`,\n          {\n            [`TextareaControl--border${ucFirst(borderMode)}`]: borderMode,\n            'is-focused': this.state.focused,\n            'is-disabled': disabled\n          },\n          className\n        )}\n      >\n        <BaseTextArea\n          className={cx(`TextareaControl-input`)}\n          autoComplete=\"off\"\n          ref={this.inputRef}\n          name={name}\n          disabled={disabled}\n          value={this.valueToString(value)}\n          placeholder={placeholder}\n          autoCorrect=\"off\"\n          spellCheck=\"false\"\n          readOnly={readOnly}\n          minRows={minRows || undefined}\n          maxRows={maxRows || undefined}\n          onChange={this.handleChange}\n          onFocus={this.handleFocus}\n          onBlur={this.handleBlur}\n        />\n\n        {clearable && !disabled && value ? (\n          <a onClick={this.handleClear} className={cx('TextareaControl-clear')}>\n            <Icon icon=\"input-clear\" className=\"icon\" />\n          </a>\n        ) : null}\n\n        {showCounter ? (\n          <span\n            className={cx('TextareaControl-counter', {\n              'is-empty': counter === 0,\n              'is-clearable': clearable && !disabled && value\n            })}\n          >\n            {`${counter}${\n              typeof maxLength === 'number' && maxLength ? `/${maxLength}` : ''\n            }`}\n          </span>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default themeable(localeable(Textarea));\n"
    ]
}