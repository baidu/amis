{
    "version": 3,
    "file": "SchemaVariableList.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/schema-editor/SchemaVariableList.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,6DAA0B;AAC1B,uCAAqD;AACrD,qCAAkD;AAClD,qDAAkD;AAElD,6CAA4C;AAE5C,sFAAmD;AACnD,kFAA+C;AAc/C;IAAwC,mDAGvC;IAHD;QAAA,qEAqEC;QAjEC,WAAK,GAAG;YACN,SAAS,EAAE,KAAI,CAAC,kBAAkB,CAAC,KAAI,CAAC,KAAK,CAAC;SAC/C,CAAC;;IA+DJ,CAAC;IA3DC,+CAAkB,GAAlB,UAAmB,SAAkC;QACnD,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAEzB,IAAI,KAAK,CAAC,OAAO,KAAK,SAAS,CAAC,OAAO,EAAE;YACvC,IAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;aAC1C,CAAC,CAAC;SACJ;IACH,CAAC;IAED,+CAAkB,GAAlB,UAAmB,KAA8B;;QAC/C,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC;YAC1C,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE;YACxB,CAAC,CAAC,KAAK,CAAC,OAAO;gBACf,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC;gBACjB,CAAC,CAAC,EAAE,CAAC;QACP,IAAM,UAAU,GAAG,IAAI,uBAAU,CAAC,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,MAAA,MAAA,IAAI,CAAC,KAAK,EAAC,oBAAoB,mDAAG,UAAU,CAAC,CAAC;QAC9C,OAAO,UAAU,CAAC,qBAAqB,EAAE,CAAC;IAC5C,CAAC;IAGD,yCAAY,GAAZ,UAAa,IAAS;;QACb,IAAA,QAAQ,GAAI,IAAI,CAAC,KAAK,SAAd,CAAe;QAC9B,IAAM,MAAM,GAAG,MAAA,IAAI,CAAC,UAAU,0CAAE,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE5D,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,IAAI,CAAC,KAAK,EAAE,MAAO,CAAC,CAAC;IAClC,CAAC;IAGD,uCAAU,GAAV,UAAW,MAAW;QACd,IAAA,KAAkC,IAAI,CAAC,KAAK,EAA/B,EAAE,gBAAA,EAAa,EAAE,eAAc,CAAC;QAEnD,OAAO,CACL,wCAAM,SAAS,EAAE,EAAE,CAAC,iCAAiC,CAAC;YACpD,6CAAQ,MAAM,CAAC,KAAK,CAAS;YAC7B,8BAAC,wBAAc,IAAC,OAAO,EAAE,MAAM,CAAC,WAAW,EAAE,YAAY,EAAC,MAAM;gBAC9D,wCAAM,SAAS,EAAE,EAAE,CAAC,qCAAqC,CAAC,IACvD,EAAE,CAAC,qBAAc,MAAM,CAAC,IAAI,IAAI,KAAK,CAAE,CAAC,CACpC,CACQ,CACZ,CACR,CAAC;IACJ,CAAC;IAED,mCAAM,GAAN;QACS,IAAA,UAAU,GAAI,IAAI,CAAC,KAAK,WAAd,CAAe;QAEhC,OAAO,CACL,8BAAC,sBAAY,IACX,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAC1B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,UAAU,EAAE,UAAU,IAAI,MAAM,EAChC,UAAU,EAAE,IAAI,CAAC,UAAU,GAC3B,CACH,CAAC;IACJ,CAAC;IAnCD;QADC,iBAAQ;;;;0DAMR;IAGD;QADC,iBAAQ;;;;wDAcR;IAeH,yBAAC;CAAA,AArED,CAAwC,eAAK,CAAC,SAAS,GAqEtD;AArEY,gDAAkB;AAuE/B,kBAAe,IAAA,mBAAU,EAAC,IAAA,iBAAS,EAAC,kBAAkB,CAAC,CAAC,CAAC",
    "sourcesContent": [
        "import React from 'react';\nimport {localeable, LocaleProps} from '../../locale';\nimport {themeable, ThemeProps} from '../../theme';\nimport {DataSchema} from '../../utils/DataSchema';\nimport type {JSONSchema} from '../../utils/DataScope';\nimport {autobind} from '../../utils/helper';\nimport {VariableItem} from '../formula/Editor';\nimport VariableList from '../formula/VariableList';\nimport TooltipWrapper from '../TooltipWrapper';\n\nexport interface SchemaVariableListProps extends LocaleProps, ThemeProps {\n  schemas?: Array<JSONSchema> | JSONSchema;\n  value?: string;\n  onSelect?: (value: string, schema: JSONSchema) => void;\n  selectMode?: 'list' | 'tree' | 'tabs';\n  beforeBuildVariables?: (dataSchema: DataSchema) => void;\n}\n\nexport interface SchemaVariableListState {\n  variables: Array<VariableItem>;\n}\n\nexport class SchemaVariableList extends React.Component<\n  SchemaVariableListProps,\n  SchemaVariableListState\n> {\n  state = {\n    variables: this.schemasToVaraibles(this.props)\n  };\n\n  dataSchema?: DataSchema;\n\n  componentDidUpdate(prevProps: SchemaVariableListProps) {\n    const props = this.props;\n\n    if (props.schemas !== prevProps.schemas) {\n      this.setState({\n        variables: this.schemasToVaraibles(props)\n      });\n    }\n  }\n\n  schemasToVaraibles(props: SchemaVariableListProps) {\n    const schemas = Array.isArray(props.schemas)\n      ? props.schemas.concat()\n      : props.schemas\n      ? [props.schemas]\n      : [];\n    const dataSchema = new DataSchema(schemas);\n    this.dataSchema = dataSchema;\n    this.props.beforeBuildVariables?.(dataSchema);\n    return dataSchema.getDataPropsAsOptions();\n  }\n\n  @autobind\n  handleSelect(item: any) {\n    const {onSelect} = this.props;\n    const schema = this.dataSchema?.getSchemaByPath(item.value);\n\n    onSelect?.(item.value, schema!);\n  }\n\n  @autobind\n  itemRender(option: any) {\n    const {classnames: cx, translate: __} = this.props;\n\n    return (\n      <span className={cx(`FormulaEditor-VariableList-item`)}>\n        <label>{option.label}</label>\n        <TooltipWrapper tooltip={option.description} tooltipTheme=\"dark\">\n          <span className={cx(`FormulaEditor-VariableList-item-tag`)}>\n            {__(`SchemaType.${option.type || 'any'}`)}\n          </span>\n        </TooltipWrapper>\n      </span>\n    );\n  }\n\n  render() {\n    const {selectMode} = this.props;\n\n    return (\n      <VariableList\n        data={this.state.variables}\n        value={this.props.value}\n        onSelect={this.handleSelect}\n        selectMode={selectMode || 'tree'}\n        itemRender={this.itemRender}\n      />\n    );\n  }\n}\n\nexport default localeable(themeable(SchemaVariableList));\n"
    ]
}