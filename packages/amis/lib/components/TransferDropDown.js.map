{
    "version": 3,
    "file": "TransferDropDown.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/TransferDropDown.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {localeable} from '../locale';\nimport {themeable} from '../theme';\nimport {Transfer, TransferProps} from './Transfer';\nimport {uncontrollable} from 'uncontrollable';\nimport React from 'react';\nimport ResultBox from './ResultBox';\nimport {Icon} from './icons';\nimport InputBox from './InputBox';\nimport PopOverContainer from './PopOverContainer';\nimport {isMobile} from '../utils/helper';\n\nexport interface TransferDropDownProps extends TransferProps {\n  // 新的属性？\n  multiple?: boolean;\n  borderMode?: 'full' | 'half' | 'none';\n  useMobileUI?: boolean;\n  popOverContainer?: any;\n  itemRender: (value: any) => JSX.Element | string;\n}\n\nexport class TransferDropDown extends Transfer<TransferDropDownProps> {\n  render() {\n    const {\n      classnames: cx,\n      value,\n      itemRender,\n      translate: __,\n      disabled,\n      clearable,\n      className,\n      onChange,\n      onSearch,\n      multiple,\n      borderMode,\n      useMobileUI,\n      popOverContainer\n    } = this.props;\n    const {inputValue, searchResult} = this.state;\n\n    const mobileUI = useMobileUI && isMobile();\n    return (\n      <PopOverContainer\n        useMobileUI={useMobileUI}\n        popOverContainer={popOverContainer}\n        popOverClassName={cx('TransferDropDown-popover')}\n        popOverRender={({onClose}) => (\n          <div\n            className={cx('TransferDropDown-content', {\n              'is-mobile': mobileUI\n            })}\n          >\n            {onSearch ? (\n              <div className={cx('Transfer-search')}>\n                <InputBox\n                  value={inputValue}\n                  onChange={this.handleSearch}\n                  placeholder={__('Transfer.searchKeyword')}\n                  clearable={false}\n                  onKeyDown={this.handleSearchKeyDown}\n                >\n                  {searchResult !== null ? (\n                    <a onClick={this.handleSeachCancel}>\n                      <Icon icon=\"close\" className=\"icon\" />\n                    </a>\n                  ) : (\n                    <Icon icon=\"search\" className=\"icon\" />\n                  )}\n                </InputBox>\n              </div>\n            ) : null}\n            {searchResult !== null\n              ? this.renderSearchResult({\n                  ...this.props,\n                  value,\n                  onChange: multiple\n                    ? onChange\n                    : (value: any) => {\n                        onClose();\n                        onChange?.(value);\n                      },\n                  multiple\n                })\n              : this.renderOptions({\n                  ...this.props,\n                  value,\n                  onChange: multiple\n                    ? onChange\n                    : (value: any) => {\n                        onClose();\n                        onChange?.(value);\n                      },\n                  multiple\n                })}\n          </div>\n        )}\n      >\n        {({onClick, isOpened, ref}) => (\n          <ResultBox\n            className={cx(\n              'TransferDropDown',\n              className,\n              isOpened ? 'is-active' : ''\n            )}\n            borderMode={borderMode}\n            allowInput={false}\n            result={multiple ? value : value?.[0] ? value?.[0] : null}\n            onResultChange={onChange}\n            onResultClick={onClick}\n            placeholder={__('Select.placeholder')}\n            disabled={disabled}\n            clearable={clearable}\n            ref={ref}\n            itemRender={itemRender}\n            useMobileUI={useMobileUI}\n          >\n            {!mobileUI ? (\n              <span className={cx('TransferDropDown-icon')}>\n                <Icon icon=\"caret\" className=\"icon\" />\n              </span>\n            ) : (\n              <></>\n            )}\n          </ResultBox>\n        )}\n      </PopOverContainer>\n    );\n  }\n}\n\nexport default themeable(\n  localeable(\n    uncontrollable(TransferDropDown, {\n      value: 'onChange'\n    })\n  )\n);\n"
    ]
}