{
    "version": 3,
    "file": "TableSelection.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/TableSelection.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {BaseSelection, BaseSelectionProps} from './Selection';\nimport {themeable} from '../theme';\nimport React from 'react';\nimport {uncontrollable} from 'uncontrollable';\nimport Checkbox from './Checkbox';\nimport {Option} from './Select';\nimport {resolveVariable} from '../utils/tpl-builtin';\nimport {localeable} from '../locale';\n\nexport interface TableSelectionProps extends BaseSelectionProps {\n  columns: Array<{\n    name: string;\n    label: string;\n    [propName: string]: any;\n  }>;\n  cellRender: (\n    column: {\n      name: string;\n      label: string;\n      [propName: string]: any;\n    },\n    option: Option,\n    colIndex: number,\n    rowIndex: number\n  ) => JSX.Element;\n}\n\nexport class TableSelection extends BaseSelection<TableSelectionProps> {\n  static defaultProps = {\n    ...BaseSelection.defaultProps,\n    cellRender: (\n      column: {\n        name: string;\n        label: string;\n        [propName: string]: any;\n      },\n      option: Option,\n      colIndex: number,\n      rowIndex: number\n    ) => <span>{resolveVariable(column.name, option)}</span>\n  };\n\n  getColumns() {\n    let columns = this.props.columns;\n\n    if (!Array.isArray(columns) || !columns.length) {\n      columns = [{label: 'Label', name: 'label'}];\n    }\n    return columns;\n  }\n\n  renderTHead() {\n    const {\n      options,\n      classnames: cx,\n      value,\n      disabled,\n      option2value,\n      multiple\n    } = this.props;\n    let columns = this.getColumns();\n    let valueArray = BaseSelection.value2array(value, options, option2value);\n    const availableOptions = options.filter(option => !option.disabled);\n    let partialChecked = false;\n    let allChecked = !!availableOptions.length;\n\n    availableOptions.forEach(option => {\n      const isIn = !!~valueArray.indexOf(option);\n\n      if (isIn && !partialChecked) {\n        partialChecked = true;\n      } else if (!isIn && allChecked) {\n        allChecked = false;\n      }\n    });\n\n    return (\n      <thead>\n        <tr>\n          {multiple && Array.isArray(options) && options.length ? (\n            <th className={cx('Table-checkCell')}>\n              <Checkbox\n                key=\"checkbox\"\n                size=\"sm\"\n                disabled={disabled}\n                onChange={this.toggleAll}\n                checked={partialChecked}\n                partial={partialChecked && !allChecked}\n              />\n            </th>\n          ) : null}\n          {columns.map((column, index) => (\n            <th key={index}>{column.label}</th>\n          ))}\n        </tr>\n      </thead>\n    );\n  }\n\n  renderTBody() {\n    const {\n      options,\n      placeholder,\n      classnames: cx,\n      cellRender,\n      value,\n      disabled,\n      multiple,\n      option2value,\n      translate: __,\n      itemClassName\n    } = this.props;\n    const columns = this.getColumns();\n    let valueArray = BaseSelection.value2array(value, options, option2value);\n\n    return (\n      <tbody>\n        {Array.isArray(options) && options.length ? (\n          options.map((option, rowIndex) => {\n            const checked = valueArray.indexOf(option) !== -1;\n\n            return (\n              <tr\n                key={rowIndex}\n                onClick={e => e.defaultPrevented || this.toggleOption(option)}\n                className={cx(\n                  itemClassName,\n                  option.className,\n                  disabled || option.disabled ? 'is-disabled' : '',\n                  !!~valueArray.indexOf(option) ? 'is-active' : ''\n                )}\n              >\n                {multiple ? (\n                  <td className={cx('Table-checkCell')} key=\"checkbox\">\n                    <Checkbox size=\"sm\" checked={checked} disabled={disabled} />\n                  </td>\n                ) : null}\n                {columns.map((column, colIndex) => (\n                  <td key={colIndex}>\n                    {cellRender(column, option, colIndex, rowIndex)}\n                  </td>\n                ))}\n              </tr>\n            );\n          })\n        ) : (\n          <tr>\n            <td colSpan={columns.length}>{__(placeholder)}</td>\n          </tr>\n        )}\n      </tbody>\n    );\n  }\n\n  render() {\n    const {className, classnames: cx} = this.props;\n\n    return (\n      <div className={cx('TableSelection', className)}>\n        <div className={cx('Table-content')}>\n          <table className={cx('Table-table')}>\n            {this.renderTHead()}\n            {this.renderTBody()}\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default themeable(\n  localeable(\n    uncontrollable(TableSelection, {\n      value: 'onChange'\n    })\n  )\n);\n"
    ]
}