{
    "version": 3,
    "file": "WithStore.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/WithStore.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA;;;;GAIG;AACH,6DAA0B;AAC1B,iGAA0D;AAC1D,mDAA2D;AAC3D,yCAAoC;AAEpC,SAAgB,SAAS,CACvB,YAA+B;IAE/B,OAAO,UAML,iBAAoB;;QACpB,iBAAiB,GAAG,IAAA,qBAAQ,EAAC,iBAAiB,CAAC,CAAC;QAOhD,IAAM,MAAM,GAAG,IAAA,iCAAmB;gBAClB,wCAA2B;gBAAzC;oBAAA,qEAoCC;oBA9BC,WAAK,GAAO,YAAY,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;oBACrC,WAAK,GAAG,UAAC,GAAQ;wBACf,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;oBACjB,CAAC,CAAC;;gBA2BJ,CAAC;gBAzBC,sCAAoB,GAApB;oBACE,IAAI,CAAC,KAAK,IAAI,IAAA,yBAAO,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAClC,OAAO,IAAI,CAAC,KAAK,CAAC;gBACpB,CAAC;gBAED,oCAAkB,GAAlB;oBACE,OAAO,IAAI,CAAC,GAAG,CAAC;gBAClB,CAAC;gBAED,wBAAM,GAAN;oBACE,IAAM,aAAa,GAAG;wBACpB,KAAK,EAAE,IAAI,CAAC,KAAK;qBAClB,CAAC;oBAEF,OAAO,CACL,8BAAC,iBAAiB,4BACX,IAAI,CAAC,KAGR,EACE,aAAa,IACjB,GAAG,EAAE,IAAI,CAAC,KAAK,IACf,CACH,CAAC;gBACJ,CAAC;gBACH,cAAC;YAAD,CAAC,AApCD,CAAc,eAAK,CAAC,SAAS;YACpB,cAAW,GAAG,oBACnB,iBAAiB,CAAC,WAAW,IAAI,QAAQ,MACvC;YACG,oBAAiB,GAAG,iBAA4C;iBAiCzE,iBAAiB,CAClB,CAAC;QAEF,OAAO,MAEN,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AA9DD,8BA8DC",
    "sourcesContent": [
        "/**\n * 接管 store 的生命周期，这个比较轻量，适合在组件中使用。\n * 相比渲染器中的 withStore，这里面的 store 不会在一个大树中。\n * 而且不会知道父级和子级中还有哪些 store。\n */\nimport React from 'react';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nimport {destroy, IAnyStateTreeNode} from 'mobx-state-tree';\nimport {observer} from 'mobx-react';\n\nexport function withStore<K extends IAnyStateTreeNode>(\n  storeFactory: (props: any) => K\n) {\n  return function <\n    T extends React.ComponentType<\n      React.ComponentProps<T> & {\n        store: K;\n      }\n    >\n  >(ComposedComponent: T) {\n    ComposedComponent = observer(ComposedComponent);\n\n    type OuterProps = JSX.LibraryManagedAttributes<\n      T,\n      Omit<React.ComponentProps<T>, 'store'>\n    >;\n\n    const result = hoistNonReactStatic(\n      class extends React.Component<OuterProps> {\n        static displayName = `WithStore(${\n          ComposedComponent.displayName || 'Unkown'\n        })`;\n        static ComposedComponent = ComposedComponent as React.ComponentType<T>;\n        ref: any;\n        store?: K = storeFactory(this.props);\n        refFn = (ref: any) => {\n          this.ref = ref;\n        };\n\n        componentWillUnmount() {\n          this.store && destroy(this.store);\n          delete this.store;\n        }\n\n        getWrappedInstance() {\n          return this.ref;\n        }\n\n        render() {\n          const injectedProps = {\n            store: this.store\n          };\n\n          return (\n            <ComposedComponent\n              {...(this.props as JSX.LibraryManagedAttributes<\n                T,\n                React.ComponentProps<T>\n              >)}\n              {...injectedProps}\n              ref={this.refFn}\n            />\n          );\n        }\n      },\n      ComposedComponent\n    );\n\n    return result as typeof result & {\n      ComposedComponent: T;\n    };\n  };\n}\n"
    ]
}