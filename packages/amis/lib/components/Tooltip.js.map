{
    "version": 3,
    "file": "Tooltip.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/Tooltip.tsx"
    ],
    "names": [],
    "mappings": ";AAAA;;;;GAIG;;;;AAEH,6DAA0B;AAG1B,kCAAiD;AAgBjD;IAA6B,wCAA6B;IAA1D;;IAmDA,CAAC;IA5CC,wBAAM,GAAN;QACE,IAAM,KAmBF,IAAI,CAAC,KAAK,EAlBC,EAAE,iBAAA,EACf,SAAS,eAAA,EACT,YAAY,kBAAA,EACZ,KAAK,WAAA,EACL,QAAQ,cAAA,EACR,UAAU,gBAAA,EACV,KAAK,WAAA,EACL,SAAS,eAAA,EACT,eAAe,qBAAA,EACf,cAAc,oBAAA,EACd,YAAY,kBAAA,EACZ,WAAW,iBAAA,EACC,EAAE,gBAAA,EACd,eAAe,qBAAA,EACf,SAAS,eAAA,EACT,YAAY,kBAAA,EACZ,YAAY,kBAAA,EACT,IAAI,2BAlBH,uPAmBL,CAAa,CAAC;QAEf,OAAO,CACL,+DACM,IAAI,IACR,SAAS,EAAE,EAAE,CACX,SAAS,EACT,eAAe,CAAC,CAAC,CAAC,mBAAY,eAAe,CAAE,CAAC,CAAC,CAAC,EAAE,EACpD,SAAS,EACT,mBAAY,YAAY,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAE,CACzD,EACD,KAAK,EAAE,KAAK,EACZ,YAAY,EAAE,YAAY,EAC1B,YAAY,EAAE,YAAY,EAC1B,IAAI,EAAC,SAAS;YAEb,SAAS,CAAC,CAAC,CAAC,CACX,6DAAK,SAAS,EAAE,EAAE,CAAC,eAAe,CAAC,IAAM,UAAU,EAAI,CACxD,CAAC,CAAC,CAAC,IAAI;YACP,KAAK,CAAC,CAAC,CAAC,uCAAK,SAAS,EAAE,EAAE,CAAC,eAAe,CAAC,IAAG,KAAK,CAAO,CAAC,CAAC,CAAC,IAAI;YAClE,uCAAK,SAAS,EAAE,EAAE,CAAC,cAAc,CAAC,IAAG,QAAQ,CAAO,CAChD,CACP,CAAC;IACJ,CAAC;IAjDM,oBAAY,GAAG;QACpB,SAAS,EAAE,EAAE;QACb,YAAY,EAAE,OAAO;QACrB,SAAS,EAAE,IAAI;KAChB,CAAC;IA8CJ,cAAC;CAAA,AAnDD,CAA6B,eAAK,CAAC,SAAS,GAmD3C;AAnDY,0BAAO;AAqDpB,kBAAe,IAAA,iBAAS,EAAC,OAAO,CAAC,CAAC",
    "sourcesContent": [
        "/**\n * @file Tooltip\n * @description\n * @author fex\n */\n\nimport React from 'react';\nimport cx from 'classnames';\nimport {classPrefix, classnames} from '../themes/default';\nimport {ClassNamesFn, themeable} from '../theme';\n\ninterface TooltipProps extends React.HTMLProps<HTMLDivElement> {\n  title?: string;\n  classPrefix: string;\n  classnames: ClassNamesFn;\n  theme?: string;\n  className?: string;\n  style?: any;\n  arrowProps?: any;\n  placement?: string;\n  showArrow?: boolean;\n  tooltipTheme?: string;\n  [propName: string]: any;\n}\n\nexport class Tooltip extends React.Component<TooltipProps> {\n  static defaultProps = {\n    className: '',\n    tooltipTheme: 'light',\n    showArrow: true\n  };\n\n  render() {\n    const {\n      classPrefix: ns,\n      className,\n      tooltipTheme,\n      title,\n      children,\n      arrowProps,\n      style,\n      placement,\n      arrowOffsetLeft,\n      arrowOffsetTop,\n      positionLeft,\n      positionTop,\n      classnames: cx,\n      activePlacement,\n      showArrow,\n      onMouseEnter,\n      onMouseLeave,\n      ...rest\n    } = this.props;\n\n    return (\n      <div\n        {...rest}\n        className={cx(\n          `Tooltip`,\n          activePlacement ? `Tooltip--${activePlacement}` : '',\n          className,\n          `Tooltip--${tooltipTheme === 'dark' ? 'dark' : 'light'}`\n        )}\n        style={style}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        role=\"tooltip\"\n      >\n        {showArrow ? (\n          <div className={cx(`Tooltip-arrow`)} {...arrowProps} />\n        ) : null}\n        {title ? <div className={cx('Tooltip-title')}>{title}</div> : null}\n        <div className={cx('Tooltip-body')}>{children}</div>\n      </div>\n    );\n  }\n}\n\nexport default themeable(Tooltip);\n"
    ]
}