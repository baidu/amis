{
    "version": 3,
    "file": "plugin.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/formula/plugin.ts"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\n * @file 扩展 codemirror\n */\n\nimport type CodeMirror from 'codemirror';\nimport {eachTree} from '../../utils/helper';\nimport type {FormulaEditorProps, VariableItem} from './Editor';\n\nexport function editorFactory(\n  dom: HTMLElement,\n  cm: typeof CodeMirror,\n  props: any\n) {\n  registerLaunguageMode(cm);\n\n  return cm(dom, {\n    value: props.value || '',\n    autofocus: true,\n    mode: props.evalMode ? 'text/formula' : 'text/formula-template'\n  });\n}\n\nexport class FormulaPlugin {\n  constructor(\n    readonly editor: CodeMirror.Editor,\n    readonly cm: typeof CodeMirror,\n    readonly getProps: () => FormulaEditorProps\n  ) {\n    // editor.on('change', this.autoMarkText);\n    this.autoMarkText();\n  }\n\n  autoMarkText() {\n    const {functions, variables, value} = this.getProps();\n    if (value) {\n      // todo functions 也需要自动替换\n      this.autoMark(variables!);\n    }\n  }\n\n  // 计算 `${`、`}` 括号的位置，如 ${a}+${b}, 结果是 [ { from: 0, to: 3 }, { from: 5, to: 8 } ]\n  computedBracesPosition(exp: string) {\n    const braces: {begin: number; end: number}[] = [];\n\n    exp?.replace(/\\$\\{/g, (val, offset) => {\n      if (val) {\n        const charArr = exp.slice(offset + val.length).split('');\n        const cache = ['${'];\n\n        for (let index = 0; index < charArr.length; index++) {\n          const char = charArr[index];\n          if (char === '$' && charArr[index + 1] === '{') {\n            cache.push('${');\n          } else if (char === '}') {\n            cache.pop();\n          }\n\n          if (cache.length === 0) {\n            braces.push({begin: offset + 2, end: index + offset + 2});\n            break;\n          }\n        }\n      }\n      return '';\n    });\n\n    return braces;\n  }\n\n  // 判断字符串是否在 ${} 中\n  checkStrIsInBraces(\n    [from, to]: number[],\n    braces: {begin: number; end: number}[]\n  ) {\n    let isIn = false;\n    if (braces.length) {\n      for (let index = 0; index < braces.length; index++) {\n        const brace = braces[index];\n        if (from > brace.begin && to <= brace.end) {\n          isIn = true;\n          break;\n        }\n      }\n    }\n    return isIn;\n  }\n\n  insertBraces(originFrom: CodeMirror.Position, originTo: CodeMirror.Position) {\n    const str = this.editor.getValue();\n    const braces = this.computedBracesPosition(str);\n\n    if (!this.checkStrIsInBraces([originFrom.ch, originTo.ch], braces)) {\n      this.editor.setCursor({\n        line: originFrom.line,\n        ch: originFrom.ch\n      });\n      this.editor.replaceSelection('${');\n\n      this.editor.setCursor({\n        line: originTo.line,\n        ch: originTo.ch + 2\n      });\n      this.editor.replaceSelection('}');\n    }\n  }\n\n  insertContent(value: any, type?: 'variable' | 'func') {\n    const from = this.editor.getCursor();\n    const {evalMode} = this.getProps();\n    if (type === 'variable') {\n      this.editor.replaceSelection(value.key);\n      const to = this.editor.getCursor();\n\n      this.markText(from, to, value.name, 'cm-field');\n\n      !evalMode && this.insertBraces(from, to);\n    } else if (type === 'func') {\n      this.editor.replaceSelection(`${value}()`);\n      const to = this.editor.getCursor();\n\n      this.markText(\n        from,\n        {\n          line: to.line,\n          ch: to.ch - 2\n        },\n        value,\n        'cm-func'\n      );\n\n      this.editor.setCursor({\n        line: to.line,\n        ch: to.ch - 1\n      });\n\n      if (!evalMode) {\n        this.insertBraces(from, to);\n        this.editor.setCursor({\n          line: to.line,\n          ch: to.ch + 1\n        });\n      }\n    } else if (typeof value === 'string') {\n      this.editor.replaceSelection(value);\n    }\n\n    this.editor.focus();\n  }\n\n  markText(\n    from: CodeMirror.Position,\n    to: CodeMirror.Position,\n    label: string,\n    className = 'cm-func'\n  ) {\n    const text = document.createElement('span');\n    text.className = className;\n    text.innerText = label;\n    this.editor.markText(from, to, {\n      atomic: true,\n      replacedWith: text\n    });\n  }\n\n  autoMark(variables: Array<VariableItem>) {\n    if (!Array.isArray(variables) || !variables.length) {\n      return;\n    }\n    const varMap: {\n      [propname: string]: string;\n    } = {};\n\n    eachTree(variables, item => {\n      if (item.value) {\n        const key = item.value;\n        varMap[key] = item.label;\n      }\n    });\n    const vars = Object.keys(varMap).sort((a, b) => b.length - a.length);\n\n    const editor = this.editor;\n    const lines = editor.lineCount();\n    for (let line = 0; line < lines; line++) {\n      const content = editor.getLine(line);\n\n      // 标记方法调用\n      content.replace(/([A-Z]+)\\s*\\(/g, (_, func, pos) => {\n        this.markText(\n          {\n            line: line,\n            ch: pos\n          },\n          {\n            line: line,\n            ch: pos + func.length\n          },\n          func,\n          'cm-func'\n        );\n        return _;\n      });\n\n      // 标记变量\n      vars.forEach(v => {\n        let from = 0;\n        let idx = -1;\n        while (~(idx = content.indexOf(v, from))) {\n          this.markText(\n            {\n              line: line,\n              ch: idx\n            },\n            {\n              line: line,\n              ch: idx + v.length\n            },\n            varMap[v],\n            'cm-field'\n          );\n          from = idx + v.length;\n        }\n      });\n    }\n  }\n\n  dispose() {}\n\n  validate() {}\n}\n\nlet modeRegisted = false;\nfunction registerLaunguageMode(cm: typeof CodeMirror) {\n  if (modeRegisted) {\n    return;\n  }\n  modeRegisted = true;\n\n  // 对应 evalMode\n  cm.defineMode('formula', (config: any, parserConfig: any) => {\n    var formula = cm.getMode(config, 'javascript');\n    if (!parserConfig || !parserConfig.base) return formula;\n\n    return cm.multiplexingMode(cm.getMode(config, parserConfig.base), {\n      open: '${',\n      close: '}',\n      mode: formula\n    });\n  });\n\n  cm.defineMIME('text/formula', {name: 'formula'});\n  cm.defineMIME('text/formula-template', {name: 'formula', base: 'htmlmixed'});\n}\n"
    ]
}