{
    "version": 3,
    "file": "Editor.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/formula/Editor.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\n * @file 公式编辑器\n */\nimport React from 'react';\nimport {uncontrollable} from 'uncontrollable';\nimport {parse} from 'amis-formula';\nimport {doc} from 'amis-formula/dist/doc';\n\nimport {FormulaPlugin, editorFactory} from './plugin';\nimport FuncList from './FuncList';\nimport VariableList from './VariableList';\nimport CodeMirrorEditor from '../CodeMirror';\nimport {autobind, eachTree} from '../../utils/helper';\nimport {themeable, ThemeProps} from '../../theme';\nimport {localeable, LocaleProps} from '../../locale';\n\nexport interface VariableItem {\n  label: string;\n  value?: string;\n  children?: Array<VariableItem>;\n  type: '';\n  tag?: string;\n  selectMode?: 'tree' | 'tabs';\n}\n\nexport interface FuncGroup {\n  groupName: string;\n  items: Array<FuncItem>;\n}\n\nexport interface FuncItem {\n  name: string; // 函数名\n  example?: string; // 示例\n  description?: string; // 描述\n  [propName: string]: any;\n}\n\nexport interface FormulaEditorProps extends ThemeProps, LocaleProps {\n  onChange?: (value: string) => void;\n  value?: string;\n  /**\n   * evalMode 即直接就是表达式，否则\n   * 需要 ${这里面才是表达式}\n   * 默认为 true\n   */\n  evalMode?: boolean;\n\n  /**\n   * 用于提示的变量集合，默认为空\n   */\n  variables?: Array<VariableItem>;\n\n  /**\n   * 变量展现模式，可选值：'tabs' ｜ 'tree'\n   */\n  variableMode?: 'tabs' | 'tree';\n\n  /**\n   * 函数集合，默认不需要传，即  amis-formula 里面那个函数\n   * 如果有扩充，则需要传。\n   */\n  functions?: Array<FuncGroup>;\n\n  /**\n   * 顶部标题，默认为表达式\n   */\n  header: string;\n\n  variableClassName?: string;\n\n  functionClassName?: string;\n}\n\nexport interface FunctionsProps {\n  name: string;\n  items: FunctionProps[];\n}\n\nexport interface FunctionProps {\n  name: string;\n  intro: string;\n  usage: string;\n  example: string;\n}\n\nexport interface FormulaState {\n  focused: boolean;\n}\n\nexport class FormulaEditor extends React.Component<\n  FormulaEditorProps,\n  FormulaState\n> {\n  state: FormulaState = {\n    focused: false\n  };\n  editorPlugin?: FormulaPlugin;\n\n  static buildDefaultFunctions(\n    doc: Array<{\n      namespace: string;\n      name: string;\n      [propName: string]: any;\n    }>\n  ) {\n    const funcs: Array<FuncGroup> = [];\n\n    doc.forEach(item => {\n      const namespace = item.namespace || 'Others';\n      let exists = funcs.find(item => item.groupName === namespace);\n      if (!exists) {\n        exists = {\n          groupName: namespace,\n          items: []\n        };\n        funcs.push(exists);\n      }\n      exists.items.push(item);\n    });\n\n    return funcs;\n  }\n\n  static defaultProps: Pick<FormulaEditorProps, 'variables' | 'evalMode'> = {\n    variables: [],\n    evalMode: true\n  };\n\n  static highlightValue(\n    value: string,\n    variables: Array<VariableItem>,\n    evalMode: boolean = true\n  ) {\n    if (!Array.isArray(variables) || !variables.length || !value) {\n      return;\n    }\n\n    const varMap: {\n      [propname: string]: string;\n    } = {};\n\n    eachTree(variables, item => {\n      if (item.value) {\n        const key = item.value;\n        varMap[key] = item.label;\n      }\n    });\n    const vars = Object.keys(varMap)\n      .filter(item => item)\n      .sort((a, b) => b.length - a.length);\n\n    const content = value || '';\n    let html = '';\n\n    // 标记方法调用\n    html = content.replace(/([A-Z]+)\\s*\\(/g, (_, func, pos) => {\n      return _?.replace(func, `<span class=\"c-func\">${func}</span>`);\n    });\n\n    vars.forEach(v => {\n      let from = 0;\n      let idx = -1;\n      while (~(idx = content.indexOf(v, from))) {\n        html = html.replace(v, `<span class=\"c-field\">${varMap[v]}</span>`);\n        from = idx + v.length;\n      }\n    });\n\n    return {html};\n  }\n\n  componentWillUnmount() {\n    this.editorPlugin?.dispose();\n  }\n\n  @autobind\n  handleFocus() {\n    this.setState({\n      focused: true\n    });\n  }\n\n  @autobind\n  handleBlur() {\n    this.setState({\n      focused: false\n    });\n  }\n\n  @autobind\n  insertValue(value: any, type: 'variable' | 'func') {\n    this.editorPlugin?.insertContent(value, type);\n  }\n\n  @autobind\n  handleEditorMounted(cm: any, editor: any) {\n    this.editorPlugin = new FormulaPlugin(editor, cm, () => this.props);\n  }\n\n  @autobind\n  validate() {\n    const value = this.props.value;\n\n    try {\n      value\n        ? parse(value, {\n            evalMode: this.props.evalMode\n          })\n        : null;\n    } catch (e) {\n      return e.message;\n    }\n\n    return;\n  }\n\n  @autobind\n  handleFunctionSelect(item: FuncItem) {\n    this.editorPlugin?.insertContent(`${item.name}`, 'func');\n  }\n\n  @autobind\n  handleVariableSelect(item: VariableItem) {\n    this.editorPlugin?.insertContent(\n      {\n        key: item.value,\n        name: item.label\n      },\n      'variable'\n    );\n  }\n\n  @autobind\n  handleOnChange(value: any) {\n    const onChange = this.props.onChange;\n    onChange?.(value);\n  }\n\n  @autobind\n  editorFactory(dom: HTMLElement, cm: any) {\n    return editorFactory(dom, cm, this.props);\n  }\n\n  render() {\n    const {\n      variables,\n      header,\n      value,\n      functions,\n      variableMode,\n      translate: __,\n      classnames: cx,\n      variableClassName,\n      functionClassName,\n      classPrefix\n    } = this.props;\n    const {focused} = this.state;\n    const customFunctions = Array.isArray(functions) ? functions : [];\n    const functionList = [\n      ...FormulaEditor.buildDefaultFunctions(doc),\n      ...customFunctions\n    ];\n\n    return (\n      <div\n        className={cx(`FormulaEditor`, {\n          'is-focused': focused\n        })}\n      >\n        <section className={cx(`FormulaEditor-content`)}>\n          <header className={cx(`FormulaEditor-header`)}>\n            {__(header || 'FormulaEditor.title')}\n          </header>\n\n          <CodeMirrorEditor\n            className={cx('FormulaEditor-editor')}\n            value={value}\n            onChange={this.handleOnChange}\n            editorFactory={this.editorFactory}\n            editorDidMount={this.handleEditorMounted}\n            onFocus={this.handleFocus}\n            onBlur={this.handleBlur}\n          />\n        </section>\n\n        <section className={cx('FormulaEditor-settings')}>\n          <div className={cx('FormulaEditor-panel')}>\n            {variableMode !== 'tabs' ? (\n              <div className={cx('FormulaEditor-panel-header')}>\n                {__('FormulaEditor.variable')}\n              </div>\n            ) : null}\n            <div\n              className={cx(\n                'FormulaEditor-panel-body',\n                variableMode && `FormulaEditor-panel-body--${variableMode}`\n              )}\n            >\n              <VariableList\n                classPrefix={classPrefix}\n                className={cx(\n                  'FormulaEditor-VariableList',\n                  'FormulaEditor-VariableList-root',\n                  variableClassName\n                )}\n                selectMode={variableMode}\n                data={variables!}\n                onSelect={this.handleVariableSelect}\n              />\n            </div>\n          </div>\n\n          <FuncList\n            className={functionClassName}\n            title={__('FormulaEditor.function')}\n            data={functionList}\n            onSelect={this.handleFunctionSelect}\n          />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default uncontrollable(\n  themeable(localeable(FormulaEditor)),\n  {\n    value: 'onChange'\n  },\n  ['validate']\n);\n"
    ]
}