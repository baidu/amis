{
    "version": 3,
    "file": "filter-schema.js",
    "sourceRoot": "",
    "sources": [
        "/src/utils/filter-schema.ts"
    ],
    "names": [],
    "mappings": ";;;AAAA,6BAA6C;AAG7C,mCAAwD;AACxD,oFAAiD;AACjD,uEAA4B;AAE5B;;;;;;;;;GASG;AACH,SAAwB,iBAAiB,CACvC,MAAmB,EACnB,IAAiB,EACjB,SAAoC,EACpC,KAAW;IAFX,qBAAA,EAAA,SAAiB;IACjB,0BAAA,EAAA,aAA4B,OAAO,CAAC;IAGpC,IAAM,SAAS,GAAgB,EAAE,CAAC;IAClC,IAAI,GAAG,GAAQ,IAAI,CAAC;IAEpB,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;QAC5C,IAAI,SAAS,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACxC,OAAO;SACR;QAED,IAAI,KAAK,GAAG,uCAAuC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9D,IAAI,KAAK,GAAQ,MAAM,CAAC,GAAG,CAAC,CAAC;QAE7B,IACE,KAAK;YACL,OAAO,KAAK,KAAK,QAAQ;aACzB,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAG,CAAC,CAAC,CAAA;YACV,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,EAC1C;YACA,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAEf,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;gBAC5C,IACE,CAAC,GAAG;oBACJ,KAAK;oBACL,OAAO,KAAK,KAAK,QAAQ;oBACzB,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EACzB;oBACA,GAAG,GAAG,IAAA,4BAAmB,EAAC,IAAI,EAAE;wBAC9B,OAAO,EAAE,KAAK;qBACf,CAAC,CAAC;iBACJ;gBAED,KAAK;oBACH,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI;wBACf,CAAC,CAAC,IAAA,oBAAc,EAAC,KAAK,EAAE,GAAG,IAAI,IAAI,CAAC;wBACpC,CAAC,CAAC,IAAA,YAAM,EAAC,KAAK,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC;aAClC;YAED,SAAS,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACxB;aAAM,IACL,KAAK;YACL,IAAA,uBAAa,EAAC,KAAK,CAAC;YACpB,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAG,CAAC,CAAC,MAAK,WAAW,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAG,CAAC,CAAC,MAAK,WAAW,CAAC,EAC1D;YACA,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1B,SAAS,CAAC,UAAG,GAAG,QAAK,CAAC,GAAG,KAAK,CAAC;YAC/B,SAAS,CAAC,GAAG,CAAC,GAAG,IAAA,oBAAE,EACjB,IAAA,kBAAS,EAAC,KAAK,EAAE,UAAC,KAAU;gBAC1B,OAAA,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAA,oBAAc,EAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK;YAA/D,CAA+D,CAChE,CACF,CAAC;SACH;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC;AACnB,CAAC;AA5DD,oCA4DC",
    "sourcesContent": [
        "import {evalExpression, filter} from './tpl';\n\nimport {Schema, PlainObject} from '../types';\nimport {injectPropsToObject, mapObject} from './helper';\nimport isPlainObject from 'lodash/isPlainObject';\nimport cx from 'classnames';\n\n/**\n * 处理 Props 数据，所有带 On 结束的做一次\n *\n * xxxOn\n * xxxExpr\n *\n *\n * @param schema\n * @param data\n */\nexport default function getExprProperties(\n  schema: PlainObject,\n  data: object = {},\n  blackList: Array<string> = ['addOn'],\n  props?: any\n): PlainObject {\n  const exprProps: PlainObject = {};\n  let ctx: any = null;\n\n  Object.getOwnPropertyNames(schema).forEach(key => {\n    if (blackList && ~blackList.indexOf(key)) {\n      return;\n    }\n\n    let parts = /^(.*)(On|Expr|(?:c|C)lassName)(Raw)?$/.exec(key);\n    let value: any = schema[key];\n\n    if (\n      value &&\n      typeof value === 'string' &&\n      parts?.[1] &&\n      (parts[2] === 'On' || parts[2] === 'Expr')\n    ) {\n      key = parts[1];\n\n      if (parts[2] === 'On' || parts[2] === 'Expr') {\n        if (\n          !ctx &&\n          props &&\n          typeof value === 'string' &&\n          ~value.indexOf('__props')\n        ) {\n          ctx = injectPropsToObject(data, {\n            __props: props\n          });\n        }\n\n        value =\n          parts[2] === 'On'\n            ? evalExpression(value, ctx || data)\n            : filter(value, ctx || data);\n      }\n\n      exprProps[key] = value;\n    } else if (\n      value &&\n      isPlainObject(value) &&\n      (parts?.[2] === 'className' || parts?.[2] === 'ClassName')\n    ) {\n      key = parts[1] + parts[2];\n      exprProps[`${key}Raw`] = value;\n      exprProps[key] = cx(\n        mapObject(value, (value: any) =>\n          typeof value === 'string' ? evalExpression(value, data) : value\n        )\n      );\n    }\n  });\n\n  return exprProps;\n}\n"
    ]
}