{
    "version": 3,
    "file": "ColorScale.js",
    "sourceRoot": "",
    "sources": [
        "/src/utils/ColorScale.ts"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "// 代码修改自 https://github.com/dalisc/color-scales-js\n// 主要是将校验功能改成修正而不是报错，比如 min 和 max 相等的时候自动给 max + 1\n\nclass Color {\n  public r: number;\n  public g: number;\n  public b: number;\n  public a: number;\n\n  constructor(r: number, g: number, b: number, a: number = 1) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  toRGBString() {\n    return `rgb(${Math.floor(this.r * this.a)},${Math.floor(\n      this.g * this.a\n    )},${Math.floor(this.b * this.a)})`;\n  }\n\n  toRGBAString() {\n    return `rgba(${this.r},${this.g},${this.b},${this.a})`;\n  }\n\n  toHexString() {\n    return rgbaToHex(this);\n  }\n}\n\nfunction hexToColor(hex: string, alpha: number) {\n  if (isValid3DigitHexColor(hex)) {\n    hex = convertTo6DigitHexColor(hex);\n  }\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (result) {\n    return new Color(\n      parseInt(result[1], 16),\n      parseInt(result[2], 16),\n      parseInt(result[3], 16),\n      alpha\n    );\n  } else {\n    throw new Error(`${hex} is not a valid hex color.`);\n  }\n}\n\nfunction isValidHexColor(colorString: string) {\n  return (\n    isValid3DigitHexColor(colorString) || isValid6DigitHexColor(colorString)\n  );\n}\n\nfunction isValid3DigitHexColor(colorString: string) {\n  const hexColorRegex = /^#(?:[0-9a-fA-F]{3})$/;\n  return colorString.match(hexColorRegex);\n}\n\nfunction isValid6DigitHexColor(colorString: string) {\n  const hexColorRegex = /^#(?:[0-9a-fA-F]{6})$/;\n  return colorString.match(hexColorRegex);\n}\n\nfunction convertTo6DigitHexColor(threeDigitHex: string) {\n  return threeDigitHex\n    .substring(1)\n    .split('')\n    .map(char => {\n      return char + char;\n    })\n    .join('');\n}\n\nfunction componentToHex(c: number) {\n  const hex = c.toString(16);\n  return hex.length === 1 ? '0' + hex : hex;\n}\n\nfunction rgbaToHex(color: Color) {\n  const r = Math.floor(color.r * color.a);\n  const g = Math.floor(color.g * color.a);\n  const b = Math.floor(color.b * color.a);\n  return `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`;\n}\n\nexport default class ColorScale {\n  private min: number;\n  private max: number;\n  private alpha: number;\n  private colorStops: Color[];\n\n  constructor(\n    min: number,\n    max: number,\n    colorStops: string[],\n    alpha: number = 1\n  ) {\n    this.min = isNaN(min) ? 0 : min;\n    this.max = isNaN(max) ? 0 : max;\n    if (this.min === this.max) {\n      this.max = this.min + 1;\n    }\n    if (this.max < this.min) {\n      [this.max, this.min] = [this.min, this.max];\n    }\n    if (colorStops.length < 2) {\n      colorStops = ['#FFEF9C', '#FF7127'];\n    }\n    this.alpha = alpha;\n    this.colorStops = colorStops.map(colorStop => hexToColor(colorStop, alpha));\n  }\n\n  getColor(value: number) {\n    const numOfColorStops = this.colorStops.length;\n    if (value < this.min) return this.colorStops[0];\n    if (value > this.max) return this.colorStops[numOfColorStops - 1];\n\n    const range = this.max - this.min;\n    let weight = (value - this.min) / range;\n    const colorStopIndex = Math.max(\n      Math.ceil(weight * (numOfColorStops - 1)),\n      1\n    );\n\n    const minColor = this.colorStops[colorStopIndex - 1];\n    const maxColor = this.colorStops[colorStopIndex];\n\n    weight = weight * (numOfColorStops - 1) - (colorStopIndex - 1);\n\n    const r = Math.floor(weight * maxColor.r + (1 - weight) * minColor.r);\n    const g = Math.floor(weight * maxColor.g + (1 - weight) * minColor.g);\n    const b = Math.floor(weight * maxColor.b + (1 - weight) * minColor.b);\n\n    return new Color(r, g, b, this.alpha);\n  }\n}\n"
    ]
}