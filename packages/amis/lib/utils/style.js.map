{
    "version": 3,
    "file": "style.js",
    "sourceRoot": "",
    "sources": [
        "/src/utils/style.ts"
    ],
    "names": [],
    "mappings": ";AAAA;;GAEG;;;;AAEH,6CAAuD;AACvD,4EAAyC;AACzC,4EAAyC;AAEzC,SAAS,eAAe,CAAC,KAAa;IACpC,qCAAqC;IACrC,IACE,OAAO,KAAK,KAAK,QAAQ;QACzB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACzB,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EACzB;QACA,OAAO,gBAAQ,KAAK,QAAI,CAAC;KAC1B;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;GAKG;AACH,SAAgB,UAAU,CAAC,KAAU,EAAE,IAAS;IAC9C,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,KAAK,CAAC;KACd;IACD,IAAI,QAAQ,GACV,OAAO,KAAK,KAAK,QAAQ;QACvB,CAAC,CAAC,IAAA,sCAAwB,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE;QACtD,CAAC,CAAC,IAAA,mBAAS,EAAC,KAAK,EAAE,UAAA,CAAC,IAAI,OAAA,IAAA,sCAAwB,EAAC,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,EAA/C,CAA+C,CAAC,CAAC;IAE7E,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;QACxC,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YAC3B,QAAQ,CAAC,IAAA,mBAAS,EAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YACzC,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;SACtB;IACH,CAAC,CAAC,CAAC;IAEH,IAAI,QAAQ,CAAC,eAAe,EAAE;QAC5B,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;KACtE;IAED,IAAI,QAAQ,CAAC,WAAW,EAAE;QACxB,QAAQ,CAAC,WAAW,GAAG,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;KAC9D;IAED,IAAI,QAAQ,CAAC,cAAc,EAAE;QAC3B,QAAQ,CAAC,cAAc,GAAG,eAAe,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;KACpE;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AA7BD,gCA6BC",
    "sourcesContent": [
        "/**\n * 处理样式相关的工具方法，不放 helper 里是为了避免循环依赖\n */\n\nimport {resolveVariableAndFilter} from './tpl-builtin';\nimport mapValues from 'lodash/mapValues';\nimport camelCase from 'lodash/camelCase';\n\nfunction autoAddImageURL(image: string) {\n  // 只支持单个的情况，并简单滤掉 linear-gradient 等情况\n  if (\n    typeof image === 'string' &&\n    image.indexOf(',') === -1 &&\n    image.indexOf('(') === -1\n  ) {\n    return `url(\"${image}\")`;\n  }\n  return image;\n}\n\n/**\n * 处理配置中的 style，主要做三件事：\n * 1. 变量解析\n * 2. 将 font-size 之类的错误写法转成 fontSize\n * 3. 针对 image 自动加 url\n */\nexport function buildStyle(style: any, data: any) {\n  if (!style) {\n    return style;\n  }\n  let styleVar =\n    typeof style === 'string'\n      ? resolveVariableAndFilter(style, data, '| raw') || {}\n      : mapValues(style, s => resolveVariableAndFilter(s, data, '| raw') || s);\n\n  Object.keys(styleVar).forEach((key: string) => {\n    if (key.indexOf('-') !== -1) {\n      styleVar[camelCase(key)] = styleVar[key];\n      delete styleVar[key];\n    }\n  });\n\n  if (styleVar.backgroundImage) {\n    styleVar.backgroundImage = autoAddImageURL(styleVar.backgroundImage);\n  }\n\n  if (styleVar.borderImage) {\n    styleVar.borderImage = autoAddImageURL(styleVar.borderImage);\n  }\n\n  if (styleVar.listStyleImage) {\n    styleVar.listStyleImage = autoAddImageURL(styleVar.listStyleImage);\n  }\n\n  return styleVar;\n}\n"
    ]
}