{
    "version": 3,
    "file": "DataScope.js",
    "sourceRoot": "",
    "sources": [
        "/src/utils/DataScope.ts"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import type {JSONSchema7} from 'json-schema';\nimport {guid, keyToPath, mapTree} from './helper';\n\n// 先只支持 JSONSchema draft07 好了\n// https://json-schema.org/draft-07/json-schema-release-notes.html\nexport type JSONSchema = JSONSchema7;\n\nexport class DataScope {\n  // 指向父级\n  parent?: DataScope;\n  readonly children: Array<DataScope> = [];\n\n  // 全局不能重复，用来快速定位\n  readonly id: string;\n\n  // todo 如果想要跨过层级直接获取某一层的数据域，用这个字段\n  ref?: string;\n\n  // scope 的名字，同一个层级不允许重名\n  name?: string;\n\n  // scope 分类\n  tag?: string;\n\n  // scope 的描述信息\n  description?: string;\n\n  readonly schemas: Array<JSONSchema> = [];\n\n  constructor(schemas: JSONSchema | Array<JSONSchema>, id: string) {\n    this.setSchemas(Array.isArray(schemas) ? schemas : [schemas]);\n    this.id = id;\n  }\n\n  addChild(id: string, schema?: JSONSchema | Array<JSONSchema>): DataScope {\n    const child = new DataScope(\n      schema || {\n        type: 'object',\n        properties: {}\n      },\n      id\n    );\n\n    this.children.push(child);\n    child.parent = this;\n    return child;\n  }\n\n  removeChild(idOrScope: string | DataScope) {\n    const idx = this.children.findIndex(item =>\n      typeof idOrScope === 'string' ? idOrScope === item.id : item === idOrScope\n    );\n\n    if (~idx) {\n      const scope = this.children[idx];\n      delete scope.parent;\n      this.children.splice(idx, 1);\n    }\n  }\n\n  setSchemas(schemas: Array<JSONSchema>) {\n    this.schemas.splice(0, this.schemas.length);\n\n    for (let schema of schemas) {\n      if (schema.type !== 'object') {\n        throw new TypeError('data scope accept only object');\n      }\n      this.schemas.push({\n        $id: guid(),\n        ...schema\n      });\n    }\n    return this;\n  }\n\n  addSchema(schema: JSONSchema) {\n    schema = {\n      $id: guid(),\n      ...schema\n    };\n    this.schemas.push(schema);\n    return this;\n  }\n\n  removeSchema(id: string) {\n    const idx = this.schemas.findIndex(schema => schema.$id === id);\n    if (~idx) {\n      this.schemas.splice(idx, 1);\n    }\n    return this;\n  }\n\n  contains(scope: DataScope) {\n    let from: DataScope | undefined = scope;\n    while (from) {\n      if (this === from) {\n        return true;\n      }\n      from = from.parent;\n    }\n    return false;\n  }\n\n  getMergedSchema() {\n    const mergedSchema: any = {\n      type: 'object',\n      properties: {}\n    };\n\n    // todo 以后再来细化这一块，先粗略的写个大概\n    this.schemas.forEach(schema => {\n      const properties: any = schema.properties || {};\n      Object.keys(properties).forEach(key => {\n        const value = properties[key];\n        if (mergedSchema.properties[key]) {\n          if (Array.isArray(mergedSchema.properties[key].oneOf)) {\n            mergedSchema.properties[key].oneOf.push();\n          } else if (\n            mergedSchema.properties[key].type &&\n            mergedSchema.properties[key].type !== value.type\n          ) {\n            mergedSchema.properties[key] = {\n              oneOf: [mergedSchema.properties[key], value]\n            };\n          }\n        } else {\n          mergedSchema.properties[key] = value;\n        }\n      });\n    });\n\n    return mergedSchema;\n  }\n\n  protected buildOptions(\n    options: Array<any>,\n    schema: JSONSchema,\n    path: string = '',\n    key: string = ''\n  ) {\n    // todo 支持 oneOf, anyOf\n    const option: any = {\n      label: schema.title || key,\n      value: path,\n      type: schema.type,\n      description: schema.description\n    };\n\n    options.push(option);\n\n    if (schema.type === 'object' && schema.properties) {\n      option.children = [];\n      const keys = Object.keys(schema.properties);\n\n      keys.forEach(key => {\n        const child: any = schema.properties![key];\n\n        this.buildOptions(\n          option.children,\n          child,\n          path + (path ? '.' : '') + key,\n          key\n        );\n      });\n    } else if (schema.type === 'array' && schema.items) {\n      option.children = [];\n      this.buildOptions(\n        option.children,\n        {\n          title: 'Member',\n          ...(schema.items as any)\n        },\n        path + (path ? '.' : '') + 'items',\n        'items'\n      );\n      option.children = mapTree(option.children, item => ({\n        ...item,\n        disabled: true\n      }));\n    }\n  }\n\n  getDataPropsAsOptions() {\n    const variables: Array<any> = [];\n    this.buildOptions(variables, this.getMergedSchema());\n    return variables[0].children;\n  }\n\n  getSchemaByPath(path: string) {\n    const parts = keyToPath(path);\n\n    for (let schema of this.schemas) {\n      const result = parts.reduce((schema: JSONSchema, key: string) => {\n        if (schema && schema.type === 'object' && schema.properties) {\n          return schema.properties[key] as JSONSchema;\n        }\n\n        return null;\n      }, schema);\n\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n}\n"
    ]
}