{
    "version": 3,
    "file": "tpl-builtin.js",
    "sourceRoot": "",
    "sources": [
        "/src/utils/tpl-builtin.ts"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {PlainObject} from '../types';\nimport isPlainObject from 'lodash/isPlainObject';\nimport {createObject, setVariable, deleteVariable} from './helper';\nimport {Enginer} from './tpl';\nimport {\n  prettyBytes,\n  escapeHtml,\n  formatDuration,\n  filterDate,\n  relativeValueRe,\n  parseDuration,\n  getFilters,\n  registerFilter,\n  pickValues,\n  resolveVariable,\n  isPureVariable,\n  resolveVariableAndFilter,\n  tokenize,\n  stripNumber\n} from 'amis-formula';\n\nexport {\n  prettyBytes,\n  escapeHtml,\n  formatDuration,\n  filterDate,\n  relativeValueRe,\n  parseDuration,\n  getFilters,\n  registerFilter,\n  pickValues,\n  resolveVariable,\n  isPureVariable,\n  resolveVariableAndFilter,\n  tokenize,\n  stripNumber\n};\n\nexport function resolveMapping(\n  value: any,\n  data: PlainObject,\n  defaultFilter = '| raw'\n) {\n  return typeof value === 'string' && isPureVariable(value)\n    ? resolveVariableAndFilter(value, data, defaultFilter, () => '')\n    : typeof value === 'string' && ~value.indexOf('$')\n    ? tokenize(value, data, defaultFilter)\n    : value;\n}\n\nexport function dataMapping(\n  to: any,\n  from: PlainObject = {},\n  ignoreFunction: boolean | ((key: string, value: any) => boolean) = false,\n  convertKeyToPath?: boolean\n): any {\n  if (Array.isArray(to)) {\n    return to.map(item =>\n      dataMapping(item, from, ignoreFunction, convertKeyToPath)\n    );\n  } else if (typeof to === 'string') {\n    return resolveMapping(to, from);\n  } else if (!isPlainObject(to)) {\n    return to;\n  }\n\n  let ret = {};\n  Object.keys(to).forEach(key => {\n    const value = to[key];\n    let keys: Array<string>;\n\n    if (typeof ignoreFunction === 'function' && ignoreFunction(key, value)) {\n      // 如果被ignore，不做数据映射处理。\n      setVariable(ret, key, value, convertKeyToPath);\n    } else if (key === '&' && value === '$$') {\n      ret = {\n        ...ret,\n        ...from\n      };\n    } else if (key === '&') {\n      const v =\n        isPlainObject(value) &&\n        (keys = Object.keys(value)) &&\n        keys.length === 1 &&\n        from[keys[0].substring(1)] &&\n        Array.isArray(from[keys[0].substring(1)])\n          ? from[keys[0].substring(1)].map((raw: object) =>\n              dataMapping(\n                value[keys[0]],\n                createObject(from, raw),\n                ignoreFunction,\n                convertKeyToPath\n              )\n            )\n          : resolveMapping(value, from);\n\n      if (Array.isArray(v) || typeof v === 'string') {\n        ret = v;\n      } else if (typeof v === 'function') {\n        ret = {\n          ...ret,\n          ...v(from)\n        };\n      } else {\n        ret = {\n          ...ret,\n          ...v\n        };\n      }\n    } else if (value === '$$') {\n      setVariable(ret, key, from, convertKeyToPath);\n    } else if (value && value[0] === '$') {\n      const v = resolveMapping(value, from);\n      setVariable(ret, key, v, convertKeyToPath);\n\n      if (v === '__undefined') {\n        deleteVariable(ret, key);\n      }\n    } else if (\n      isPlainObject(value) &&\n      (keys = Object.keys(value)) &&\n      keys.length === 1 &&\n      keys[0][0] === '$' &&\n      isPlainObject(value[keys[0]])\n    ) {\n      // from[keys[0].substring(1)] &&\n      // Array.isArray(from[keys[0].substring(1)])\n      // 支持只取数组中的部分值这个需求\n      // 如:\n      // data: {\n      //   items: {\n      //     '$rows': {\n      //        id: '$id',\n      //        forum_id: '$forum_id'\n      //      }\n      //   }\n      // }\n      const arr = Array.isArray(from[keys[0].substring(1)])\n        ? from[keys[0].substring(1)]\n        : [];\n      const mapping = value[keys[0]];\n\n      (ret as PlainObject)[key] = arr.map((raw: object) =>\n        dataMapping(\n          mapping,\n          createObject(from, raw),\n          ignoreFunction,\n          convertKeyToPath\n        )\n      );\n    } else if (isPlainObject(value)) {\n      setVariable(\n        ret,\n        key,\n        dataMapping(value, from, ignoreFunction, convertKeyToPath),\n        convertKeyToPath\n      );\n    } else if (Array.isArray(value)) {\n      setVariable(\n        ret,\n        key,\n        value.map((value: any) =>\n          isPlainObject(value)\n            ? dataMapping(value, from, ignoreFunction, convertKeyToPath)\n            : resolveMapping(value, from)\n        ),\n        convertKeyToPath\n      );\n    } else if (typeof value == 'string' && ~value.indexOf('$')) {\n      setVariable(ret, key, resolveMapping(value, from), convertKeyToPath);\n    } else if (typeof value === 'function' && ignoreFunction !== true) {\n      setVariable(ret, key, value(from), convertKeyToPath);\n    } else {\n      setVariable(ret, key, value, convertKeyToPath);\n\n      if (value === '__undefined') {\n        deleteVariable(ret, key);\n      }\n    }\n  });\n\n  return ret;\n}\n\nfunction matchSynatax(str: string) {\n  let from = 0;\n  while (true) {\n    const idx = str.indexOf('$', from);\n    if (~idx) {\n      const nextToken = str[idx + 1];\n\n      // 如果没有下一个字符，或者下一个字符是引号或者空格\n      // 这个一般不是取值用法\n      if (!nextToken || ~['\"', \"'\", ' '].indexOf(nextToken)) {\n        from = idx + 1;\n        continue;\n      }\n\n      // 如果上个字符是转义也不是取值用法\n      const prevToken = str[idx - 1];\n      if (prevToken && prevToken === '\\\\') {\n        from = idx + 1;\n        continue;\n      }\n\n      return true;\n    } else {\n      break;\n    }\n  }\n  return false;\n}\n\nexport function register(): Enginer & {name: string} {\n  return {\n    name: 'builtin',\n    test: (str: string) => typeof str === 'string' && matchSynatax(str),\n    removeEscapeToken: (str: string) =>\n      typeof str === 'string' ? str.replace(/\\\\\\$/g, '$') : str,\n    compile: (str: string, data: object, defaultFilter = '| html') => {\n      try {\n        return tokenize(str, data, defaultFilter);\n      } catch (e) {\n        return `error: ${e.message}`;\n      }\n    }\n  };\n}\n"
    ]
}