{
    "version": 3,
    "file": "normalizeLink.js",
    "sourceRoot": "",
    "sources": [
        "/src/utils/normalizeLink.ts"
    ],
    "names": [],
    "mappings": ";;;AAAO,IAAM,aAAa,GAAG,UAAC,EAAU,EAAE,QAA0B;IAA1B,yBAAA,EAAA,WAAW,MAAM,CAAC,QAAQ;IAClE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;IAEd,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACvB,EAAE,GAAG,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,MAAM,GAAG,EAAE,CAAC;KAC/C;SAAM,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC9B,EAAE,GAAG,QAAQ,CAAC,QAAQ,GAAG,EAAE,CAAC;KAC7B;IAED,IAAM,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC5B,IAAM,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC7B,IAAI,QAAQ,GAAG,CAAC,GAAG;QACjB,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;QACtB,CAAC,CAAC,CAAC,IAAI;YACP,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC;YACvB,CAAC,CAAC,EAAE,CAAC;IACP,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACrE,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;IAEtD,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;KAC9B;SAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAChE,IAAI,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC;QACrC,IAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACtC,KAAK,CAAC,GAAG,EAAE,CAAC;QACZ,IAAI,CAAC,SAAA,CAAC;QACN,OAAO,CAAC,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE;YACtC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;gBAClB,KAAK,CAAC,GAAG,EAAE,CAAC;aACb;YACD,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;SAC5C;QACD,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC7C;IAED,OAAO,QAAQ,GAAG,MAAM,GAAG,IAAI,CAAC;AAClC,CAAC,CAAC;AApCW,QAAA,aAAa,iBAoCxB",
    "sourcesContent": [
        "export const normalizeLink = (to: string, location = window.location) => {\n  to = to || '';\n\n  if (to && to[0] === '#') {\n    to = location.pathname + location.search + to;\n  } else if (to && to[0] === '?') {\n    to = location.pathname + to;\n  }\n\n  const idx = to.indexOf('?');\n  const idx2 = to.indexOf('#');\n  let pathname = ~idx\n    ? to.substring(0, idx)\n    : ~idx2\n    ? to.substring(0, idx2)\n    : to;\n  let search = ~idx ? to.substring(idx, ~idx2 ? idx2 : undefined) : '';\n  let hash = ~idx2 ? to.substring(idx2) : location.hash;\n\n  if (!pathname) {\n    pathname = location.pathname;\n  } else if (pathname[0] != '/' && !/^https?\\:\\/\\//.test(pathname)) {\n    let relativeBase = location.pathname;\n    const paths = relativeBase.split('/');\n    paths.pop();\n    let m;\n    while ((m = /^\\.\\.?\\//.exec(pathname))) {\n      if (m[0] === '../') {\n        paths.pop();\n      }\n      pathname = pathname.substring(m[0].length);\n    }\n    pathname = paths.concat(pathname).join('/');\n  }\n\n  return pathname + search + hash;\n};\n"
    ]
}