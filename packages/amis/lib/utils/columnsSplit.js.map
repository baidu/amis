{
    "version": 3,
    "file": "columnsSplit.js",
    "sourceRoot": "",
    "sources": [
        "/src/utils/columnsSplit.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA;;GAEG;AACH,6DAA0B;AAC1B,oEAAiC;AAEjC,SAAgB,YAAY,CAC1B,IAAW,EACX,EAAO,EACP,YAAgC;IAEhC,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC,MAAM,EAAE;QACtD,IAAI,WAAS,GAAG,CAAC,CAAC;QAClB,IAAM,UAAQ,GAAkB,EAAE,CAAC;QACnC,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQ,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACxE,IAAI,eAAa,GAAG,sBAAe,OAAO,CAAE,CAAC;QAC7C,YAAY,CAAC,OAAO,CAAC,UAAC,UAAU,EAAE,UAAU;YAC1C,IAAI,UAAU,EAAE;gBACd,UAAQ,CAAC,IAAI,CACX,uCAAK,SAAS,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,UAAU,IACxC,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,UAAU,EAAC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,KAAK;oBAC7C,IAAI,WAAS,GAAG,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;wBACnC,OAAO;wBACP,OAAO,CACL,uCAAK,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,CAAC,eAAa,CAAC,IAC1C,IAAI,CAAC,WAAS,GAAG,KAAK,CAAC,CACpB,CACP,CAAC;qBACH;yBAAM;wBACL,OAAO,IAAI,CAAC;qBACb;gBACH,CAAC,CAAC,CACE,CACP,CAAC;gBACF,WAAS,GAAG,WAAS,GAAG,UAAU,CAAC;aACpC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,GAAG,UAAQ,CAAC;KACjB;SAAM,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,GAAG,CAAC,EAAE;QAC/D,IAAI,MAAM,GAAG,EAAE,GAAI,YAAuB,CAAC;QAC3C,IAAI,eAAa,GAAG,sBAClB,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAC3C,CAAC;QACH,IAAI,GAAG,IAAA,eAAK,EAAC,IAAI,EAAE,YAAY,CAAC,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,UAAU,IAAK,OAAA,CAC1D,uCAAK,SAAS,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,UAAU,IACxC,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,YAAsB,EAAC,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,KAAK,IAAK,OAAA,CAC9D,uCAAK,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,CAAC,eAAa,CAAC,IAC1C,KAAK,CAAC,KAAK,CAAC,CACT,CACP,EAJ+D,CAI/D,CAAC,CACE,CACP,EAR2D,CAQ3D,CAAC,CAAC;KACJ;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAlDD,oCAkDC",
    "sourcesContent": [
        "/**\n * columnsCount 支持数字和数组两种格式\n */\nimport React from 'react';\nimport chunk from 'lodash/chunk';\n\nexport function columnsSplit(\n  body: any[],\n  cx: any,\n  columnsCount?: number | number[]\n) {\n  if (Array.isArray(columnsCount) && columnsCount.length) {\n    let bodyIndex = 0;\n    const bodyList: JSX.Element[] = [];\n    const maxSize = Math.max(Math.round(12 / Math.max(...columnsCount)), 1);\n    let cellClassName = `Grid-col--sm${maxSize}`;\n    columnsCount.forEach((columnSize, groupIndex) => {\n      if (columnSize) {\n        bodyList.push(\n          <div className={cx('Grid')} key={groupIndex}>\n            {Array.from({length: columnSize}).map((_, index) => {\n              if (bodyIndex + index < body.length) {\n                // 避免溢出\n                return (\n                  <div key={index} className={cx(cellClassName)}>\n                    {body[bodyIndex + index]}\n                  </div>\n                );\n              } else {\n                return null;\n              }\n            })}\n          </div>\n        );\n        bodyIndex = bodyIndex + columnSize;\n      }\n    });\n\n    body = bodyList;\n  } else if (typeof columnsCount === 'number' && columnsCount > 1) {\n    let weight = 12 / (columnsCount as number);\n    let cellClassName = `Grid-col--sm${\n      weight === Math.round(weight) ? weight : ''\n    }`;\n    body = chunk(body, columnsCount).map((group, groupIndex) => (\n      <div className={cx('Grid')} key={groupIndex}>\n        {Array.from({length: columnsCount as number}).map((_, index) => (\n          <div key={index} className={cx(cellClassName)}>\n            {group[index]}\n          </div>\n        ))}\n      </div>\n    ));\n  }\n\n  return body;\n}\n"
    ]
}