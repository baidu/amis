{
    "version": 3,
    "file": "position.js",
    "sourceRoot": "",
    "sources": [
        "/src/utils/position.ts"
    ],
    "names": [],
    "mappings": ";AAAA;;GAEG;;;AAEH,iEAAiC;AACjC,6EAA6C;AAE7C,IAAM,QAAQ,GAAG,UAAC,IAAa;IAC7B,OAAA,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;AAA5C,CAA4C,CAAC;AAE/C;;;;;GAKG;AACH,SAAwB,QAAQ,CAC9B,IAAiB,EACjB,YAA0B;IAE1B,IAAI,YAAY,GAAG,EAAC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAC,CAAC;IACrC,IAAI,MAAM,CAAC;IACX,0EAA0E;IAC1E,uCAAuC;IACvC,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,OAAO,EAAE;QACnE,MAAM,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;KACvC;SAAM;QACL,IAAM,MAAM,GAAgB,YAAY,IAAI,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC;QAClE,MAAM,GAAG,IAAA,gBAAS,EAAC,IAAI,CAAC,CAAC;QAEzB,IAAI,QAAQ,CAAC,MAAM,CAAC,KAAK,MAAM;YAAE,YAAY,GAAG,IAAA,gBAAS,EAAC,MAAM,CAAC,CAAC;QAClE,IAAM,SAAS,GAAG,MAAM,CACtB,gBAAgB,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CACnE,CAAC;QACF,YAAY,CAAC,GAAG,IAAI,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,MAAM,CAAC,SAAS,IAAI,CAAC,CAAC;QAEpE,IAAM,UAAU,GAAG,MAAM,CACvB,gBAAgB,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CACpE,CAAC;QACF,YAAY,CAAC,IAAI,IAAI,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,GAAG,MAAM,CAAC,UAAU,IAAI,CAAC,CAAC;KACxE;IAED,IAAM,SAAS,GAAG,MAAM,CACtB,gBAAgB,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC,CAC3D,CAAC;IACF,IAAM,UAAU,GAAG,MAAM,CACvB,gBAAgB,CAAC,IAAI,CAAC,CAAC,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,CAC5D,CAAC;IACF,2CAA2C;IAC3C,uDACK,MAAM,KACT,GAAG,EAAE,MAAM,CAAC,GAAG,GAAG,YAAY,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,EACnE,IAAI,EAAE,MAAM,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,IACvE;AACJ,CAAC;AAtCD,2BAsCC",
    "sourcesContent": [
        "/**\n * 删减自 https://github.com/react-bootstrap/dom-helpers/blob/master/src/position.ts\n */\n\nimport getOffset from './offset';\nimport getOffsetParent from './offsetParent';\n\nconst nodeName = (node: Element) =>\n  node.nodeName && node.nodeName.toLowerCase();\n\n/**\n * Returns the relative position of a given element.\n *\n * @param node the element\n * @param offsetParent the offset parent\n */\nexport default function position(\n  node: HTMLElement,\n  offsetParent?: HTMLElement\n) {\n  let parentOffset = {top: 0, left: 0};\n  let offset;\n  // Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n  // because it is its only offset parent\n  if (getComputedStyle(node).getPropertyValue('position') === 'fixed') {\n    offset = node.getBoundingClientRect();\n  } else {\n    const parent: HTMLElement = offsetParent || getOffsetParent(node);\n    offset = getOffset(node);\n\n    if (nodeName(parent) !== 'html') parentOffset = getOffset(parent);\n    const borderTop = String(\n      getComputedStyle(parent).getPropertyValue('border-top-width') || 0\n    );\n    parentOffset.top += parseInt(borderTop, 10) - parent.scrollTop || 0;\n\n    const borderLeft = String(\n      getComputedStyle(parent).getPropertyValue('border-left-width') || 0\n    );\n    parentOffset.left += parseInt(borderLeft, 10) - parent.scrollLeft || 0;\n  }\n\n  const marginTop = String(\n    getComputedStyle(node).getPropertyValue('margin-top') || 0\n  );\n  const marginLeft = String(\n    getComputedStyle(node).getPropertyValue('margin-left') || 0\n  );\n  // Subtract parent offsets and node margins\n  return {\n    ...offset,\n    top: offset.top - parentOffset.top - (parseInt(marginTop, 10) || 0),\n    left: offset.left - parentOffset.left - (parseInt(marginLeft, 10) || 0)\n  };\n}\n"
    ]
}