{
    "version": 3,
    "file": "DataSchema.js",
    "sourceRoot": "",
    "sources": [
        "/src/utils/DataSchema.ts"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {DataScope} from './DataScope';\nimport type {JSONSchema} from './DataScope';\nimport {guid} from './helper';\n\n/**\n * 用来定义数据本身的数据结构，比如有类型是什么，有哪些属性。\n */\nexport class DataSchema {\n  // 指向顶级数据作用域\n  readonly root: DataScope;\n\n  readonly idMap: {\n    [propName: string]: DataScope;\n  } = {};\n\n  // 这个经常变动，游离于整个链中\n  current: DataScope;\n\n  constructor(schema: JSONSchema | Array<JSONSchema>) {\n    this.root = new DataScope(schema, 'root');\n    this.idMap['root'] = this.root;\n    this.current = this.root;\n  }\n\n  setSchema(schemas: Array<JSONSchema>) {\n    this.current.setSchemas(schemas);\n    return this;\n  }\n\n  addSchema(schema: JSONSchema) {\n    this.current.addSchema(schema);\n    return this;\n  }\n\n  removeSchema(id: string) {\n    this.current.removeSchema(id);\n    delete this.idMap[id];\n    return this;\n  }\n\n  getSchemas() {\n    const schemas: Array<JSONSchema> = [];\n    let current: DataScope | void = this.current;\n\n    while (current) {\n      schemas.push(...current.schemas);\n      current = current.parent;\n    }\n\n    return schemas;\n  }\n\n  addScope(schema?: JSONSchema | Array<JSONSchema>, id: string = guid()) {\n    if (this.idMap[id]) {\n      throw new Error('scope id `' + id + '` already exists');\n    }\n\n    this.current = this.current.addChild(id, schema);\n    this.idMap[id] = this.current;\n    return this;\n  }\n\n  removeScope(idOrScope: string | DataScope) {\n    const scope = this.getScope(idOrScope);\n\n    if (!scope.parent) {\n      throw new Error('cannot remove root scope');\n    }\n\n    if (scope.contains(this.current)) {\n      this.current = scope.parent!;\n    }\n\n    scope.parent?.removeChild(scope);\n    delete this.idMap[scope.id];\n    return this;\n  }\n\n  hasScope(idOrScope: string | DataScope): idOrScope is string | DataScope {\n    const id = typeof idOrScope === 'string' ? idOrScope : idOrScope.id;\n    const scope = this.idMap[id];\n    return !!scope;\n  }\n\n  getScope(idOrScope: string | DataScope) {\n    const id = typeof idOrScope === 'string' ? idOrScope : idOrScope.id;\n    const scope = this.idMap[id];\n\n    if (!scope) {\n      throw new Error('scope not found!');\n    }\n\n    return scope;\n  }\n\n  switchToRoot() {\n    this.current = this.root;\n    return this;\n  }\n\n  switchTo(idOrScope: string | DataScope) {\n    const scope = this.getScope(idOrScope);\n    this.current = scope;\n    return this;\n  }\n\n  getDataPropsAsOptions() {\n    const variables: Array<any> = [];\n    let current: DataScope | void = this.current;\n\n    while (current) {\n      if (current.tag) {\n        variables.push({\n          label: current.tag,\n          children: current.getDataPropsAsOptions()\n        });\n      } else {\n        variables.push(...current.getDataPropsAsOptions());\n      }\n\n      current = current.parent;\n    }\n\n    return variables;\n  }\n\n  getSchemaByPath(path: string) {\n    let current: DataScope | void = this.current;\n\n    while (current) {\n      const schema = current.getSchemaByPath(path);\n      if (schema) {\n        return schema;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n}\n"
    ]
}