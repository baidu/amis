{
    "version": 3,
    "file": "autobind.js",
    "sourceRoot": "",
    "sources": [
        "/src/utils/autobind.ts"
    ],
    "names": [],
    "mappings": ";;;AAAO,IAAA,cAAc,GAAoB,MAAM,eAA1B,EAAE,cAAc,GAAI,MAAM,eAAV,CAAW;AAEhD,SAAgB,IAAI,CAAC,EAAY,EAAE,OAAY;IAC7C,IAAI,EAAE,CAAC,IAAI,EAAE;QACX,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACzB;SAAM;QACL,OAAO,SAAS,YAAY;YAC1B,OAAO,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACtC,CAAC,CAAC;KACH;AACH,CAAC;AARD,oBAQC;AAED,IAAI,QAA8B,CAAC;AACnC,SAAS,aAAa,CAAC,GAAW,EAAE,EAAY;IAC9C,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;QAClC,MAAM,IAAI,KAAK,CACb,6BAAsB,EAAE,CAAC,IAAI,iEAAuD,EAAE,CAAC,IAAI,8EAC3B,CACjE,CAAC;KACH;IAED,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAG,IAAI,OAAO,EAAE,CAAC;KAC1B;IAED,IAAI,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,KAAK,EAAE;QAC/B,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,OAAO,EAAE,CAAC,CAAC;KAClC;IAED,IAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAErC,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,KAAK,EAAE;QAChC,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;KACnC;IAED,OAAO,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAC5B,CAAC;AAED,SAAS,mBAAmB,CAAC,GAAW;IACtC,OAAO,SAAS,GAAG,CAAY,QAAa;QAC1C,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE;YAC/B,YAAY,EAAE,IAAI;YAClB,QAAQ,EAAE,IAAI;YACd,oDAAoD;YACpD,UAAU,EAAE,IAAI;YAChB,KAAK,EAAE,QAAQ;SAChB,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC;AACJ,CAAC;AAED,SAAgB,cAAc,CAC5B,MAAc,EACd,GAAW,EACX,EAAwE;QAAhE,EAAE,WAAA,EAAE,YAAY,kBAAA,EAAE,UAAU,gBAAA;IAEpC,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;QAC5B,MAAM,IAAI,WAAW,CACnB,wDAAiD,EAAE,CAAE,CACtD,CAAC;KACH;IAEM,IAAA,WAAW,GAAI,MAAM,YAAV,CAAW;IAE7B,OAAO;QACL,YAAY,cAAA;QACZ,UAAU,YAAA;QAEV,GAAG;YACD,6BAA6B;YAC7B,yEAAyE;YACzE,gEAAgE;YAChE,IAAI,IAAI,KAAK,MAAM,EAAE;gBACnB,OAAO,EAAE,CAAC;aACX;YAED,6BAA6B;YAC7B,yEAAyE;YACzE,2CAA2C;YAC3C,8EAA8E;YAC9E,IACE,IAAI,CAAC,WAAW,KAAK,WAAW;gBAChC,cAAc,CAAC,IAAI,CAAC,CAAC,WAAW,KAAK,WAAW,EAChD;gBACA,OAAO,EAAE,CAAC;aACX;YAED,iFAAiF;YACjF,IACE,IAAI,CAAC,WAAW,KAAK,WAAW;gBAChC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,EACjC;gBACA,OAAO,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aAChC;YAED,IAAM,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YAE/B,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE;gBACxB,YAAY,EAAE,IAAI;gBAClB,QAAQ,EAAE,IAAI;gBACd,0CAA0C;gBAC1C,UAAU,EAAE,KAAK;gBACjB,KAAK,EAAE,OAAO;aACf,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;QACjB,CAAC;QACD,GAAG,EAAE,mBAAmB,CAAC,GAAG,CAAC;KAC9B,CAAC;AACJ,CAAC;AA1DD,wCA0DC",
    "sourcesContent": [
        "const {defineProperty, getPrototypeOf} = Object;\n\nexport function bind(fn: Function, context: any) {\n  if (fn.bind) {\n    return fn.bind(context);\n  } else {\n    return function __autobind__() {\n      return fn.apply(context, arguments);\n    };\n  }\n}\n\nlet mapStore: WeakMap<Object, any>;\nfunction getBoundSuper(obj: Object, fn: Function) {\n  if (typeof WeakMap === 'undefined') {\n    throw new Error(\n      `Using @autobind on ${fn.name}() requires WeakMap support due to its use of super.${fn.name}()\n        See https://github.com/jayphelps/core-decorators.js/issues/20`\n    );\n  }\n\n  if (!mapStore) {\n    mapStore = new WeakMap();\n  }\n\n  if (mapStore.has(obj) === false) {\n    mapStore.set(obj, new WeakMap());\n  }\n\n  const superStore = mapStore.get(obj);\n\n  if (superStore.has(fn) === false) {\n    superStore.set(fn, bind(fn, obj));\n  }\n\n  return superStore.get(fn);\n}\n\nfunction createDefaultSetter(key: string) {\n  return function set(this: any, newValue: any) {\n    Object.defineProperty(this, key, {\n      configurable: true,\n      writable: true,\n      // IS enumerable when reassigned by the outside word\n      enumerable: true,\n      value: newValue\n    });\n\n    return newValue;\n  };\n}\n\nexport function autobindMethod(\n  target: Object,\n  key: string,\n  {value: fn, configurable, enumerable}: TypedPropertyDescriptor<Function>\n) {\n  if (typeof fn !== 'function') {\n    throw new SyntaxError(\n      `@autobind can only be used on functions, not: ${fn}`\n    );\n  }\n\n  const {constructor} = target;\n\n  return {\n    configurable,\n    enumerable,\n\n    get() {\n      // Class.prototype.key lookup\n      // Someone accesses the property directly on the prototype on which it is\n      // actually defined on, i.e. Class.prototype.hasOwnProperty(key)\n      if (this === target) {\n        return fn;\n      }\n\n      // Class.prototype.key lookup\n      // Someone accesses the property directly on a prototype but it was found\n      // up the chain, not defined directly on it\n      // i.e. Class.prototype.hasOwnProperty(key) == false && key in Class.prototype\n      if (\n        this.constructor !== constructor &&\n        getPrototypeOf(this).constructor === constructor\n      ) {\n        return fn;\n      }\n\n      // Autobound method calling super.sameMethod() which is also autobound and so on.\n      if (\n        this.constructor !== constructor &&\n        key in this.constructor.prototype\n      ) {\n        return getBoundSuper(this, fn);\n      }\n\n      const boundFn = bind(fn, this);\n\n      defineProperty(this, key, {\n        configurable: true,\n        writable: true,\n        // NOT enumerable when it's a bound method\n        enumerable: false,\n        value: boundFn\n      });\n\n      return boundFn;\n    },\n    set: createDefaultSetter(key)\n  };\n}\n"
    ]
}