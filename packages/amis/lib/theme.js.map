{
    "version": 3,
    "file": "theme.js",
    "sourceRoot": "",
    "sources": [
        "/src/theme.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "// 主题管理\nimport cx from 'classnames';\nimport React from 'react';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nexport type ClassValue =\n  | string\n  | number\n  | ClassDictionary\n  | ClassArray\n  | undefined\n  | null\n  | boolean;\n\ninterface ClassDictionary {\n  [id: string]: any;\n}\n\ninterface ClassArray extends Array<ClassValue> {}\n\nexport type ClassNamesFn = (...classes: ClassValue[]) => string;\n\ninterface ThemeConfig {\n  classPrefix?: string;\n  renderers?: {\n    [propName: string]: any;\n  };\n  components?: {\n    [propName: string]: any;\n  };\n\n  [propsName: string]: any;\n}\n\nconst themes: {\n  [propName: string]: ThemeConfig;\n} = {\n  default: {}\n};\n\nexport function theme(name: string, config: Partial<ThemeConfig>) {\n  themes[name] = {\n    ...config\n  };\n}\n\nconst fns: {\n  [propName: string]: (...classes: ClassValue[]) => string;\n} = {};\nexport function makeClassnames(ns?: string) {\n  if (ns && fns[ns]) {\n    return fns[ns];\n  }\n\n  const fn = (...classes: ClassValue[]) => {\n    const str = cx(...(classes as any));\n    return str && ns\n      ? str\n          .replace(/(^|\\s)([A-Z])/g, '$1' + ns + '$2')\n          .replace(/(^|\\s)\\:/g, '$1')\n      : str || '';\n  };\n\n  ns && (fns[ns] = fn);\n  return fn;\n}\n\nexport type ThemeInstance = ThemeConfig & {\n  getRendererConfig: (name?: string) => any;\n  getComponentConfig: (name?: string) => any;\n  classnames: ClassNamesFn;\n};\n\nexport function hasTheme(theme: string): boolean {\n  return !!themes[theme];\n}\n\nexport function setDefaultTheme(theme: string) {\n  if (hasTheme(theme)) {\n    defaultTheme = theme;\n  }\n}\n\nexport function classnames(...classes: ClassValue[]) {\n  return getTheme(defaultTheme).classnames.apply(null, classes);\n}\n\nexport function getClassPrefix() {\n  return getTheme(defaultTheme).classPrefix;\n}\n\nexport function getTheme(theme: string): ThemeInstance {\n  const config = themes[theme || 'cxd'];\n\n  if (!config.getRendererConfig) {\n    config.getRendererConfig = (name?: string) =>\n      config.renderers && name ? config.renderers[name] : null;\n  }\n\n  if (!config.classnames) {\n    const ns = config.classPrefix;\n    config.classnames = config.classnames || makeClassnames(ns);\n  }\n\n  if (!config.getComponentConfig) {\n    config.getComponentConfig = (name?: string) =>\n      config.components && name ? config.components[name] : null;\n  }\n\n  return config as ThemeInstance;\n}\n\nexport interface ThemeProps {\n  className?: string;\n  classPrefix: string;\n  classnames: ClassNamesFn;\n  theme?: string;\n}\n\nexport interface ThemeOutterProps {\n  theme?: string;\n  className?: string;\n  classPrefix?: string;\n  classnames?: ClassNamesFn;\n}\n\nexport let defaultTheme: string = 'cxd';\nexport const ThemeContext = React.createContext('');\n\nexport function themeable<\n  T extends React.ComponentType<React.ComponentProps<T> & ThemeProps> & {\n    themeKey?: string;\n  }\n>(ComposedComponent: T) {\n  type OuterProps = JSX.LibraryManagedAttributes<\n    T,\n    Omit<React.ComponentProps<T>, keyof ThemeProps>\n  > &\n    ThemeOutterProps;\n\n  const result = hoistNonReactStatic(\n    class extends React.Component<OuterProps> {\n      static displayName = `Themeable(${\n        ComposedComponent.displayName || ComposedComponent.name\n      })`;\n      static contextType = ThemeContext;\n      static ComposedComponent = ComposedComponent as React.ComponentType<T>;\n\n      constructor(props: OuterProps) {\n        super(props);\n\n        this.childRef = this.childRef.bind(this);\n        this.getWrappedInstance = this.getWrappedInstance.bind(this);\n      }\n\n      ref: any;\n\n      childRef(ref: any) {\n        while (ref && ref.getWrappedInstance) {\n          ref = ref.getWrappedInstance();\n        }\n\n        this.ref = ref;\n      }\n\n      getWrappedInstance() {\n        return this.ref;\n      }\n\n      render() {\n        const theme: string = this.props.theme || this.context || defaultTheme;\n        const config = hasTheme(theme)\n          ? getTheme(theme)\n          : getTheme(defaultTheme);\n        const injectedProps: {\n          classPrefix: string;\n          classnames: ClassNamesFn;\n          theme: string;\n        } = {\n          classPrefix: config.classPrefix as string,\n          classnames: config.classnames,\n          theme\n        };\n        const refConfig = ComposedComponent.prototype?.isReactComponent\n          ? {ref: this.childRef}\n          : {forwardedRef: this.childRef};\n\n        return (\n          <ThemeContext.Provider value={theme}>\n            <ComposedComponent\n              {...config.getComponentConfig(ComposedComponent.themeKey)}\n              {...(this.props as JSX.LibraryManagedAttributes<\n                T,\n                React.ComponentProps<T>\n              >)}\n              {...injectedProps}\n              {...refConfig}\n            />\n          </ThemeContext.Provider>\n        );\n      }\n    },\n    ComposedComponent\n  );\n\n  return result as typeof result & {\n    ComposedComponent: T;\n  };\n}\n"
    ]
}