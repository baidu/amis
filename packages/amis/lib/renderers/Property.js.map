{
    "version": 3,
    "file": "Property.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Property.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\n * @file 表格的方式显示只读信息，比如产品详情\n */\n\nimport React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {BaseSchema, SchemaExpression, SchemaObject, SchemaTpl} from '../Schema';\nimport {resolveVariableAndFilter} from '../utils/tpl-builtin';\nimport {visibilityFilter} from '../utils/helper';\nimport {buildStyle} from '../utils/style';\n\nexport type PropertyItemProps = {\n  /**\n   * 属性名\n   */\n  label?: SchemaTpl;\n\n  /**\n   * 属性值\n   */\n  content?: SchemaTpl;\n\n  /**\n   * 配置是否显示，如果不显示，后续的节点会补上来\n   */\n  visibleOn?: SchemaExpression;\n\n  /**\n   * 配置是否显示，如果不显示，后续的节点会补上来\n   */\n  hiddenOn?: SchemaExpression;\n\n  /**\n   * 跨几列\n   */\n  span?: number;\n};\n\nexport type PropertyItem = PropertyItemProps & SchemaObject;\n\n/**\n * Property 属性列表\n * 文档：https://baidu.gitee.io/amis/docs/components/property\n */\nexport interface PropertySchema extends BaseSchema {\n  /**\n   * 指定为 property 展示类型\n   */\n  type: 'property';\n\n  /**\n   * 标题\n   */\n  title?: string;\n\n  /**\n   * 一共几列\n   */\n  column?: number;\n\n  /**\n   * 显示模式\n   */\n  mode?: 'table' | 'simple';\n\n  /**\n   * 每个 property 的设置\n   */\n  items: Array<PropertyItem>;\n\n  /**\n   * 自定义样式\n   */\n  style?: {\n    [propName: string]: any;\n  };\n\n  /**\n   * 标题样式\n   */\n  titleStyle?: {\n    [propName: string]: any;\n  };\n\n  /**\n   * 自定义样式\n   */\n  labelStyle?: {\n    [propName: string]: any;\n  };\n\n  separator?: string;\n\n  /**\n   * 自定义样式\n   */\n  contentStyle?: {\n    [propName: string]: any;\n  };\n}\n\nexport interface PropertyProps\n  extends RendererProps,\n    Omit<PropertySchema, 'type' | 'className'> {}\n\ninterface PropertyContent {\n  label: any;\n  content: any;\n  span: number;\n}\n\nexport default class Property extends React.Component<PropertyProps, object> {\n  constructor(props: PropertyProps) {\n    super(props);\n  }\n\n  /**\n   * 算好每行的分布情况，方便后续渲染\n   */\n  prepareRows() {\n    const {column = 3, items, source, data} = this.props;\n    const propertyItems =\n      (items\n        ? items\n        : (resolveVariableAndFilter(\n            source,\n            data,\n            '| raw'\n          ) as Array<PropertyItem>)) || [];\n\n    const rows: PropertyContent[][] = [];\n\n    let row: PropertyContent[] = [];\n    let columnLeft = column;\n    let index = 0;\n    const filteredItems = visibilityFilter(propertyItems, data);\n\n    for (const item of filteredItems) {\n      index = index + 1;\n      const span = Math.min(item.span || 1, column);\n      columnLeft = columnLeft - span;\n      const rowItem = {\n        label: item.label,\n        content: item.content,\n        span: span\n      };\n      // 如果还能放得下就放这一行\n      if (columnLeft >= 0) {\n        row.push(rowItem);\n      } else {\n        rows.push(row);\n        columnLeft = column - span;\n        row = [rowItem];\n      }\n\n      // 最后一行将最后的数据 push\n      if (index === filteredItems.length) {\n        rows.push(row);\n      }\n    }\n\n    return rows;\n  }\n\n  renderRow(rows: PropertyContent[][]) {\n    const {\n      render,\n      contentStyle,\n      labelStyle,\n      separator = ': ',\n      mode = 'table',\n      data\n    } = this.props;\n    return rows.map((row, key) => {\n      return (\n        <tr key={key}>\n          {row.map((property, index) => {\n            return mode === 'table' ? (\n              <React.Fragment key={`item-${index}`}>\n                <th style={buildStyle(labelStyle, data)}>\n                  {render('label', property.label)}\n                </th>\n                <td\n                  colSpan={property.span + property.span - 1} // 需要再补上 th 所占的列数\n                  style={buildStyle(contentStyle, data)}\n                >\n                  {render('content', property.content)}\n                </td>\n              </React.Fragment>\n            ) : (\n              <td\n                colSpan={property.span}\n                style={buildStyle(contentStyle, data)}\n                key={`item-${index}`}\n              >\n                <span style={buildStyle(labelStyle, data)}>\n                  {render('label', property.label)}\n                </span>\n                {separator}\n                {render('content', property.content)}\n              </td>\n            );\n          })}\n        </tr>\n      );\n    });\n  }\n\n  render() {\n    const {\n      style,\n      title,\n      column = 3,\n      classnames: cx,\n      className,\n      titleStyle,\n      data,\n      mode = 'table'\n    } = this.props;\n\n    const rows = this.prepareRows();\n\n    return (\n      <div\n        className={cx('Property', `Property--${mode}`, className)}\n        style={buildStyle(style, data)}\n      >\n        <table>\n          {title ? (\n            <thead>\n              <tr>\n                <th\n                  colSpan={mode === 'table' ? column + column : column}\n                  style={buildStyle(titleStyle, data)}\n                >\n                  {title}\n                </th>\n              </tr>\n            </thead>\n          ) : null}\n          <tbody>{this.renderRow(rows)}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\n@Renderer({\n  type: 'property'\n})\nexport class PropertyRenderer extends Property {}\n"
    ]
}