{
    "version": 3,
    "file": "GridNav.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/GridNav.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {autobind, getPropValue} from '../utils/helper';\nimport {isPureVariable, resolveVariableAndFilter} from '../utils/tpl-builtin';\nimport {\n  BaseSchema,\n  SchemaTokenizeableString,\n  SchemaTpl,\n  SchemaUrlPath\n} from '../Schema';\nimport {ActionSchema} from './Action';\nimport GridNav, {GridNavDirection, GridNavItem} from '../components/GridNav';\nimport {BadgeSchema} from '../components/Badge';\nimport handleAction from '../utils/handleAction';\nimport {validations} from '../utils/validations';\n\nexport interface ListItemSchema extends Omit<BaseSchema, 'type'> {\n  /**\n   * 单项点击事件\n   */\n  clickAction?: ActionSchema;\n\n  /**\n   * 跳转地址\n   */\n  link?: string;\n\n  /**\n   * 打开方式\n   */\n  blank?: string;\n\n  /**\n   * 图片地址\n   */\n  icon?: SchemaUrlPath;\n\n  /**\n   * 描述\n   */\n  text?: SchemaTpl;\n\n  /**\n   * 图标最大宽度比例 0-100\n   */\n  iconRatio?: number;\n\n  /**\n   * 角标\n   */\n  badge?: BadgeSchema;\n}\n\n/**\n * List 列表展示控件。\n * 文档：https://baidu.gitee.io/amis/docs/components/card\n */\nexport interface ListSchema extends BaseSchema {\n  /**\n   * 指定为 List 列表展示控件。\n   */\n  type: 'grid-nav';\n\n  /**\n   * 列表项类名\n   */\n  itemClassName?: string;\n\n  /**\n   * 静态图片列表配置\n   */\n  options?: Array<ListItemSchema>;\n\n  /**\n   * 是否将列表项固定为正方形\n   */\n  square?: boolean;\n\n  /**\n   * 是否将列表项内容居中显示\n   */\n  center?: boolean;\n\n  /**\n   * 是否显示列表项边框\n   */\n  border?: boolean;\n\n  /**\n   * 列表项之间的间距，默认单位为px\n   */\n  gutter?: number;\n\n  /**\n   * 图标宽度占比, 1-100\n   */\n  iconRatio?: number;\n\n  /**\n   * 列表项内容排列的方向，可选值为 horizontal 、vertical\n   */\n  direction?: GridNavDirection;\n\n  /**\n   * 列数\n   */\n  columnNum?: number;\n\n  /**\n   * 数据源: 绑定当前环境变量\n   *\n   * @default ${items}\n   */\n  source?: SchemaTokenizeableString;\n}\n\nexport interface Column {\n  type: string;\n  [propName: string]: any;\n}\n\nexport interface ListProps\n  extends RendererProps,\n    Omit<ListSchema, 'type' | 'className'> {\n  handleClick: (item?: ListItemSchema) => void;\n}\n\n@Renderer({\n  type: 'grid-nav'\n})\nexport default class List extends React.Component<ListProps, object> {\n  @autobind\n  handleClick(item: ListItemSchema) {\n    return (e: React.MouseEvent) => {\n      let action;\n      if (item.link) {\n        action = validations.isUrl({}, item.link)\n          ? {\n              type: 'button',\n              actionType: 'url',\n              url: item.link,\n              blank: item.blank\n            }\n          : {\n              type: 'button',\n              actionType: 'link',\n              link: item.link\n            };\n      } else {\n        action = item.clickAction!;\n      }\n      handleAction(e, action as ActionSchema, this.props);\n    };\n  }\n\n  render() {\n    const {itemClassName, source, data, options, classnames} = this.props;\n\n    let value = getPropValue(this.props);\n    let list: any = [];\n\n    if (typeof source === 'string' && isPureVariable(source)) {\n      list = resolveVariableAndFilter(source, data, '| raw') || undefined;\n    } else if (Array.isArray(value)) {\n      list = value;\n    } else if (Array.isArray(options)) {\n      list = options;\n    }\n\n    if (list && !Array.isArray(list)) {\n      list = [list];\n    }\n\n    if (!list?.length) {\n      return null;\n    }\n\n    return (\n      <GridNav {...this.props}>\n        {list.map((item: ListItemSchema, index: number) => (\n          <GridNavItem\n            key={index}\n            onClick={\n              item.clickAction || item.link ? this.handleClick(item) : undefined\n            }\n            className={itemClassName}\n            text={item.text}\n            icon={item.icon}\n            classnames={classnames}\n            badge={\n              item.badge\n                ? {\n                    badge: item.badge,\n                    data: data,\n                    classnames\n                  }\n                : undefined\n            }\n          />\n        ))}\n      </GridNav>\n    );\n  }\n}\n"
    ]
}