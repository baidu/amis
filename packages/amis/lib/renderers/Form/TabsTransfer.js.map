{
    "version": 3,
    "file": "TabsTransfer.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/TabsTransfer.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {OptionsControlProps, OptionsControl} from './Options';\nimport React from 'react';\nimport find from 'lodash/find';\nimport Spinner from '../../components/Spinner';\nimport {BaseTransferRenderer, TransferControlSchema} from './Transfer';\nimport TabsTransfer from '../../components/TabsTransfer';\nimport {Option, optionValueCompare} from '../../components/Select';\nimport {\n  autobind,\n  string2regExp,\n  filterTree,\n  createObject,\n  findTreeIndex,\n  getTree,\n  spliceTree\n} from '../../utils/helper';\nimport {BaseSelection, ItemRenderStates} from '../../components/Selection';\nimport {Action} from '../../types';\n\n/**\n * TabsTransfer\n * 文档：https://baidu.gitee.io/amis/docs/components/form/tabs-transfer\n */\nexport interface TabsTransferControlSchema\n  extends Omit<TransferControlSchema, 'type'> {\n  type: 'tabs-transfer';\n}\n\nexport interface TabsTransferProps\n  extends OptionsControlProps,\n    Omit<\n      TabsTransferControlSchema,\n      | 'type'\n      | 'options'\n      | 'inputClassName'\n      | 'className'\n      | 'descriptionClassName'\n    > {}\n\ninterface BaseTransferState {\n  activeKey: number;\n}\n\nexport class BaseTabsTransferRenderer<\n  T extends OptionsControlProps = TabsTransferProps\n> extends BaseTransferRenderer<T> {\n  state: BaseTransferState = {\n    activeKey: 0\n  };\n\n  @autobind\n  async onTabChange(key: number) {\n    const {dispatchEvent} = this.props;\n    const rendererEvent = await dispatchEvent('tab-change', {key});\n    if (rendererEvent?.prevented) {\n      return;\n    }\n    this.setState({\n      activeKey: key\n    });\n  }\n\n  @autobind\n  async handleTabSearch(\n    term: string,\n    option: Option,\n    cancelExecutor: Function\n  ) {\n    const {\n      options,\n      labelField,\n      valueField,\n      env,\n      data,\n      translate: __\n    } = this.props;\n    const {searchApi} = option;\n\n    if (searchApi) {\n      try {\n        const payload = await env.fetcher(\n          searchApi,\n          createObject(data, {term}),\n          {\n            cancelExecutor\n          }\n        );\n\n        if (!payload.ok) {\n          throw new Error(__(payload.msg || 'networkError'));\n        }\n\n        const result =\n          payload.data.options || payload.data.items || payload.data;\n        if (!Array.isArray(result)) {\n          throw new Error(__('CRUD.invalidArray'));\n        }\n\n        return result.map(item => {\n          let resolved: any = null;\n          const value = item[valueField || 'value'];\n\n          // 只有 value 值有意义的时候，再去找；否则直接返回\n          if (Array.isArray(options) && value !== null && value !== undefined) {\n            resolved = find(options, optionValueCompare(value, valueField));\n          }\n\n          return resolved || item;\n        });\n      } catch (e) {\n        if (!env.isCancel(e)) {\n          env.notify('error', e.message);\n        }\n\n        return [];\n      }\n    } else if (term) {\n      const regexp = string2regExp(term);\n\n      return filterTree(\n        options,\n        (option: Option) => {\n          return !!(\n            (Array.isArray(option.children) && option.children.length) ||\n            (option[(valueField as string) || 'value'] &&\n              (regexp.test(option[(labelField as string) || 'label']) ||\n                regexp.test(option[(valueField as string) || 'value'])))\n          );\n        },\n        0,\n        true\n      );\n    } else {\n      return options;\n    }\n  }\n\n  @autobind\n  async handleChange(value: Array<Option> | Option, optionModified?: boolean) {\n    const {\n      onChange,\n      joinValues,\n      delimiter,\n      valueField,\n      extractValue,\n      options,\n      dispatchEvent,\n      setOptions,\n      translate: __\n    } = this.props;\n    let newValue: any = value;\n    let newOptions = options.concat();\n    const UN_MATCH_RESULT = 'UN_MATCH_RESULT';\n\n    if (Array.isArray(value)) {\n      newValue = value.map(item => {\n        const indexes = findTreeIndex(\n          options,\n          optionValueCompare(\n            item[(valueField as string) || 'value'],\n            (valueField as string) || 'value'\n          )\n        );\n\n        // 这里主要是把查询出来的没有匹配的搜索的结果（一般是DEFFER时）聚合在一个分类下\n        if (!indexes) {\n          const searchIndexes = findTreeIndex(\n            newOptions,\n            item => item.value === UN_MATCH_RESULT\n          );\n          if (!searchIndexes) {\n            newOptions.push({\n              label: __('searchResult'),\n              value: UN_MATCH_RESULT,\n              visible: false,\n              children: [item]\n            });\n          } else {\n            const origin = getTree(newOptions, searchIndexes);\n            if (origin?.children) {\n              origin.children.push(item);\n              newOptions = spliceTree(newOptions, searchIndexes, 1, {\n                ...origin,\n                ...item\n              });\n            }\n          }\n        } else if (optionModified) {\n          const origin = getTree(newOptions, indexes);\n          newOptions = spliceTree(newOptions, indexes, 1, {\n            ...origin,\n            ...item\n          });\n        }\n\n        return joinValues || extractValue\n          ? item[(valueField as string) || 'value']\n          : item;\n      });\n\n      if (joinValues) {\n        newValue = newValue.join(delimiter || ',');\n      }\n    } else if (value) {\n      newValue =\n        joinValues || extractValue\n          ? value[(valueField as string) || 'value']\n          : value;\n    }\n\n    (newOptions.length > options.length || optionModified) &&\n      setOptions(newOptions, true);\n\n    // 触发渲染器事件\n    const rendererEvent = await dispatchEvent('change', {\n      value: newValue,\n      options\n    });\n    if (rendererEvent?.prevented) {\n      return;\n    }\n\n    onChange(newValue);\n  }\n}\n\n@OptionsControl({\n  type: 'tabs-transfer'\n})\nexport class TabsTransferRenderer extends BaseTabsTransferRenderer<TabsTransferProps> {\n  @autobind\n  optionItemRender(option: any, states: ItemRenderStates) {\n    const {menuTpl, render, data} = this.props;\n    const ctx = arguments[2] || {};\n\n    if (menuTpl) {\n      return render(`item/${states.index}`, menuTpl, {\n        data: createObject(\n          createObject(data, {\n            ...states,\n            ...ctx\n          }),\n          option\n        )\n      });\n    }\n\n    return BaseSelection.itemRender(option, states);\n  }\n\n  // 动作\n  doAction(action: Action, args: any) {\n    const {resetValue, onChange} = this.props;\n    const activeKey = args?.activeKey as number;\n    switch (action.actionType) {\n      case 'clear':\n        onChange?.('');\n        break;\n      case 'reset':\n        onChange?.(resetValue ?? '');\n        break;\n      case 'changeTabKey':\n        this.setState({\n          activeKey\n        });\n        break;\n    }\n  }\n\n  render() {\n    const {\n      className,\n      classnames: cx,\n      options,\n      selectedOptions,\n      sortable,\n      loading,\n      searchResultMode,\n      showArrow,\n      deferLoad,\n      leftDeferLoad,\n      disabled,\n      selectTitle,\n      resultTitle\n    } = this.props;\n\n    return (\n      <div className={cx('TabsTransferControl', className)}>\n        <TabsTransfer\n          activeKey={this.state.activeKey}\n          value={selectedOptions}\n          disabled={disabled}\n          options={options}\n          onChange={this.handleChange}\n          option2value={this.option2value}\n          sortable={sortable}\n          searchResultMode={searchResultMode}\n          onSearch={this.handleTabSearch}\n          showArrow={showArrow}\n          onDeferLoad={deferLoad}\n          onLeftDeferLoad={leftDeferLoad}\n          selectTitle={selectTitle}\n          resultTitle={resultTitle}\n          optionItemRender={this.optionItemRender}\n          resultItemRender={this.resultItemRender}\n          onTabChange={this.onTabChange}\n        />\n\n        <Spinner overlay key=\"info\" show={loading} />\n      </div>\n    );\n  }\n}\n"
    ]
}