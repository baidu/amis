{
    "version": 3,
    "file": "Checkbox.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/Checkbox.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,6DAA0B;AAC1B,+BAAmE;AACnE,uEAA4B;AAC5B,oFAAiD;AACjD,gDAA8D;AAC9D,6CAA0D;AA4C1D;IAA6C,gDAG5C;IAHD;;IAuEA,CAAC;IA9DC,kCAAQ,GAAR,UAAS,MAAc,EAAE,IAAY,EAAE,WAAoB;QACnD,IAAA,KAAyB,IAAI,CAAC,KAAK,EAAlC,UAAU,gBAAA,EAAE,QAAQ,cAAc,CAAC;QAC1C,IAAM,UAAU,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAoB,CAAC;QAEhD,IAAI,UAAU,KAAK,OAAO,EAAE;YAC1B,QAAQ,CAAC,EAAE,CAAC,CAAC;SACd;aAAM,IAAI,UAAU,KAAK,OAAO,EAAE;YACjC,QAAQ,CAAC,UAAU,aAAV,UAAU,cAAV,UAAU,GAAI,EAAE,CAAC,CAAC;SAC5B;IACH,CAAC;IAGK,6CAAmB,GAAzB,UAA0B,SAAmB;QAAnB,0BAAA,EAAA,cAAmB;;;;;;wBACrC,KAAkC,IAAI,CAAC,KAAK,EAA3C,aAAa,mBAAA,EAAE,IAAI,UAAA,EAAE,QAAQ,cAAA,CAAe;wBAC7B,qBAAM,aAAa,CACvC,QAAQ,EACR,IAAA,qBAAY,EAAC,IAAI,EAAE;gCACjB,KAAK,EAAE,SAAS;6BACjB,CAAC,CACH,EAAA;;wBALK,aAAa,GAAG,SAKrB;wBAED,IAAI,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,SAAS,EAAE;4BAC5B,sBAAO;yBACR;wBAED,QAAQ,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC;;;;;KACjC;IAED,gCAAM,GAAN;QAAA,iBAiCC;QAhCO,IAAA,KAaF,IAAI,CAAC,KAAK,EAZZ,SAAS,eAAA,EACT,KAAK,WAAA,EACL,SAAS,eAAA,EACT,UAAU,gBAAA,EACV,MAAM,YAAA,EACN,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,MAAM,YAAA,EACN,OAAO,aAAA,EACP,UAAU,gBAAA,EACV,OAAO,aAAA,EACM,EAAE,iBACH,CAAC;QAEf,OAAO,CACL,uCAAK,SAAS,EAAE,IAAA,oBAAE,EAAC,UAAG,EAAE,oBAAiB,EAAE,SAAS,CAAC;YACnD,8BAAC,kBAAQ,IACP,MAAM,QACN,KAAK,EAAE,KAAK,IAAI,EAAE,EAClB,SAAS,EAAE,SAAS,EACpB,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,UAAC,KAAU,IAAK,OAAA,KAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAA/B,CAA+B,EACzD,OAAO,EAAE,OAAO,EAChB,UAAU,EAAE,UAAU,EACtB,OAAO,EAAE,OAAO,IAEf,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAChC,CACP,CACP,CAAC;IACJ,CAAC;IAlEM,4BAAY,GAA2B;QAC5C,SAAS,EAAE,IAAI;QACf,UAAU,EAAE,KAAK;KAClB,CAAC;IAcF;QADC,iBAAQ;;;;8DAeR;IAoCH,sBAAC;CAAA,AAvED,CAA6C,eAAK,CAAC,SAAS,GAuE3D;kBAvEoB,eAAe;AAyEpC,aAAa;AAMb;IAA6C,wDAAe;IAA5D;;IAA8D,CAAC;IAAlD,uBAAuB;QALnC,iBAAS;QACT,IAAA,eAAQ,EAAC;YACR,IAAI,EAAE,UAAU;YAChB,WAAW,EAAE,KAAK;SACnB,CAAC;OACW,uBAAuB,CAA2B;IAAD,8BAAC;CAAA,AAA/D,CAA6C,eAAe,GAAG;AAAlD,0DAAuB",
    "sourcesContent": [
        "import React from 'react';\nimport {FormItem, FormControlProps, FormBaseControl} from './Item';\nimport cx from 'classnames';\nimport Checkbox from '../../components/Checkbox';\nimport {withBadge, BadgeSchema} from '../../components/Badge';\nimport {autobind, createObject} from '../../utils/helper';\nimport {Action} from '../../types';\n\n/**\n * Checkbox 勾选框。\n * 文档：https://baidu.gitee.io/amis/docs/components/form/checkbox\n */\nexport interface CheckboxControlSchema extends FormBaseControl {\n  /**\n   * 指定为多行文本输入框\n   */\n  type: 'checkbox';\n\n  /**\n   * 勾选值\n   */\n  trueValue?: boolean | string | number;\n\n  /**\n   * 未勾选值\n   */\n  falseValue?: boolean | string | number;\n\n  /**\n   * 选项说明\n   */\n  option?: string;\n\n  /**\n   * 角标\n   */\n  badge?: BadgeSchema;\n  partial?: boolean;\n  optionType?: 'default' | 'button';\n  checked?: boolean;\n}\n\nexport interface CheckboxProps\n  extends FormControlProps,\n    Omit<\n      CheckboxControlSchema,\n      'type' | 'className' | 'descriptionClassName' | 'inputClassName'\n    > {}\n\nexport default class CheckboxControl extends React.Component<\n  CheckboxProps,\n  any\n> {\n  static defaultProps: Partial<CheckboxProps> = {\n    trueValue: true,\n    falseValue: false\n  };\n\n  doAction(action: Action, data: object, throwErrors: boolean) {\n    const {resetValue, onChange} = this.props;\n    const actionType = action?.actionType as string;\n\n    if (actionType === 'clear') {\n      onChange('');\n    } else if (actionType === 'reset') {\n      onChange(resetValue ?? '');\n    }\n  }\n\n  @autobind\n  async dispatchChangeEvent(eventData: any = {}) {\n    const {dispatchEvent, data, onChange} = this.props;\n    const rendererEvent = await dispatchEvent(\n      'change',\n      createObject(data, {\n        value: eventData\n      })\n    );\n\n    if (rendererEvent?.prevented) {\n      return;\n    }\n\n    onChange && onChange(eventData);\n  }\n\n  render() {\n    const {\n      className,\n      value,\n      trueValue,\n      falseValue,\n      option,\n      onChange,\n      disabled,\n      render,\n      partial,\n      optionType,\n      checked,\n      classPrefix: ns\n    } = this.props;\n\n    return (\n      <div className={cx(`${ns}CheckboxControl`, className)}>\n        <Checkbox\n          inline\n          value={value || ''}\n          trueValue={trueValue}\n          falseValue={falseValue}\n          disabled={disabled}\n          onChange={(value: any) => this.dispatchChangeEvent(value)}\n          partial={partial}\n          optionType={optionType}\n          checked={checked}\n        >\n          {option ? render('option', option) : null}\n        </Checkbox>\n      </div>\n    );\n  }\n}\n\n// @ts-ignore\n@withBadge\n@FormItem({\n  type: 'checkbox',\n  sizeMutable: false\n})\nexport class CheckboxControlRenderer extends CheckboxControl {}\n"
    ]
}