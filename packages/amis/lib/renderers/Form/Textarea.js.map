{
    "version": 3,
    "file": "Textarea.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/Textarea.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,6DAA0B;AAC1B,+BAAmE;AAEnE,oFAAiD;AAGjD,6CAAqD;AAErD,uDAA2D;AAoE3D;IAA6C,gDAG5C;IAHD;QAAA,qEAuEC;QA3DC,cAAQ,GAAG,eAAK,CAAC,SAAS,EAAO,CAAC;;IA2DpC,CAAC;IAzDC,kCAAQ,GAAR,UAAS,MAAsB,EAAE,IAAS;QACxC,IAAM,UAAU,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAoB,CAAC;QAChD,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QAErC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YAC7C,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;aAAM,IAAI,UAAU,KAAK,OAAO,EAAE;YACjC,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;IACH,CAAC;IAED,+BAAK,GAAL;;QACE,MAAA,IAAI,CAAC,QAAQ,CAAC,OAAO,0CAAE,KAAK,EAAE,CAAC;IACjC,CAAC;IAID,qCAAW,GAAX,UAAY,CAAwC;QAC3C,IAAA,OAAO,GAAI,IAAI,CAAC,KAAK,QAAd,CAAe;QAE7B,IAAI,CAAC,QAAQ,CACX;YACE,OAAO,EAAE,IAAI;SACd,EACD;YACE,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC,CACF,CAAC;IACJ,CAAC;IAID,oCAAU,GAAV,UAAW,CAAwC;QAC3C,IAAA,KAA0C,IAAI,CAAC,KAAK,EAAnD,MAAM,YAAA,EAAE,YAAY,kBAAA,EAAE,KAAK,WAAA,EAAE,QAAQ,cAAc,CAAC;QAE3D,IAAI,CAAC,QAAQ,CACX;YACE,OAAO,EAAE,KAAK;SACf,EACD;YACE,IAAI,YAAY,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBACtD,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;aACxB;YAED,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;QACtB,CAAC,CACF,CAAC;IACJ,CAAC;IAED,gCAAM,GAAN;QACE,IAAU,IAAI,uBAAI,IAAI,CAAC,KAAK,EAAtB,EAAS,CAAa,CAAC;QAE7B,OAAO,CACL,8BAAC,kBAAQ,4BAAK,IAAI,IAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,IAAI,CAC3E,CAAC;IACJ,CAAC;;IAlEM,4BAAY,GAA2B;QAC5C,OAAO,EAAE,CAAC;QACV,OAAO,EAAE,EAAE;QACX,YAAY,EAAE,IAAI;QAClB,UAAU,EAAE,EAAE;QACd,SAAS,EAAE,KAAK;KACjB,CAAC;IAsBF;QAFC,iBAAQ;QACR,IAAA,8BAAiB,EAAuC,OAAO,CAAC;;0EAClD,eAAK,oBAAL,eAAK,CAAC,UAAU;;sDAW9B;IAID;QAFC,iBAAQ;QACR,IAAA,8BAAiB,EAAuC,MAAM,CAAC;;0EAClD,eAAK,oBAAL,eAAK,CAAC,UAAU;;qDAe7B;IASH,sBAAC;CAAA,AAvED,CAA6C,eAAK,CAAC,SAAS,GAuE3D;kBAvEoB,eAAe;AA4EpC;IAA6C,wDAAe;IAA5D;;IAA8D,CAAC;IAAlD,uBAAuB;QAHnC,IAAA,eAAQ,EAAC;YACR,IAAI,EAAE,UAAU;SACjB,CAAC;OACW,uBAAuB,CAA2B;IAAD,8BAAC;CAAA,AAA/D,CAA6C,eAAe,GAAG;AAAlD,0DAAuB",
    "sourcesContent": [
        "import React from 'react';\nimport {FormItem, FormControlProps, FormBaseControl} from './Item';\nimport cx from 'classnames';\nimport Textarea from '../../components/Textarea';\nimport {Icon} from '../../components/icons';\nimport {findDOMNode} from 'react-dom';\nimport {autobind, ucFirst} from '../../utils/helper';\n\nimport {bindRendererEvent} from '../../actions/Decorators';\nimport type {ListenerAction} from '../../actions/Action';\n\n/**\n * TextArea 多行文本输入框。\n * 文档：https://baidu.gitee.io/amis/docs/components/form/textarea\n */\nexport interface TextareaControlSchema extends FormBaseControl {\n  /**\n   * 指定为多行文本输入框\n   */\n  type: 'textarea';\n\n  /**\n   * 最大行数\n   */\n  maxRows?: number;\n\n  /**\n   * 最小行数\n   */\n  minRows?: number;\n\n  /**\n   * 是否只读\n   */\n  readOnly?: boolean;\n\n  /**\n   * 边框模式，全边框，还是半边框，或者没边框。\n   */\n  borderMode?: 'full' | 'half' | 'none';\n\n  /**\n   * 限制文字个数\n   */\n  maxLength?: number;\n\n  /**\n   * 是否显示计数\n   */\n  showCounter?: boolean;\n\n  /**\n   * 输入内容是否可清除\n   */\n  clearable?: boolean;\n\n  /**\n   * 重置值\n   */\n  resetValue?: string;\n}\n\nexport type TextAreaRendererEvent = 'blur' | 'focus';\n\nexport interface TextAreaProps extends FormControlProps {\n  placeholder?: string;\n  minRows?: number;\n  maxRows?: number;\n  clearable?: boolean;\n  resetValue?: string;\n}\n\nexport interface TextAreaState {\n  focused: boolean;\n}\n\nexport default class TextAreaControl extends React.Component<\n  TextAreaProps,\n  TextAreaState\n> {\n  static defaultProps: Partial<TextAreaProps> = {\n    minRows: 3,\n    maxRows: 20,\n    trimContents: true,\n    resetValue: '',\n    clearable: false\n  };\n\n  inputRef = React.createRef<any>();\n\n  doAction(action: ListenerAction, args: any) {\n    const actionType = action?.actionType as string;\n    const onChange = this.props.onChange;\n\n    if (!!~['clear', 'reset'].indexOf(actionType)) {\n      onChange?.(this.props.resetValue);\n      this.focus();\n    } else if (actionType === 'focus') {\n      this.focus();\n    }\n  }\n\n  focus() {\n    this.inputRef.current?.focus();\n  }\n\n  @autobind\n  @bindRendererEvent<TextAreaProps, TextAreaRendererEvent>('focus')\n  handleFocus(e: React.FocusEvent<HTMLTextAreaElement>) {\n    const {onFocus} = this.props;\n\n    this.setState(\n      {\n        focused: true\n      },\n      () => {\n        onFocus && onFocus(e);\n      }\n    );\n  }\n\n  @autobind\n  @bindRendererEvent<TextAreaProps, TextAreaRendererEvent>('blur')\n  handleBlur(e: React.FocusEvent<HTMLTextAreaElement>) {\n    const {onBlur, trimContents, value, onChange} = this.props;\n\n    this.setState(\n      {\n        focused: false\n      },\n      () => {\n        if (trimContents && value && typeof value === 'string') {\n          onChange(value.trim());\n        }\n\n        onBlur && onBlur(e);\n      }\n    );\n  }\n\n  render() {\n    const {...rest} = this.props;\n\n    return (\n      <Textarea {...rest} onFocus={this.handleFocus} onBlur={this.handleBlur} />\n    );\n  }\n}\n\n@FormItem({\n  type: 'textarea'\n})\nexport class TextAreaControlRenderer extends TextAreaControl {}\n"
    ]
}