{
    "version": 3,
    "file": "InputFormula.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/InputFormula.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,6DAA0B;AAE1B,6DAAmE;AACnE,wFAA4D;AAC5D,6CAA4C;AAI5C,uDAGiC;AA+GjC;IAA0C,qDAAkC;IAA5E;;IAwGA,CAAC;IA3FC,yCAAU,GAAV,UAAW,GAAQ;QACjB,IAAI,GAAG,EAAE;YACP,OAAO,GAAG,IAAI,GAAG,CAAC,kBAAkB,EAAE;gBACpC,GAAG,GAAG,GAAG,CAAC,kBAAkB,EAAE,CAAC;aAChC;YACD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;SAChB;aAAM;YACL,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;SACtB;IACH,CAAC;IAED,uCAAQ,GAAR;;QACQ,IAAA,KAAyB,IAAI,CAAC,KAAK,EAAvB,EAAE,eAAA,EAAE,KAAK,WAAc,CAAC;QAE1C,IAAI,MAAA,IAAI,CAAC,GAAG,0CAAE,QAAQ,EAAE;YACtB,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrC,IAAI,GAAG,KAAK,IAAI,EAAE;gBAChB,OAAO,EAAE,CAAC,2BAA2B,EAAE,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;aACpD;SACF;IACH,CAAC;IAED,qCAAM,GAAN;QACM,IAAA,KA0BA,IAAI,CAAC,KAAK,EAzBZ,eAAe,qBAAA,EACf,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,YAAY,kBAAA,EACZ,MAAM,YAAA,EACN,KAAK,WAAA,EACL,KAAK,WAAA,EACL,SAAS,eAAA,EACT,SAAS,eAAA,EACI,EAAE,iBAAA,EACH,EAAE,gBAAA,EACd,kBAAiB,EAAjB,UAAU,mBAAG,IAAI,KAAA,EACjB,UAAU,gBAAA,EACV,WAAW,iBAAA,EACX,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,KAAK,WAAA,EACL,OAAO,aAAA,EACP,IAAI,UAAA,EACJ,KAAK,WAAA,EACL,iBAAiB,uBAAA,EACjB,iBAAiB,uBAAA,EACjB,IAAI,UAAA,EACJ,YAAY,kBACA,CAAC;QACX,IAAA,KAAyB,IAAI,CAAC,KAAK,EAAlC,SAAS,eAAA,EAAE,SAAS,eAAc,CAAC;QAExC,IAAI,IAAA,4BAAc,EAAC,SAAS,CAAC,EAAE;YAC7B,uCAAuC;YACvC,SAAS,GAAG,IAAA,sCAAwB,EAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SAC3E;QAED,IAAI,IAAA,4BAAc,EAAC,SAAS,CAAC,EAAE;YAC7B,uCAAuC;YACvC,SAAS,GAAG,IAAA,sCAAwB,EAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SAC3E;QAED,OAAO,CACL,8BAAC,gBAAa,IACZ,GAAG,EAAE,IAAI,CAAC,UAAU,EACpB,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,QAAQ,EAClB,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,EACpB,YAAY,EAAE,YAAY,EAC1B,SAAS,EAAE,SAAS,EACpB,MAAM,EAAE,MAAM,IAAI,KAAK,IAAI,EAAE,EAC7B,UAAU,EAAE,UAAU,EACtB,WAAW,EAAE,WAAW,EACxB,IAAI,EAAE,SAAS,EACf,QAAQ,EAAE,QAAQ,EAClB,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,OAAO,EAChB,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,KAAK,EACZ,SAAS,EAAE,SAAS,EACpB,iBAAiB,EAAE,iBAAiB,EACpC,iBAAiB,EAAE,iBAAiB,EACpC,IAAI,EAAE,IAAI,EACV,YAAY,EAAE,YAAY,GAC1B,CACH,CAAC;IACJ,CAAC;IAtGM,iCAAY,GAGf;QACF,SAAS,EAAE,cAAc;QACzB,UAAU,EAAE,MAAM;QAClB,QAAQ,EAAE,IAAI;KACd,CAAA;IAKF;QADC,iBAAQ;;;;0DAUR;IAtBU,oBAAoB;QAHhC,IAAA,cAAQ,EAAC;YACR,IAAI,EAAE,eAAe;SACtB,CAAC;OACW,oBAAoB,CAwGhC;IAAD,2BAAC;CAAA,AAxGD,CAA0C,eAAK,CAAC,SAAS,GAwGxD;AAxGY,oDAAoB",
    "sourcesContent": [
        "import React from 'react';\nimport {parse, Evaluator} from 'amis-formula';\nimport FormItem, {FormBaseControl, FormControlProps} from './Item';\nimport FormulaPicker from '../../components/formula/Picker';\nimport {autobind} from '../../utils/helper';\n\nimport type {FuncGroup, VariableItem} from '../../components/formula/Editor';\nimport type {SchemaIcon} from '../../Schema';\nimport {\n  isPureVariable,\n  resolveVariableAndFilter\n} from '../../utils/tpl-builtin';\n\n/**\n * InputFormula 公式编辑器\n * 文档：https://baidu.gitee.io/amis/zh-CN/components/form/input-formula\n */\nexport interface InputFormulaControlSchema extends FormBaseControl {\n  type: 'input-formula';\n\n  /**\n   * evalMode 即直接就是表达式，否则\n   * 需要 ${这里面才是表达式}\n   * 默认为 true\n   */\n  evalMode?: boolean;\n\n  /**\n   * 用于提示的变量集合，默认为空\n   */\n  variables: Array<VariableItem>;\n\n  /**\n   * 变量展现模式，可选值：'tabs' ｜ 'tree'\n   */\n  variableMode?: 'tabs' | 'tree';\n\n  /**\n   * 函数集合，默认不需要传，即  amis-formula 里面那个函数\n   * 如果有扩充，则需要传。\n   */\n  functions: Array<FuncGroup>;\n\n  /**\n   * 编辑器标题\n   */\n  title?: string;\n\n  /**\n   * 顶部标题，默认为表达式\n   */\n  header: string;\n\n  /**\n   * 控件模式\n   */\n  inputMode?: 'button' | 'input-button';\n\n  /**\n   * 外层input是否允许输入，否需要点击fx在弹窗中输入\n   */\n  allowInput?: boolean;\n\n  /**\n   * 按钮图标\n   */\n  icon?: SchemaIcon;\n\n  /**\n   * 按钮Label，inputMode为button时生效\n   */\n  btnLabel?: string;\n\n  /**\n   * 按钮样式\n   */\n  level?:\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'danger'\n    | 'link'\n    | 'primary'\n    | 'dark'\n    | 'light';\n\n  /**\n   * 按钮大小\n   */\n  btnSize?: 'xs' | 'sm' | 'md' | 'lg';\n\n  /**\n   * 边框模式，全边框，还是半边框，或者没边框。\n   */\n  borderMode?: 'full' | 'half' | 'none';\n\n  /**\n   * 输入框占位符\n   */\n  placeholder?: string;\n\n  /**\n   * 变量面板CSS样式类名\n   */\n  variableClassName?: string;\n\n  /**\n   * 函数面板CSS样式类名\n   */\n  functionClassName?: string;\n}\n\nexport interface InputFormulaProps\n  extends FormControlProps,\n    Omit<\n      InputFormulaControlSchema,\n      'options' | 'inputClassName' | 'className' | 'descriptionClassName'\n    > {}\n\n@FormItem({\n  type: 'input-formula'\n})\nexport class InputFormulaRenderer extends React.Component<InputFormulaProps> {\n  static defaultProps: Pick<\n    InputFormulaControlSchema,\n    'inputMode' | 'borderMode' | 'evalMode'\n  > = {\n    inputMode: 'input-button',\n    borderMode: 'full',\n    evalMode: true\n  };\n\n  ref: any;\n\n  @autobind\n  formulaRef(ref: any) {\n    if (ref) {\n      while (ref && ref.getWrappedInstance) {\n        ref = ref.getWrappedInstance();\n      }\n      this.ref = ref;\n    } else {\n      this.ref = undefined;\n    }\n  }\n\n  validate() {\n    const {translate: __, value} = this.props;\n\n    if (this.ref?.validate) {\n      const res = this.ref.validate(value);\n      if (res !== true) {\n        return __('FormulaEditor.invalidData', {err: res});\n      }\n    }\n  }\n\n  render() {\n    let {\n      selectedOptions,\n      disabled,\n      onChange,\n      evalMode,\n      variableMode,\n      header,\n      label,\n      value,\n      clearable,\n      className,\n      classPrefix: ns,\n      classnames: cx,\n      allowInput = true,\n      borderMode,\n      placeholder,\n      inputMode,\n      btnLabel,\n      level,\n      btnSize,\n      icon,\n      title,\n      variableClassName,\n      functionClassName,\n      data,\n      onPickerOpen\n    } = this.props;\n    let {variables, functions} = this.props;\n\n    if (isPureVariable(variables)) {\n      // 如果 variables 是 ${xxx} 这种形式，将其处理成实际的值\n      variables = resolveVariableAndFilter(variables, this.props.data, '| raw');\n    }\n\n    if (isPureVariable(functions)) {\n      // 如果 functions 是 ${xxx} 这种形式，将其处理成实际的值\n      functions = resolveVariableAndFilter(functions, this.props.data, '| raw');\n    }\n\n    return (\n      <FormulaPicker\n        ref={this.formulaRef}\n        className={className}\n        value={value}\n        disabled={disabled}\n        allowInput={allowInput}\n        onChange={onChange}\n        evalMode={evalMode}\n        variables={variables}\n        variableMode={variableMode}\n        functions={functions}\n        header={header || label || ''}\n        borderMode={borderMode}\n        placeholder={placeholder}\n        mode={inputMode}\n        btnLabel={btnLabel}\n        level={level}\n        btnSize={btnSize}\n        icon={icon}\n        title={title}\n        clearable={clearable}\n        variableClassName={variableClassName}\n        functionClassName={functionClassName}\n        data={data}\n        onPickerOpen={onPickerOpen}\n      />\n    );\n  }\n}\n"
    ]
}