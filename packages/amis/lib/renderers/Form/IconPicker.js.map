{
    "version": 3,
    "file": "IconPicker.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/IconPicker.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport cx from 'classnames';\nimport {matchSorter} from 'match-sorter';\nimport keycode from 'keycode';\nimport Downshift, {StateChangeOptions} from 'downshift';\nimport {autobind} from '../../utils/helper';\nimport {ICONS} from './IconPickerIcons';\nimport {FormItem, FormControlProps, FormBaseControl} from './Item';\nimport {Option} from '../../components/Select';\nimport {Icon} from '../../components/icons';\n\n/**\n * 图标选择器\n * 文档：https://baidu.gitee.io/amis/docs/components/form/icon-picker\n */\nexport interface IconPickerControlSchema extends FormBaseControl {\n  type: 'icon-picker';\n\n  // 这就不应该成为一个 amis 控件。。。\n}\n\nexport interface IconPickerProps extends FormControlProps {\n  placeholder?: string;\n  resetValue?: any;\n  noDataTip?: string;\n  clearable?: boolean;\n}\n\nexport interface IconPickerState {\n  isOpen?: boolean;\n  inputValue?: string;\n  isFocused?: boolean;\n  vendorIndex?: number;\n}\n\nexport default class IconPickerControl extends React.PureComponent<\n  IconPickerProps,\n  IconPickerState\n> {\n  input?: HTMLInputElement;\n\n  state: IconPickerState = {\n    isOpen: false,\n    inputValue: '',\n    isFocused: false,\n    vendorIndex: 0\n  };\n\n  static defaultProps: Pick<\n    IconPickerProps,\n    'resetValue' | 'placeholder' | 'noDataTip'\n  > = {\n    resetValue: '',\n    placeholder: '',\n    noDataTip: 'placeholder.noData'\n  };\n\n  componentDidUpdate(prevProps: IconPickerProps) {\n    const props = this.props;\n\n    if (prevProps.value !== props.value) {\n      this.setState({\n        inputValue: ''\n      });\n    }\n  }\n\n  @autobind\n  changeVendor(index: number) {\n    this.setState(\n      {\n        vendorIndex: index\n      },\n      this.formatOptions\n    );\n  }\n\n  @autobind\n  formatOptions() {\n    let vendorIndex = this.state.vendorIndex || 0;\n    let {prefix, icons} = ICONS[vendorIndex];\n    return icons.map((icon: string) => ({\n      label: prefix + icon,\n      value: prefix + icon\n    }));\n  }\n\n  @autobind\n  getVendors() {\n    return ICONS.map(icons => icons.name);\n  }\n\n  @autobind\n  inputRef(ref: any) {\n    this.input = ref;\n  }\n\n  @autobind\n  focus() {\n    if (!this.input) {\n      return;\n    }\n\n    this.input.focus();\n\n    const len = this.input.value.length;\n    len && this.input.setSelectionRange(len, len);\n  }\n\n  @autobind\n  handleClick() {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.focus();\n    this.setState({\n      isOpen: true\n    });\n  }\n\n  @autobind\n  handleFocus(e: any) {\n    this.setState({\n      isOpen: true,\n      isFocused: true\n    });\n\n    this.props.onFocus && this.props.onFocus(e);\n  }\n\n  @autobind\n  handleBlur(e: any) {\n    const {onBlur, trimContents, value, onChange} = this.props;\n\n    this.setState(\n      {\n        isFocused: false\n      },\n      () => {\n        if (trimContents && value && typeof value === 'string') {\n          onChange(value.trim());\n        }\n      }\n    );\n\n    onBlur && onBlur(e);\n  }\n\n  @autobind\n  handleInputChange(evt: React.ChangeEvent<HTMLInputElement>) {\n    let value = evt.currentTarget.value;\n\n    this.setState({\n      inputValue: value\n    });\n  }\n\n  @autobind\n  handleKeyDown(evt: React.KeyboardEvent<HTMLInputElement>) {\n    const code = keycode(evt.keyCode);\n    if (code !== 'backspace') {\n      return;\n    }\n\n    const {onChange} = this.props;\n\n    if (!this.state.inputValue) {\n      onChange('');\n      this.setState({\n        inputValue: ''\n      });\n    }\n  }\n\n  @autobind\n  handleChange(value: any) {\n    const {onChange, disabled} = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    onChange(value);\n    this.setState({\n      isFocused: false,\n      inputValue: ''\n    });\n  }\n\n  @autobind\n  handleStateChange(changes: StateChangeOptions<any>) {\n    switch (changes.type) {\n      case Downshift.stateChangeTypes.itemMouseEnter:\n      case Downshift.stateChangeTypes.changeInput:\n        this.setState({\n          isOpen: true\n        });\n        break;\n      default:\n        const state: IconPickerState = {};\n        if (typeof changes.isOpen !== 'undefined') {\n          state.isOpen = changes.isOpen;\n        }\n\n        if (this.state.isOpen && changes.isOpen === false) {\n          state.inputValue = '';\n        }\n\n        this.setState(state);\n        break;\n    }\n  }\n\n  @autobind\n  handleClear() {\n    const {onChange, resetValue} = this.props;\n\n    onChange?.(resetValue);\n\n    this.setState(\n      {\n        inputValue: resetValue,\n        isFocused: true\n      },\n      () => {\n        this.focus();\n      }\n    );\n  }\n\n  renderFontIcons() {\n    const {\n      className,\n      inputOnly,\n      placeholder,\n      classnames: cx,\n      name,\n      value,\n      noDataTip,\n      disabled,\n      clearable,\n      translate: __\n    } = this.props;\n    const options = this.formatOptions();\n    const vendors = this.getVendors();\n\n    return (\n      <Downshift\n        isOpen={this.state.isOpen}\n        inputValue={this.state.inputValue}\n        onChange={this.handleChange}\n        onOuterClick={this.handleBlur}\n        onStateChange={this.handleStateChange}\n        selectedItem={[value]}\n      >\n        {({getInputProps, getItemProps, isOpen, inputValue}) => {\n          let filteredOptions =\n            inputValue && isOpen\n              ? matchSorter(options, inputValue, {keys: ['label', 'value']})\n              : options;\n\n          return (\n            <div\n              className={cx(\n                `IconPickerControl-input IconPickerControl-input--withAC`,\n                inputOnly ? className : '',\n                {\n                  'is-opened': isOpen\n                }\n              )}\n              onClick={this.handleClick}\n            >\n              <div className={cx('IconPickerControl-valueWrap')}>\n                {placeholder && !value && !this.state.inputValue ? (\n                  <div className={cx('IconPickerControl-placeholder')}>\n                    {placeholder}\n                  </div>\n                ) : null}\n\n                {!value || (inputValue && isOpen) ? null : (\n                  <div className={cx('IconPickerControl-value')}>\n                    <i className={cx(value)} />\n                    {value}\n                  </div>\n                )}\n\n                <input\n                  {...getInputProps({\n                    name,\n                    ref: this.inputRef,\n                    onFocus: this.handleFocus,\n                    onChange: this.handleInputChange,\n                    onKeyDown: this.handleKeyDown,\n                    value: this.state.inputValue\n                  })}\n                  autoComplete=\"off\"\n                  disabled={disabled}\n                  size={10}\n                />\n\n                {clearable && !disabled && value ? (\n                  <a\n                    onClick={this.handleClear}\n                    className={cx('IconPickerControl-clear')}\n                  >\n                    <Icon icon=\"input-clear\" className=\"icon\" />\n                  </a>\n                ) : null}\n              </div>\n              {isOpen ? (\n                <div className={cx('IconPickerControl-sugsPanel')}>\n                  {vendors.length > 1 ? (\n                    <div className={cx('IconPickerControl-tabs')}>\n                      {vendors.map((vendor: string, index: number) => (\n                        <div\n                          className={cx('IconPickerControl-tab', {\n                            active: this.state.vendorIndex === index\n                          })}\n                          onClick={() => this.changeVendor(index)}\n                          key={index}\n                        >\n                          {vendor}\n                        </div>\n                      ))}\n                    </div>\n                  ) : null}\n\n                  {filteredOptions.length ? (\n                    <div\n                      className={cx(\n                        'IconPickerControl-sugs',\n                        vendors.length > 1\n                          ? 'IconPickerControl-multiVendor'\n                          : 'IconPickerControl-singleVendor'\n                      )}\n                    >\n                      {filteredOptions.map((option: Option, index: number) => (\n                        <div\n                          {...getItemProps({\n                            item: option.value,\n                            className: cx(`IconPickerControl-sugItem`, {\n                              'is-active': value === option.value\n                            })\n                          })}\n                          key={index}\n                        >\n                          <i\n                            className={cx(`${option.value}`)}\n                            title={`${option.value}`}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div\n                      className={cx(\n                        vendors.length > 1\n                          ? 'IconPickerControl-multiVendor'\n                          : 'IconPickerControl-singleVendor'\n                      )}\n                    >\n                      {__(noDataTip)}\n                    </div>\n                  )}\n                </div>\n              ) : null}\n            </div>\n          );\n        }}\n      </Downshift>\n    );\n  }\n\n  render(): JSX.Element {\n    const {className, classPrefix: ns, inputOnly, disabled} = this.props;\n\n    let input = this.renderFontIcons();\n\n    if (inputOnly) {\n      return input;\n    }\n\n    return (\n      <div\n        className={cx(className, `${ns}IconPickerControl`, {\n          'is-focused': this.state.isFocused,\n          'is-disabled': disabled\n        })}\n      >\n        {input}\n      </div>\n    );\n  }\n}\n\n@FormItem({\n  type: 'icon-picker'\n})\nexport class IconPickerControlRenderer extends IconPickerControl {}\n"
    ]
}