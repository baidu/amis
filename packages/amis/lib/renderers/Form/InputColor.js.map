{
    "version": 3,
    "file": "InputColor.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/InputColor.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,0DAAsC;AACtC,uEAA4B;AAE5B,+BAAmE;AAEnE,6CAA4C;AAE/B,QAAA,WAAW,GAAG,eAAK,CAAC,IAAI,CACnC,cAAM,qFAAO,8BAA8B,QAArC,CAAsC,CAC7C,CAAC;AAiDF;IAA0C,6CAGzC;IAHD;QAAA,qEA0CC;QAlCC,WAAK,GAAsB;YACzB,IAAI,EAAE,KAAK;SACZ,CAAC;;IAgCJ,CAAC;IA9BC,6BAAM,GAAN;QACE,IAAM,KAOF,IAAI,CAAC,KAAK,EANZ,SAAS,eAAA,EACI,EAAE,iBAAA,EACf,KAAK,WAAA,EACL,GAAG,SAAA,EACH,WAAW,iBAAA,EACR,IAAI,2BANH,2DAOL,CAAa,CAAC;QACf,IAAM,QAAQ,GAAG,WAAW,IAAI,IAAA,iBAAQ,GAAE,CAAC;QAC3C,OAAO,CACL,uCAAK,SAAS,EAAE,IAAA,oBAAE,EAAC,UAAG,EAAE,iBAAc,EAAE,SAAS,CAAC;YAChD,8BAAC,gBAAQ,IAAC,QAAQ,EAAE,iDAAc;gBAChC,8BAAC,mBAAW,0BACV,WAAW,EAAE,EAAE,IACX,IAAI,IACR,WAAW,EAAE,WAAW,EACxB,gBAAgB,EACd,QAAQ,IAAI,GAAG,IAAI,GAAG,CAAC,iBAAiB;wBACtC,CAAC,CAAC,GAAG,CAAC,iBAAiB;wBACvB,CAAC,CAAC,QAAQ;4BACV,CAAC,CAAC,SAAS;4BACX,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAE3B,KAAK,EAAE,KAAK,IAAI,EAAE,IAClB,CACO,CACP,CACP,CAAC;IACJ,CAAC;IArCM,yBAAY,GAAwB;QACzC,MAAM,EAAE,KAAK;QACb,SAAS,EAAE,IAAI;KAChB,CAAC;IAmCJ,mBAAC;CAAA,AA1CD,CAA0C,eAAK,CAAC,aAAa,GA0C5D;kBA1CoB,YAAY;AA+CjC;IAA0C,qDAAY;IAAtD;;IAAwD,CAAC;IAA5C,oBAAoB;QAHhC,IAAA,eAAQ,EAAC;YACR,IAAI,EAAE,aAAa;SACpB,CAAC;OACW,oBAAoB,CAAwB;IAAD,2BAAC;CAAA,AAAzD,CAA0C,YAAY,GAAG;AAA5C,oDAAoB",
    "sourcesContent": [
        "import React, {Suspense} from 'react';\nimport cx from 'classnames';\n\nimport {FormItem, FormControlProps, FormBaseControl} from './Item';\nimport type {PresetColor} from '../../components/ColorPicker';\nimport {isMobile} from '../../utils/helper';\n\nexport const ColorPicker = React.lazy(\n  () => import('../../components/ColorPicker')\n);\n\n/**\n * Color 颜色选择框\n * 文档：https://baidu.gitee.io/amis/docs/components/form/color\n */\nexport interface InputColorControlSchema extends FormBaseControl {\n  /**\n   * 指定为颜色选择框\n   */\n  type: 'input-color';\n\n  /**\n   * 是否显示清除按钮\n   */\n  clearable?: boolean;\n\n  /**\n   * 颜色格式\n   */\n  format?: 'hex' | 'rgb' | 'rgba' | 'hsl';\n\n  /**\n   * 选中颜色后是否关闭弹出层。\n   */\n  closeOnSelect?: boolean;\n\n  /**\n   * 预设颜色，用户可以直接从预设中选。\n   */\n  presetColors?: Array<PresetColor>;\n\n  /**\n   * 是否允许用户输入颜色。\n   */\n  allowCustomColor?: boolean;\n}\n\nexport interface ColorProps\n  extends FormControlProps,\n    Omit<\n      InputColorControlSchema,\n      'type' | 'className' | 'descriptionClassName' | 'inputClassName'\n    > {}\n\nexport interface ColorControlState {\n  open: boolean;\n}\n\nexport default class ColorControl extends React.PureComponent<\n  ColorProps,\n  ColorControlState\n> {\n  static defaultProps: Partial<ColorProps> = {\n    format: 'hex',\n    clearable: true\n  };\n  state: ColorControlState = {\n    open: false\n  };\n\n  render() {\n    const {\n      className,\n      classPrefix: ns,\n      value,\n      env,\n      useMobileUI,\n      ...rest\n    } = this.props;\n    const mobileUI = useMobileUI && isMobile();\n    return (\n      <div className={cx(`${ns}ColorControl`, className)}>\n        <Suspense fallback={<div>...</div>}>\n          <ColorPicker\n            classPrefix={ns}\n            {...rest}\n            useMobileUI={useMobileUI}\n            popOverContainer={\n              mobileUI && env && env.getModalContainer\n                ? env.getModalContainer\n                : mobileUI\n                ? undefined\n                : rest.popOverContainer\n            }\n            value={value || ''}\n          />\n        </Suspense>\n      </div>\n    );\n  }\n}\n\n@FormItem({\n  type: 'input-color'\n})\nexport class ColorControlRenderer extends ColorControl {}\n"
    ]
}