{
    "version": 3,
    "file": "ButtonToolbar.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/ButtonToolbar.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,6DAA0B;AAI1B,+BAAkD;AAmBlD;IAA2C,8CAG1C;IAHD;;IA8BA,CAAC;IAxBC;;;OAGG;IACH,qCAAa,GAAb;QACQ,IAAA,KAAqC,IAAI,CAAC,KAAK,EAA9C,MAAM,YAAA,EAAe,EAAE,iBAAA,EAAE,OAAO,aAAc,CAAC;QACtD,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;YAC3B,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,GAAG;gBACtB,OAAA,MAAM,CAAC,iBAAU,GAAG,CAAE,EAAE,MAAM,EAAE;oBAC9B,GAAG,EAAE,GAAG;iBACT,CAAC;YAFF,CAEE,CACH;YACH,CAAC,CAAC,IAAI,CAAC;IACX,CAAC;IAED,8BAAM,GAAN;QACQ,IAAA,KAA+C,IAAI,CAAC,KAAK,EAAxD,OAAO,aAAA,EAAE,SAAS,eAAA,EAAc,EAAE,gBAAA,EAAE,MAAM,YAAc,CAAC;QAEhE,OAAO,CACL,uCAAK,SAAS,EAAE,EAAE,CAAC,eAAe,EAAE,SAAS,CAAC,IAC3C,IAAI,CAAC,aAAa,EAAE,CACjB,CACP,CAAC;IACJ,CAAC;IAzBM,uBAAS,GAAkB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IA0B7D,oBAAC;CAAA,AA9BD,CAA2C,eAAK,CAAC,SAAS,GA8BzD;kBA9BoB,aAAa;AAoClC;IAA2C,sDAAa;IAAxD;;IAA0D,CAAC;IAA9C,qBAAqB;QAJjC,IAAA,eAAQ,EAAC;YACR,IAAI,EAAE,gBAAgB;YACtB,UAAU,EAAE,KAAK;SAClB,CAAC;OACW,qBAAqB,CAAyB;IAAD,4BAAC;CAAA,AAA3D,CAA2C,aAAa,GAAG;AAA9C,sDAAqB",
    "sourcesContent": [
        "import React from 'react';\nimport {RendererProps} from '../../factory';\nimport {BaseSchema} from '../../Schema';\nimport {ActionSchema} from '../Action';\nimport {FormControlProps, FormItem} from './Item';\n\n/**\n * Button Toolar 渲染器。\n * 文档：https://baidu.gitee.io/amis/docs/components/button-toolbar\n */\nexport interface ButtonToolbarSchema extends BaseSchema {\n  /**\n   * 指定为按钮工具集合类型\n   */\n  type: 'button-toolbar';\n\n  buttons: Array<ActionSchema>;\n}\n\nexport interface ButtonToolbarProps\n  extends FormControlProps,\n    Omit<ButtonToolbarSchema, 'className'> {}\n\nexport default class ButtonToolbar extends React.Component<\n  ButtonToolbarProps,\n  object\n> {\n  static propsList: Array<string> = ['buttons', 'className'];\n\n  /**\n   * 这个方法editor里要用作hack，所以不能删掉这个方法\n   * @returns\n   */\n  renderButtons() {\n    const {render, classPrefix: ns, buttons} = this.props;\n    return Array.isArray(buttons)\n      ? buttons.map((button, key) =>\n          render(`button/${key}`, button, {\n            key: key\n          })\n        )\n      : null;\n  }\n\n  render() {\n    const {buttons, className, classnames: cx, render} = this.props;\n\n    return (\n      <div className={cx('ButtonToolbar', className)}>\n        {this.renderButtons()}\n      </div>\n    );\n  }\n}\n\n@FormItem({\n  type: 'button-toolbar',\n  strictMode: false\n})\nexport class ButtonToolbarRenderer extends ButtonToolbar {}\n"
    ]
}