{
    "version": 3,
    "file": "TabsTransferPicker.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/TabsTransferPicker.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import {OptionsControlProps, OptionsControl} from './Options';\nimport React from 'react';\nimport Spinner from '../../components/Spinner';\nimport {BaseTabsTransferRenderer} from './TabsTransfer';\nimport TabsTransferPicker from '../../components/TabsTransferPicker';\nimport {TabsTransferControlSchema} from './TabsTransfer';\nimport {autobind, createObject} from '../../utils/helper';\nimport {Option, optionValueCompare} from '../../components/Select';\nimport {BaseSelection, ItemRenderStates} from '../../components/Selection';\nimport {Action} from '../../types';\n\n/**\n * TabsTransferPicker 穿梭器的弹框形态\n * 文档：https://baidu.gitee.io/amis/docs/components/form/tabs-transfer-picker\n */\nexport interface TabsTransferPickerControlSchema\n  extends Omit<TabsTransferControlSchema, 'type'> {\n  type: 'tabs-transfer-picker';\n}\n\nexport interface TabsTransferProps\n  extends OptionsControlProps,\n    Omit<\n      TabsTransferPickerControlSchema,\n      | 'type'\n      | 'options'\n      | 'inputClassName'\n      | 'className'\n      | 'descriptionClassName'\n    > {}\n\ninterface BaseTransferState {\n  activeKey: number;\n}\n\n@OptionsControl({\n  type: 'tabs-transfer-picker'\n})\nexport class TabsTransferPickerRenderer extends BaseTabsTransferRenderer<TabsTransferProps> {\n  state: BaseTransferState = {\n    activeKey: 0\n  };\n\n  @autobind\n  dispatchEvent(name: string) {\n    const {dispatchEvent, data} = this.props;\n    dispatchEvent(name, data);\n  }\n\n  @autobind\n  optionItemRender(option: any, states: ItemRenderStates) {\n    const {menuTpl, render, data} = this.props;\n    const ctx = arguments[2] || {};\n\n    if (menuTpl) {\n      return render(`item/${states.index}`, menuTpl, {\n        data: createObject(\n          createObject(data, {\n            ...states,\n            ...ctx\n          }),\n          option\n        )\n      });\n    }\n\n    return BaseSelection.itemRender(option, states);\n  }\n\n  // 动作\n  doAction(action: Action) {\n    const {resetValue, onChange} = this.props;\n    switch (action.actionType) {\n      case 'clear':\n        onChange?.('');\n        break;\n      case 'reset':\n        onChange?.(resetValue ?? '');\n        break;\n    }\n  }\n\n  render() {\n    const {\n      className,\n      classnames: cx,\n      options,\n      selectedOptions,\n      sortable,\n      loading,\n      searchResultMode,\n      showArrow,\n      deferLoad,\n      disabled,\n      selectTitle,\n      resultTitle,\n      pickerSize,\n      leftMode,\n      leftOptions\n    } = this.props;\n\n    return (\n      <div className={cx('TabsTransferControl', className)}>\n        <TabsTransferPicker\n          activeKey={this.state.activeKey}\n          onTabChange={this.onTabChange}\n          value={selectedOptions}\n          disabled={disabled}\n          options={options}\n          onChange={this.handleChange}\n          option2value={this.option2value}\n          sortable={sortable}\n          searchResultMode={searchResultMode}\n          onSearch={this.handleTabSearch}\n          showArrow={showArrow}\n          onDeferLoad={deferLoad}\n          selectTitle={selectTitle}\n          resultTitle={resultTitle}\n          size={pickerSize}\n          leftMode={leftMode}\n          leftOptions={leftOptions}\n          optionItemRender={this.optionItemRender}\n          resultItemRender={this.resultItemRender}\n          onFocus={() => this.dispatchEvent('focus')}\n          onBlur={() => this.dispatchEvent('blur')}\n        />\n\n        <Spinner overlay key=\"info\" show={loading} />\n      </div>\n    );\n  }\n}\n"
    ]
}