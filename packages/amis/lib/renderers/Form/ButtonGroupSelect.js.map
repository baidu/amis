{
    "version": 3,
    "file": "ButtonGroupSelect.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Form/ButtonGroupSelect.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport cx from 'classnames';\nimport {\n  OptionsControl,\n  OptionsControlProps,\n  Option,\n  FormOptionsControl\n} from './Options';\nimport {Action, Button} from '../../types';\nimport {getLevelFromClassName, autobind, isEmpty} from '../../utils/helper';\nimport {dataMapping} from '../../utils/tpl-builtin';\nimport {ButtonGroupSchema} from '../ButtonGroup';\nimport {FormBaseControl} from './Item';\n\n/**\n * 按钮组控件。\n * 文档：https://baidu.gitee.io/amis/docs/components/form/button-group\n */\nexport interface ButtonGroupControlSchema\n  extends Omit<ButtonGroupSchema, 'type'>,\n    Omit<FormOptionsControl, 'size'> {\n  type: 'button-group-select';\n}\n\nexport interface ButtonGroupProps\n  extends OptionsControlProps,\n    Omit<\n      ButtonGroupControlSchema,\n      | 'size'\n      | 'source'\n      | 'type'\n      | 'className'\n      | 'descriptionClassName'\n      | 'inputClassName'\n      | 'btnClassName'\n    > {\n  options: Array<Option>;\n}\n\nexport default class ButtonGroupControl extends React.Component<\n  ButtonGroupProps,\n  any\n> {\n  static defaultProps: Partial<ButtonGroupProps> = {\n    btnLevel: 'default',\n    btnActiveLevel: 'primary',\n    clearable: false,\n    vertical: false\n  };\n\n  doAction(action: Action, data: object, throwErrors: boolean) {\n    const {resetValue, onChange} = this.props;\n    const actionType = action?.actionType as string;\n\n    if (actionType === 'clear') {\n      onChange('');\n    } else if (actionType === 'reset') {\n      onChange(resetValue ?? '');\n    }\n  }\n\n  @autobind\n  handleToggle(option: Option) {\n    const {onToggle, multiple, autoFill, onBulkChange} = this.props;\n    onToggle(option);\n  }\n\n  reload() {\n    const reload = this.props.reloadOptions;\n    reload && reload();\n  }\n\n  render(props = this.props) {\n    const {\n      render,\n      classPrefix: ns,\n      classnames: cx,\n      className,\n      disabled,\n      options,\n      value,\n      labelField,\n      placeholder,\n      btnClassName,\n      btnActiveClassName,\n      selectedOptions,\n      buttons,\n      size,\n      block,\n      vertical,\n      tiled,\n      translate: __\n    } = props;\n\n    let body: Array<React.ReactNode> = [];\n    let btnLevel = props.btnLevel;\n    let btnActiveLevel = props.btnActiveLevel;\n\n    btnClassName && (btnLevel = getLevelFromClassName(btnClassName));\n    btnActiveClassName &&\n      (btnActiveLevel = getLevelFromClassName(btnActiveClassName));\n\n    if (options && options.length) {\n      body = options.map((option, key) => {\n        const active = !!~selectedOptions.indexOf(option);\n        return render(\n          `option/${key}`,\n          {\n            label: option[labelField || 'label'],\n            icon: option.icon,\n            size: option.size || size,\n            type: 'button',\n            block: block\n          },\n          {\n            key: key,\n            active,\n            level: (active ? btnActiveLevel : '') || option.level || btnLevel,\n            className: cx(option.className, btnClassName),\n            disabled: option.disabled || disabled,\n            onClick: (e: React.UIEvent<any>) => {\n              if (disabled) {\n                return;\n              }\n              this.handleToggle(option);\n              e.preventDefault(); // 禁止 onAction 触发\n            }\n          }\n        );\n      });\n    } else if (Array.isArray(buttons)) {\n      body = buttons.map((button, key) =>\n        render(\n          `button/${key}`,\n          {\n            size: size,\n            block: block,\n            activeLevel: btnActiveLevel,\n            ...button\n          },\n          {\n            key,\n            className: cx(button.className, btnClassName)\n          }\n        )\n      );\n    }\n\n    return (\n      <div\n        className={cx(\n          `ButtonGroup`,\n          {\n            'ButtonGroup--block': block,\n            'ButtonGroup--vertical': vertical,\n            'ButtonGroup--tiled': tiled,\n            [`ButtonGroup--${size}`]: size\n          },\n          className\n        )}\n      >\n        {body.length ? (\n          body\n        ) : (\n          <span className={`${ns}ButtonGroup-placeholder`}>\n            {__(placeholder)}\n          </span>\n        )}\n      </div>\n    );\n  }\n}\n\n@OptionsControl({\n  type: 'button-group-select',\n  sizeMutable: false,\n  strictMode: false\n})\nexport class ButtonGroupControlRenderer extends ButtonGroupControl {}\n"
    ]
}