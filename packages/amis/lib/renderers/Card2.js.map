{
    "version": 3,
    "file": "Card2.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Card2.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport {Checkbox} from '../components';\nimport {Renderer, RendererProps} from '../factory';\nimport {BaseSchema, SchemaClassName, SchemaCollection} from '../Schema';\nimport {autobind} from '../utils/helper';\nimport {buildStyle} from '../utils/style';\n\n/**\n * Card2 新卡片渲染器。\n * 文档：https://baidu.gitee.io/amis/docs/components/card2\n */\nexport interface Card2Schema extends BaseSchema {\n  /**\n   * 指定为 card2 类型\n   */\n  type: 'card2';\n\n  /**\n   * 内容\n   */\n  body: SchemaCollection;\n\n  /**\n   * body 类名\n   */\n  bodyClassName?: SchemaClassName;\n\n  /**\n   * 自定义样式\n   */\n  style?: {\n    [propName: string]: any;\n  };\n\n  /**\n   * 隐藏选框\n   */\n  hideCheckToggler?: boolean;\n\n  /**\n   * 不配置href且cards容器下生效，点击整个卡片触发选中\n   */\n  checkOnItemClick: boolean;\n\n  /**\n   * 渲染标签\n   */\n  wrapperComponent?: string;\n}\n\nexport interface Card2Props\n  extends RendererProps,\n    Omit<Card2Schema, 'type' | 'className'> {\n  /**\n   * 选择事件\n   */\n  onCheck: (checked: boolean, data: any) => void;\n\n  /**\n   * 数据\n   */\n  item: any;\n\n  /**\n   * 是否可选，当disabled时，将禁用\n   */\n  selectable?: boolean;\n\n  /**\n   * 是否可多选\n   */\n  multiple?: boolean;\n\n  /**\n   * 是否默认选中\n   */\n  selected?: boolean;\n}\n\nexport default class Card2<T> extends React.Component<Card2Props & T, object> {\n  static propsList: Array<string> = ['body', 'className'];\n  static defaultProps = {\n    className: ''\n  };\n\n  @autobind\n  handleClick(e: React.MouseEvent<HTMLDivElement>) {\n    const {checkOnItemClick, selectable} = this.props;\n\n    // 控制选中\n    if (checkOnItemClick && selectable) {\n      this.handleCheck();\n    }\n\n    // TODO 触发事件动作\n  }\n\n  @autobind\n  handleCheck() {\n    const {item, selected} = this.props;\n    this.props.onCheck && this.props.onCheck(!selected, item);\n  }\n\n  renderCheckbox(): JSX.Element | null {\n    const {\n      selectable,\n      classnames: cx,\n      multiple,\n      disabled,\n      selected,\n      hideCheckToggler,\n      checkOnItemClick,\n      checkboxClassname\n    } = this.props;\n\n    if (!selectable || (checkOnItemClick && hideCheckToggler)) {\n      return null;\n    }\n\n    return (\n      <Checkbox\n        className={cx('Card2-checkbox', checkboxClassname)}\n        type={multiple ? 'checkbox' : 'radio'}\n        disabled={disabled}\n        checked={selected}\n        onChange={this.handleCheck}\n      />\n    );\n  }\n\n  /**\n   * 渲染内容区\n   */\n  renderBody(): JSX.Element | null {\n    const {body, render, classnames: cx, bodyClassName, ...rest} = this.props;\n\n    return (\n      <div\n        className={cx('Card2-body', bodyClassName)}\n        onClick={this.handleClick}\n      >\n        {body ? (render('body', body as any, rest) as JSX.Element) : null}\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      className,\n      wrapperComponent,\n      classnames: cx,\n      style,\n      item,\n      selected,\n      checkOnItemClick\n    } = this.props;\n\n    const Component =\n      (wrapperComponent as keyof JSX.IntrinsicElements) || 'div';\n\n    return (\n      <Component\n        className={cx('Card2', className, {\n          'checkOnItem': checkOnItemClick,\n          'is-checked': selected\n        })}\n        style={buildStyle(style, item)}\n      >\n        {this.renderBody()}\n        {this.renderCheckbox()}\n      </Component>\n    );\n  }\n}\n\n@Renderer({\n  type: 'card2'\n})\nexport class Card2Renderer extends Card2<{}> {}\n"
    ]
}