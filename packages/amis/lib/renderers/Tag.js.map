{
    "version": 3,
    "file": "Tag.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Tag.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA;;GAEG;AACH,6DAA0B;AAC1B,sCAAmD;AAEnD,0CAA6C;AAC7C,oDAA8E;AAE9E,uEAAoC;AAqEpC;IAA8B,yCAAiC;IAA/D;;IA4CA,CAAC;IAvCC,yBAAM,GAAN;QACM,IAAA,KAQA,IAAI,CAAC,KAAK,EAPZ,KAAK,WAAA,EACL,IAAI,UAAA,EACJ,WAAW,iBAAA,EACX,KAAK,WAAA,EACL,SAAS,eAAA,EACT,IAAI,UAAA,EACJ,aAAU,EAAV,KAAK,mBAAG,EAAE,KACE,CAAC;QAEf,KAAK;YACH,IAAA,qBAAY,EAAC,IAAI,CAAC,KAAK,CAAC;gBACxB,CAAC,KAAK,CAAC,CAAC,CAAC,IAAA,sCAAwB,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAElE,IAAI,IAAA,4BAAc,EAAC,IAAI,CAAC,EAAE;YACxB,IAAI,GAAG,IAAA,sCAAwB,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC7C;QAED,IAAI,IAAA,4BAAc,EAAC,WAAW,CAAC,EAAE;YAC/B,WAAW,GAAG,IAAA,sCAAwB,EAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SAC3D;QAED,IAAI,IAAA,4BAAc,EAAC,KAAK,CAAC,EAAE;YACzB,KAAK,GAAG,IAAA,sCAAwB,EAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SAC/C;QAED,OAAO,CACL,8BAAC,aAAG,IACF,SAAS,EAAE,SAAS,EACpB,WAAW,EAAE,WAAW,EACxB,KAAK,EAAE,KAAK,EACZ,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,KAAK,IAEX,KAAK,CACF,CACP,CAAC;IACJ,CAAC;IA1CM,qBAAY,GAAsB;QACvC,WAAW,EAAE,QAAQ;KACtB,CAAC;IAyCJ,eAAC;CAAA,AA5CD,CAA8B,eAAK,CAAC,SAAS,GA4C5C;AA5CY,4BAAQ;AAiDrB;IAAsC,iDAAQ;IAA9C;;IAAgD,CAAC;IAApC,gBAAgB;QAH5B,IAAA,kBAAQ,EAAC;YACR,IAAI,EAAE,KAAK;SACZ,CAAC;OACW,gBAAgB,CAAoB;IAAD,uBAAC;CAAA,AAAjD,CAAsC,QAAQ,GAAG;AAApC,4CAAgB",
    "sourcesContent": [
        "/**\n * @file Tag\n */\nimport React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {BaseSchema, SchemaClassName, SchemaIcon} from '../Schema';\nimport {getPropValue} from '../utils/helper';\nimport {isPureVariable, resolveVariableAndFilter} from '../utils/tpl-builtin';\n\nimport Tag from '../components/Tag';\n\n/**\n * Tag\n */\nexport interface TagSchema extends BaseSchema {\n  type: 'tag';\n  /**\n   * 类名\n   */\n  className?: SchemaClassName;\n\n  /**\n   * 自定义样式\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * 标签颜色\n   */\n  color?: string;\n\n  /**\n   * 标签文本内容\n   */\n  label: string;\n\n  /**\n   * normal: 面性标签，对应color的背景色\n   * rounded: 线性标签， 对应color的边框\n   * status: 带图标的标签， 图标可以自定义\n   */\n  displayMode?: 'normal' | 'rounded' | 'status';\n\n  /**\n   * status模式时候设置的前置图标\n   */\n  icon?: SchemaIcon;\n\n  /**\n   * 是否展示关闭按钮\n   */\n  closable?: boolean;\n\n  /**\n   * 关闭图标\n   */\n  closeIcon: SchemaIcon;\n\n  /**\n   * 是否是可选的标签\n   */\n  checkable?: boolean;\n\n  /**\n   * 是否选中\n   */\n  checked?: boolean;\n\n  /**\n   * 是否禁用\n   */\n  disabled?: boolean;\n}\n\nexport interface TagProps\n  extends RendererProps,\n    Omit<TagSchema, 'type' | 'className'> {}\n\nexport class TagField extends React.Component<TagProps, object> {\n  static defaultProps: Partial<TagProps> = {\n    displayMode: 'normal'\n  };\n\n  render() {\n    let {\n      label,\n      icon,\n      displayMode,\n      color,\n      className,\n      data,\n      style = {}\n    } = this.props;\n\n    label =\n      getPropValue(this.props) ||\n      (label ? resolveVariableAndFilter(label, data, '| raw') : null);\n\n    if (isPureVariable(icon)) {\n      icon = resolveVariableAndFilter(icon, data);\n    }\n\n    if (isPureVariable(displayMode)) {\n      displayMode = resolveVariableAndFilter(displayMode, data);\n    }\n\n    if (isPureVariable(color)) {\n      color = resolveVariableAndFilter(color, data);\n    }\n\n    return (\n      <Tag\n        className={className}\n        displayMode={displayMode}\n        color={color}\n        icon={icon}\n        style={style}\n      >\n        {label}\n      </Tag>\n    );\n  }\n}\n\n@Renderer({\n  type: 'tag'\n})\nexport class TagFieldRenderer extends TagField {}\n"
    ]
}