{
    "version": 3,
    "file": "Timeline.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Timeline.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,6DAA0B;AAC1B,sCAAmD;AAGnD,iFAA8C;AAC9C,oCAAoC;AACpC,mEAAsF;AA2EtF,SAAgB,YAAY,CAAC,KAAoB;IAE7C,IAAA,KAAK,GAQH,KAAK,MARF,EACL,IAAI,GAOF,KAAK,KAPH,EACJ,SAAS,GAMP,KAAK,UANE,EACT,OAAO,GAKL,KAAK,QALA,EACP,IAAI,GAIF,KAAK,KAJH,EACJ,MAAM,GAGJ,KAAK,OAHD,EACN,MAAM,GAEJ,KAAK,OAFD,EACN,MAAM,GACJ,KAAK,OADD,CACE;IAEV,QAAQ;IACR,IAAM,gBAAgB,GAA8B,MAAM,IAAI,KAAK,IAAI,EAAE,CAAC;IAE1E,OAAO;IACP,IAAM,aAAa,GAAG,UAAC,MAAc,EAAE,GAAsB,IAAK,OAAA,OAAO,GAAG,KAAK,QAAQ;QACvE,CAAC,CAAC,IAAA,YAAM,EAAC,GAAG,EAAE,IAAI,CAAC;QACnB,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,EAFkB,CAElB,CAAC;IAEjD,QAAQ;IACR,IAAM,oBAAoB,GACvB,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,GAAG,CAAC,UAAC,YAAgC;QACtD,uDACK,YAAY,KACf,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,YAAY,CAAC,IAAI,CAAC,EAC9C,KAAK,EAAE,aAAa,CAAC,OAAO,EAAE,YAAY,CAAC,KAAK,CAAC,IAClD;IACH,CAAC,CAAC,CAAC;IAGL,OAAO,CAAC,8BAAC,kBAAQ,IACP,KAAK,EAAI,oBAAoB,EAC7B,SAAS,EAAI,SAAS,EACtB,OAAO,EAAI,OAAO,EAClB,IAAI,EAAI,IAAI,GACZ,CAAC,CAAA;AACb,CAAC;AArCD,oCAqCC;AAED,IAAM,wBAAwB,GAAG,IAAA,mCAAgB,EAAC;IAChD,OAAO,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,KAAK,IAAI,IAAI,EAAlB,CAAkB;CACpC,CAAC;IACc,wCAEb;IAFD;;IAOA,CAAC;IAJC,wBAAM,GAAN;QACE,IAAM,KAAsD,IAAI,CAAC,KAAK,EAA/D,MAAM,YAAA,EAAE,SAAS,eAAA,EAAE,OAAO,aAAA,EAAE,YAAY,kBAAA,EAAK,IAAI,2BAAlD,kDAAmD,CAAa,CAAC;QACvE,OAAO,8BAAC,YAAY,0BAAC,MAAM,EAAE,MAAM,IAAM,IAAI,EAAI,CAAC;IACpD,CAAC;IACH,cAAC;AAAD,CAAC,AAPD,CAAc,eAAK,CAAC,SAAS,GAQ9B,CAAC;AAKF;IAAsC,iDAA8B;IAApE;;IAIA,CAAC;IAHC,iCAAM,GAAN;QACE,OAAQ,8BAAC,wBAAwB,4BAAK,IAAI,CAAC,KAAK,EAAI,CAAC;IACvD,CAAC;IAHU,gBAAgB;QAH5B,IAAA,kBAAQ,EAAC;YACR,IAAI,EAAE,UAAU;SACjB,CAAC;OACW,gBAAgB,CAI5B;IAAD,uBAAC;CAAA,AAJD,CAAsC,eAAK,CAAC,SAAS,GAIpD;AAJY,4CAAgB",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {BaseSchema, SchemaApi, SchemaCollection, SchemaTokenizeableString} from '../Schema';\nimport {resolveVariable} from '../utils/tpl-builtin';\nimport Timeline from '../components/Timeline';\nimport {filter} from '../utils/tpl';\nimport { RemoteOptionsProps, withRemoteConfig } from '../components/WithRemoteConfig';\n\nexport interface TimelineItemSchema extends Omit<BaseSchema, 'type'> {\n  /**\n   * 时间点\n   */\n  time: string;\n\n  /**\n   * 时间节点标题\n   */\n  title?: SchemaCollection;\n\n  /**\n    * 详细内容\n    */\n  detail?: string;\n\n  /**\n   * detail折叠时文案\n   */\n  detailCollapsedText?: string;\n\n  /**\n   * detail展开时文案\n   */\n  detailExpandedText?: string;\n\n  /**\n   * 时间点圆圈颜色\n   */\n  color?: string;\n\n  /**\n   * 图标\n   */\n  icon?: SchemaCollection;\n}\n\nexport interface TimelineSchema extends BaseSchema {\n  /**\n   * 指定为 Timeline 时间轴渲染器\n   */\n  type: 'timeline';\n\n  /**\n   * 节点数据\n   */\n  items?: Array<TimelineItemSchema>;\n\n  /**\n   * API 或 数据映射\n   */\n  source?: SchemaApi  | SchemaTokenizeableString;\n\n  /**\n   * 文字相对于时间轴展示方向\n   */\n  mode?: 'left' | 'right' | 'alternate';\n\n  /**\n   * 展示方向\n   */\n  direction?: 'horizontal' | 'vertical'\n\n  /**\n   * 节点倒序\n   */\n  reverse?: boolean,\n}\n\nexport interface TimelineProps\n  extends RendererProps,\n    Omit<TimelineSchema, 'className'> {}\n\nexport function TimelineCmpt(props: TimelineProps) {\n  const {\n    items,\n    mode,\n    direction,\n    reverse,\n    data,\n    config,\n    source,\n    render\n  } = props;\n\n  // 获取源数据\n  const timelineItemsRow: Array<TimelineItemSchema> = config || items || [];\n\n  // 渲染内容\n  const resolveRender = (region: string, val?: SchemaCollection) => typeof val === 'string'\n                    ? filter(val, data)\n                    : (val && render(region, val));\n\n  // 处理源数据\n  const resolveTimelineItems =\n     timelineItemsRow?.map((timelineItem: TimelineItemSchema) => {\n      return {\n        ...timelineItem,\n        icon: resolveRender('icon', timelineItem.icon),\n        title: resolveRender('title', timelineItem.title),\n      }\n    });\n\n\n  return (<Timeline\n            items = {resolveTimelineItems}\n            direction = {direction}\n            reverse = {reverse}\n            mode = {mode}\n          />)\n}\n\nconst TimelineWithRemoteConfig = withRemoteConfig({\n  adaptor: data => data.items || data\n})(\n  class extends React.Component<\n    RemoteOptionsProps & React.ComponentProps<typeof TimelineCmpt>\n  > {\n    render() {\n      const {config, deferLoad, loading, updateConfig, ...rest} = this.props;\n      return <TimelineCmpt config={config} {...rest} />;\n    }\n  }\n);\n\n@Renderer({\n  type: 'timeline'\n})\nexport class TimelineRenderer extends React.Component<TimelineProps> {\n  render() {\n    return  <TimelineWithRemoteConfig {...this.props} />;\n  }\n}\n"
    ]
}