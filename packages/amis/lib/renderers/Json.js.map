{
    "version": 3,
    "file": "Json.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Json.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\n\nimport JsonView, {InteractionProps} from 'react-json-view';\nimport {autobind, getPropValue, noop} from '../utils/helper';\nimport {BaseSchema} from '../Schema';\nimport {resolveVariableAndFilter, isPureVariable} from '../utils/tpl-builtin';\n/**\n * JSON 数据展示控件。\n * 文档：https://baidu.gitee.io/amis/docs/components/json\n */\nexport interface JsonSchema extends BaseSchema {\n  /**\n   * 指定为Json展示类型\n   */\n  type: 'json' | 'static-json';\n\n  /**\n   * 默认展开的级别\n   */\n  levelExpand?: number;\n\n  /**\n   * 支持从数据链取值\n   */\n  source?: string;\n\n  /**\n   * 是否可修改\n   */\n  mutable?: boolean;\n\n  /**\n   * 是否显示数据类型\n   */\n  displayDataTypes?: boolean;\n\n   /**\n   * 是否可复制\n   */\n  enableClipboard?: boolean;\n\n  /**\n   * 图标风格\n   */\n  iconStyle?: \"square\" | \"circle\" | \"triangle\"\n\n  /**\n   * 是否显示键的引号\n   */\n  quotesOnKeys?: boolean\n\n  /**\n   * 是否为键排序\n   */\n  sortKeys?: boolean\n}\n\nexport interface JSONProps extends RendererProps, JsonSchema {\n  levelExpand: number;\n  className?: string;\n  placeholder?: string;\n  jsonTheme: string;\n  hideRoot?: boolean;\n  source?: string;\n}\n\nexport class JSONField extends React.Component<JSONProps, object> {\n  static defaultProps: Partial<JSONProps> = {\n    placeholder: '-',\n    levelExpand: 1,\n    source: '',\n    displayDataTypes: false,\n    enableClipboard: false,\n    iconStyle:\"square\",\n    quotesOnKeys: true,\n    sortKeys:false,\n  };\n\n  @autobind\n  emitChange(e: InteractionProps) {\n    const {onChange, name} = this.props;\n\n    if (!name || !onChange) {\n      return false;\n    }\n\n    onChange(e.updated_src, name);\n    return true;\n  }\n\n  @autobind\n  shouldExpandNode({namespace}: {namespace: Array<string | null>}) {\n    const {levelExpand} = this.props;\n\n    if (typeof levelExpand !== 'number') {\n      return false;\n    }\n\n    return namespace.length > levelExpand;\n  }\n\n  render() {\n    const {\n      className,\n      jsonTheme,\n      classnames: cx,\n      placeholder,\n      source,\n      levelExpand,\n      mutable,\n      displayDataTypes,\n      enableClipboard,\n      iconStyle,\n      quotesOnKeys,\n      sortKeys,\n      name\n    } = this.props;\n\n    const value = getPropValue(this.props);\n\n    let data = value;\n    if (source !== undefined && isPureVariable(source)) {\n      data = resolveVariableAndFilter(source, this.props.data, '| raw');\n    } else if (typeof value === 'string') {\n      // 尝试解析 json\n      try {\n        data = JSON.parse(value);\n      } catch (e) {}\n    }\n\n    let jsonThemeValue = jsonTheme;\n    if (isPureVariable(jsonTheme)) {\n      jsonThemeValue = resolveVariableAndFilter(\n        jsonTheme,\n        this.props.data,\n        '| raw'\n      );\n    }\n\n    // JsonView 只支持对象，所以不是对象格式需要转成对象格式。\n    if (data && ~['string', 'number'].indexOf(typeof data)) {\n      data = {\n        [typeof data]: data\n      };\n    }\n\n    return (\n      <div className={cx('JsonField', className)}>\n        {typeof data === 'undefined' || data === null ? (\n          placeholder\n        ) : (\n          <JsonView\n            name={false}\n            src={data}\n            theme={(jsonThemeValue as any) ?? 'rjv-default'}\n            shouldCollapse={this.shouldExpandNode}\n            enableClipboard={enableClipboard}\n            displayDataTypes={displayDataTypes}\n            iconStyle={iconStyle}\n            quotesOnKeys={quotesOnKeys}\n            sortKeys={sortKeys}\n            onEdit={name && mutable ? this.emitChange : false}\n            onDelete={name && mutable ? this.emitChange : false}\n            onAdd={name && mutable ? this.emitChange : false}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\n@Renderer({\n  type: 'json'\n})\nexport class JSONFieldRenderer extends JSONField {}\n"
    ]
}