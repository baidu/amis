{
    "version": 3,
    "file": "Code.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Code.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\n * @file 代码高亮\n */\nimport React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport {BaseSchema} from '../Schema';\nimport {Renderer, RendererProps} from '../factory';\nimport {detectPropValueChanged, getPropValue} from '../utils/helper';\nimport {isPureVariable, resolveVariableAndFilter} from '../utils/tpl-builtin';\n\n// 自定义语言的 token\nexport interface Token {\n  /**\n   * token 的正则\n   */\n  regex: string;\n\n  /**\n   * 正则的 flag\n   */\n  regexFlags?: string;\n\n  /**\n   * token 名称\n   */\n  name: string;\n\n  /**\n   * 文字颜色\n   */\n  color?: string;\n\n  /**\n   * 背景色，不过不知道为何没效果\n   */\n  background?: string;\n\n  /**\n   * 文字样式\n   */\n  fontStyle?: string;\n}\n\n// 自定义语言\nexport interface CustomLang {\n  /**\n   * 语言名字\n   */\n  name: string;\n\n  /**\n   * token\n   */\n  tokens: Token[];\n}\n\n/**\n * 代码高亮组件\n * 文档：https://baidu.gitee.io/amis/docs/components/code\n */\nexport interface CodeSchema extends BaseSchema {\n  type: 'code';\n\n  /**\n   * 语言类型\n   */\n  language?:\n    | 'bat'\n    | 'c'\n    | 'coffeescript'\n    | 'cpp'\n    | 'csharp'\n    | 'css'\n    | 'dockerfile'\n    | 'fsharp'\n    | 'go'\n    | 'handlebars'\n    | 'html'\n    | 'ini'\n    | 'java'\n    | 'javascript'\n    | 'json'\n    | 'less'\n    | 'lua'\n    | 'markdown'\n    | 'msdax'\n    | 'objective-c'\n    | 'php'\n    | 'plaintext'\n    | 'postiats'\n    | 'powershell'\n    | 'pug'\n    | 'python'\n    | 'r'\n    | 'razor'\n    | 'ruby'\n    | 'sb'\n    | 'scss'\n    | 'shell'\n    | 'sol'\n    | 'sql'\n    | 'swift'\n    | 'typescript'\n    | 'vb'\n    | 'xml'\n    | 'yaml'\n    | string;\n\n  editorTheme?: string;\n\n  /**\n   * tab 大小\n   */\n  tabSize?: number;\n\n  /**\n   * 是否折行\n   */\n  wordWrap?: boolean;\n\n  /**\n   * 自定义语言\n   */\n  customLang?: CustomLang;\n}\n\nexport interface CodeProps\n  extends RendererProps,\n    Omit<CodeSchema, 'type' | 'className'> {}\n\nexport default class Code extends React.Component<CodeProps> {\n  static defaultProps: Partial<CodeProps> = {\n    language: 'plaintext',\n    editorTheme: 'vs',\n    tabSize: 4,\n    wordWrap: true\n  };\n\n  monaco: any;\n  toDispose: Array<Function> = [];\n  codeRef = React.createRef<HTMLElement>();\n  customLang: CustomLang;\n  sourceCode: string;\n\n  constructor(props: CodeProps) {\n    super(props);\n  }\n\n  componentDidMount() {\n    import('monaco-editor').then(monaco => this.handleMonaco(monaco));\n  }\n\n  componentDidUpdate(preProps: CodeProps) {\n    const props = this.props;\n\n    const sourceCode = getPropValue(this.props);\n    const preSourceCode = getPropValue(this.props);\n\n    if (\n      sourceCode !== preSourceCode ||\n      (props.customLang && !isEqual(props.customLang, preProps.customLang))\n    ) {\n      const dom = this.codeRef.current!;\n      dom.innerHTML = sourceCode;\n      const theme = this.registTheme() || this.props.editorTheme || 'vs';\n      setTimeout(() => {\n        this.monaco.editor.colorizeElement(dom, {\n          tabSize: this.props.tabSize,\n          theme\n        });\n      }, 16);\n    }\n  }\n\n  handleMonaco(monaco: any) {\n    this.monaco = monaco;\n    if (this.codeRef.current) {\n      const dom = this.codeRef.current;\n      const theme = this.registTheme() || this.props.editorTheme || 'vs';\n      // 这里必须是异步才能准确，可能是因为 monaco 里注册主题是异步的\n      setTimeout(() => {\n        monaco.editor.colorizeElement(dom, {\n          tabSize: this.props.tabSize,\n          theme\n        });\n      }, 16);\n    }\n  }\n\n  registTheme() {\n    const monaco = this.monaco;\n    if (!monaco) {\n      return null;\n    }\n    if (\n      this.customLang &&\n      this.customLang.name &&\n      this.customLang.tokens &&\n      this.customLang.tokens.length\n    ) {\n      const langName = this.customLang.name;\n      monaco.languages.register({id: langName});\n\n      const tokenizers = [];\n      const rules = [];\n      for (const token of this.customLang.tokens) {\n        const regex = new RegExp(token.regex, token.regexFlags || undefined);\n        tokenizers.push([regex, token.name]);\n        rules.push({\n          token: token.name,\n          foreground: token.color,\n          background: token.background,\n          fontStyle: token.fontStyle\n        });\n      }\n\n      monaco.languages.setMonarchTokensProvider(langName, {\n        tokenizer: {\n          root: tokenizers\n        }\n      });\n      monaco.editor.defineTheme(langName, {\n        base: 'vs',\n        inherit: false,\n        rules: rules\n      });\n\n      return langName;\n    }\n    return null;\n  }\n\n  render() {\n    const {className, classnames: cx, data, customLang, wordWrap} = this.props;\n    let language = this.props.language;\n    const sourceCode = getPropValue(this.props);\n    if (isPureVariable(language)) {\n      language = resolveVariableAndFilter(language, data);\n    }\n\n    if (customLang) {\n      if (customLang.name) {\n        language = customLang.name;\n      }\n      this.customLang = customLang;\n    }\n\n    return (\n      <code\n        ref={this.codeRef}\n        className={cx(`Code`, {'word-break': wordWrap}, className)}\n        data-lang={language}\n      >\n        {sourceCode}\n      </code>\n    );\n  }\n}\n\n@Renderer({\n  type: 'code'\n})\nexport class CodeRenderer extends Code {}\n"
    ]
}