{
    "version": 3,
    "file": "TableView.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/TableView.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "/**\n * @file 用于表格类型的展现效果，界面可定制化能力更强\n */\n\nimport React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {Api, SchemaNode, Schema, Action} from '../types';\nimport {isVisible} from '../utils/helper';\nimport {BaseSchema, SchemaObject} from '../Schema';\n\n// 为了方便编辑器，目前考虑不区分 th 和 td，但因为可以控制展现，所以能实现一样的效果，同时后续这个组件还承担复杂布局的功能，不适合用 th\nexport type TdObject = {\n  /**\n   * 单元格背景色\n   */\n  background?: string;\n\n  /**\n   * 单元格文字颜色\n   */\n  color?: string;\n\n  /**\n   * 单元格文字是否加粗\n   */\n  bold?: boolean;\n\n  /**\n   * 单元格的内边距\n   */\n  padding?: number;\n\n  /**\n   * 单元格宽度\n   */\n  width?: number;\n\n  /**\n   * 单元格内的组件\n   */\n  body?: SchemaObject;\n\n  /**\n   * 水平对齐\n   */\n  align?: 'left' | 'center' | 'right' | 'justify';\n\n  /**\n   * 垂直对齐\n   */\n  valign?: 'top' | 'middle' | 'bottom' | 'baseline';\n\n  /**\n   * 跨几行\n   */\n  colspan?: number;\n\n  /**\n   * 跨几列\n   */\n  rowspan?: number;\n\n  /**\n   * 自定义样式\n   */\n  style?: object;\n};\n\n/**\n * 行设置\n */\nexport type TrObject = {\n  /**\n   * 行背景色\n   */\n  background?: string;\n\n  /**\n   * 行高度\n   */\n  height?: number;\n\n  /**\n   * 单元格配置\n   */\n  tds: TdObject[];\n\n  style?: object;\n};\n\n/**\n * 列设置\n */\nexport type ColObject = {\n  span?: number;\n  style?: Object;\n};\n\n/**\n * 表格展现渲染器\n * 文档：https://baidu.gitee.io/amis/docs/components/table-view\n */\nexport interface TableViewSchema extends BaseSchema {\n  /**\n   * 指定为 table-view 展示类型\n   */\n  type: 'table-view';\n\n  /**\n   * table 容器宽度，默认是 auto\n   */\n  width?: number | string;\n\n  /**\n   *  默认单元格内边距\n   */\n  padding?: number | string;\n\n  /**\n   * 是否显示边框\n   */\n  border?: boolean;\n\n  /**\n   * 边框颜色\n   */\n  borderColor?: string;\n\n  /**\n   * 标题设置\n   */\n  caption?: string;\n\n  /**\n   * 标题位置\n   */\n  captionSide?: 'top' | 'bottom';\n\n  /**\n   * 行设置\n   */\n  trs: TrObject[];\n\n  /**\n   * 列设置\n   */\n  cols: ColObject[];\n}\n\nexport interface TableViewProps\n  extends RendererProps,\n    Omit<TableViewSchema, 'type' | 'className'> {\n  itemRender?: (\n    item: any,\n    key: number,\n    length: number,\n    props: any\n  ) => JSX.Element;\n}\n\nconst defaultPadding = 'var(--TableCell-paddingY) var(--TableCell-paddingX)';\n\nexport default class TableView extends React.Component<TableViewProps, object> {\n  static defaultProps: Partial<TableViewProps> = {\n    padding: defaultPadding,\n    width: '100%',\n    border: true,\n    borderColor: 'var(--borderColor)'\n  };\n\n  constructor(props: TableViewProps) {\n    super(props);\n  }\n\n  renderTd(td: TdObject, colIndex: number, rowIndex: number) {\n    const {border, borderColor, render, style} = this.props;\n    const key = `td-${colIndex}`;\n    let styleBorder;\n    if (border) {\n      styleBorder = `1px solid ${borderColor}`;\n    }\n    return (\n      <td\n        style={{\n          border: styleBorder,\n          color: td.color,\n          fontWeight: td.bold ? 'bold' : 'normal',\n          background: td.background,\n          padding: td.padding || defaultPadding,\n          width: td.width || 'auto',\n          textAlign: td.align || 'left',\n          verticalAlign: td.valign || 'center',\n          ...style\n        }}\n        align={td.align}\n        valign={td.valign}\n        rowSpan={td.rowspan}\n        colSpan={td.colspan}\n        key={key}\n      >\n        {this.renderTdBody(td.body)}\n      </td>\n    );\n  }\n\n  renderTdBody(body?: SchemaObject) {\n    const {render} = this.props;\n    return render('td', body || '');\n  }\n\n  renderTds(tds: TdObject[], rowIndex: number) {\n    return tds.map((td, colIndex) => this.renderTd(td, colIndex, rowIndex));\n  }\n\n  renderTr(tr: TrObject, rowIndex: number) {\n    const key = `tr-${rowIndex}`;\n    return (\n      <tr\n        style={{height: tr.height, background: tr.background, ...tr.style}}\n        key={key}\n      >\n        {this.renderTds(tr.tds || [], rowIndex)}\n      </tr>\n    );\n  }\n\n  renderTrs(trs: TrObject[]) {\n    const tr = trs.map((tr, rowIndex) => this.renderTr(tr, rowIndex));\n    return tr;\n  }\n\n  renderCols() {\n    const {cols} = this.props;\n    if (cols) {\n      const colsElement = cols.map(col => {\n        return <col span={col.span} style={col.style}></col>;\n      });\n      return <colgroup>{colsElement}</colgroup>;\n    }\n    return null;\n  }\n\n  renderCaption() {\n    if (this.props.caption) {\n      return (\n        <caption\n          style={{\n            captionSide: this.props.captionSide === 'bottom' ? 'bottom' : 'top'\n          }}\n        >\n          {this.props.caption}\n        </caption>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    const {\n      width,\n      border,\n      borderColor,\n      trs,\n      classnames: cx,\n      className\n    } = this.props;\n    let styleBorder;\n    if (border) {\n      styleBorder = `1px solid ${borderColor}`;\n    }\n    return (\n      <table\n        className={cx('TableView', className)}\n        style={{width: width, border: styleBorder, borderCollapse: 'collapse'}}\n      >\n        {this.renderCaption()}\n        {this.renderCols()}\n        <tbody>{this.renderTrs(trs)}</tbody>\n      </table>\n    );\n  }\n}\n\n@Renderer({\n  type: 'table-view'\n})\nexport class TableViewRenderer extends TableView {}\n"
    ]
}