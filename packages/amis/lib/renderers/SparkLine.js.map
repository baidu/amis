{
    "version": 3,
    "file": "SparkLine.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/SparkLine.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,mFAAkE;AAClE,sCAAmD;AACnD,6DAA0B;AAI1B,0CAAqE;AA+ErE;IAAuC,kDAAmC;IAA1E;;IAuBA,CAAC;IArBC,uCAAW,GAAX,UAAY,CAAmB,EAAE,GAAQ;QACjC,IAAA,KAA0C,IAAI,CAAC,KAAK,EAAnD,QAAQ,cAAA,EAAE,QAAQ,cAAA,EAAE,WAAW,iBAAA,EAAE,IAAI,UAAc,CAAC;QAC3D,IAAI,CAAC,CAAC,gBAAgB,IAAI,CAAC,WAAW,IAAI,QAAQ,EAAE;YAClD,OAAO;SACR;QAED,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,IAAI,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC,IAAA,qBAAY,EAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACtE,CAAC;IAED,kCAAM,GAAN;QACQ,IAAA,KAAmC,IAAI,CAAC,KAAK,EAA5C,KAAK,WAAA,EAAE,IAAI,UAAA,EAAE,IAAI,UAAA,EAAE,WAAW,iBAAc,CAAC;QACpD,IAAM,UAAU,GAAG,IAAA,qBAAY,EAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEtD,OAAO,CACL,8BAAC,mBAAS,0BACR,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,IAC/C,IAAI,CAAC,KAAK,IACd,KAAK,EAAE,UAAU,IACjB,CACH,CAAC;IACJ,CAAC;;IApBD;QADC,iBAAQ;;0EACM,eAAK,oBAAL,eAAK,CAAC,UAAU;;wDAO9B;IATU,iBAAiB;QAH7B,IAAA,kBAAQ,EAAC;YACR,IAAI,EAAE,WAAW;SAClB,CAAC;OACW,iBAAiB,CAuB7B;IAAD,wBAAC;CAAA,AAvBD,CAAuC,eAAK,CAAC,SAAS,GAuBrD;AAvBY,8CAAiB",
    "sourcesContent": [
        "import SparkLine, {SparkLineProps} from '../components/SparkLine';\nimport {Renderer, RendererProps} from '../factory';\nimport React from 'react';\nimport {resolveVariableAndFilter} from '../utils/tpl-builtin';\nimport {BaseSchema, SchemaClassName} from '../Schema';\nimport {ActionSchema} from './Action';\nimport {autobind, createObject, getPropValue} from '../utils/helper';\n\nexport interface SparkLineSchema extends BaseSchema {\n  type: 'sparkline';\n\n  /**\n   * css 类名\n   */\n  className?: SchemaClassName;\n\n  /**\n   * 关联数据变量。\n   */\n  name?: string;\n\n  /**\n   * 宽度\n   * @default 100\n   */\n  width?: number;\n\n  /**\n   * 高度\n   * @default 50\n   */\n  height?: number;\n\n  /**\n   * 点击行为\n   */\n  clickAction?: ActionSchema;\n\n  /**\n   * 空数据时显示的内容\n   */\n  placeholder?: string;\n\n  // /**\n  //  * 线的转折是否要有圆角。默认为 2\n  //  */\n  // lineRadius?: number;\n\n  // /**\n  //  * 默认为2，线的宽度。\n  //  */\n  // lineWidth?: number;\n\n  // /**\n  //  * 线的颜色，默认为 primaryColor\n  //  */\n  // lineColor?: string;\n\n  // /**\n  //  * 下面堆积区域的颜色。\n  //  */\n  // areaColor?: string;\n\n  // /**\n  //  * 光标移动上来的点的颜色值\n  //  */\n  // cursorColor?: number;\n\n  // 如果有 label 就有 hover 效果，如果没有没有鼠标hover 交互。\n  value?: Array<\n    | number\n    | {\n        value: number;\n        label?: string;\n      }\n  >;\n}\n\ninterface SparkLineRendProps\n  extends RendererProps,\n    Omit<SparkLineSchema, 'type' | 'className'> {}\n\n@Renderer({\n  type: 'sparkline'\n})\nexport class SparkLineRenderer extends React.Component<SparkLineRendProps> {\n  @autobind\n  handleClick(e: React.MouseEvent, ctx: any) {\n    const {disabled, onAction, clickAction, data} = this.props;\n    if (e.defaultPrevented || !clickAction || disabled) {\n      return;\n    }\n\n    onAction?.(null, clickAction, ctx ? createObject(data, ctx) : data);\n  }\n\n  render() {\n    const {value, name, data, clickAction} = this.props;\n    const finalValue = getPropValue(this.props) || [1, 1];\n\n    return (\n      <SparkLine\n        onClick={clickAction ? this.handleClick : undefined}\n        {...this.props}\n        value={finalValue}\n      />\n    );\n  }\n}\n"
    ]
}