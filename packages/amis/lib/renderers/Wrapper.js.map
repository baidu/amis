{
    "version": 3,
    "file": "Wrapper.js",
    "sourceRoot": "",
    "sources": [
        "/src/renderers/Wrapper.tsx"
    ],
    "names": [],
    "mappings": ";;;;AAAA,6DAA0B;AAC1B,sCAAmD;AAKnD,wCAA0C;AAmC1C;IAAqC,wCAAqC;IAA1E;;IAwCA,CAAC;IAjCC,4BAAU,GAAV;QACQ,IAAA,KAAqC,IAAI,CAAC,KAAK,EAA9C,QAAQ,cAAA,EAAE,IAAI,UAAA,EAAE,MAAM,YAAA,EAAE,QAAQ,cAAc,CAAC;QAEtD,OAAO,QAAQ;YACb,CAAC,CAAC,OAAO,QAAQ,KAAK,UAAU;gBAC9B,CAAC,CAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAiB;gBACvC,CAAC,CAAE,QAAwB;YAC7B,CAAC,CAAC,IAAI;gBACN,CAAC,CAAE,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,EAAC,QAAQ,UAAA,EAAC,CAAiB;gBACnD,CAAC,CAAC,IAAI,CAAC;IACX,CAAC;IAED,wBAAM,GAAN;QACQ,IAAA,KAAuD,IAAI,CAAC,KAAK,EAAhE,SAAS,eAAA,EAAE,IAAI,UAAA,EAAc,EAAE,gBAAA,EAAE,KAAK,WAAA,EAAE,IAAI,UAAA,EAAE,IAAI,UAAc,CAAC;QAExE,qCAAqC;QACrC,IAAI,IAAI,KAAK,KAAK,EAAE;YAClB,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;SAC1B;QAED,OAAO,CACL,uCACE,SAAS,EAAE,EAAE,CACX,SAAS,EACT,IAAI,IAAI,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC,mBAAY,IAAI,CAAE,CAAC,CAAC,CAAC,EAAE,EACjD,SAAS,CACV,EACD,KAAK,EAAE,IAAA,kBAAU,EAAC,KAAK,EAAE,IAAI,CAAC,IAE7B,IAAI,CAAC,UAAU,EAAE,CACd,CACP,CAAC;IACJ,CAAC;IAtCM,iBAAS,GAAkB,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;IACrE,oBAAY,GAA0B;QAC3C,SAAS,EAAE,EAAE;QACb,IAAI,EAAE,IAAI;KACX,CAAC;IAmCJ,cAAC;CAAA,AAxCD,CAAqC,eAAK,CAAC,SAAS,GAwCnD;kBAxCoB,OAAO;AA6C5B;IAAqC,gDAAO;IAA5C;;IAA8C,CAAC;IAAlC,eAAe;QAH3B,IAAA,kBAAQ,EAAC;YACR,IAAI,EAAE,SAAS;SAChB,CAAC;OACW,eAAe,CAAmB;IAAD,sBAAC;CAAA,AAA/C,CAAqC,OAAO,GAAG;AAAlC,0CAAe",
    "sourcesContent": [
        "import React from 'react';\nimport {Renderer, RendererProps} from '../factory';\nimport {BaseSchema, SchemaCollection} from '../Schema';\nimport {resolveVariable} from '../utils/tpl-builtin';\nimport {SchemaNode} from '../types';\nimport mapValues from 'lodash/mapValues';\nimport {buildStyle} from '../utils/style';\n\n/**\n * Wrapper 容器渲染器。\n * 文档：https://baidu.gitee.io/amis/docs/components/wrapper\n */\nexport interface WrapperSchema extends BaseSchema {\n  /**\n   * 指定为 container 类型\n   */\n  type: 'wrapper';\n\n  /**\n   * 内容\n   */\n  body: SchemaCollection;\n\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'none';\n\n  wrap?: boolean;\n\n  /**\n   * 自定义样式\n   */\n  style?: {\n    [propName: string]: any;\n  };\n}\n\nexport interface WrapperProps\n  extends RendererProps,\n    Omit<WrapperSchema, 'className'> {\n  children?: JSX.Element | ((props?: any) => JSX.Element);\n}\n\nexport default class Wrapper extends React.Component<WrapperProps, object> {\n  static propsList: Array<string> = ['body', 'className', 'children', 'size'];\n  static defaultProps: Partial<WrapperProps> = {\n    className: '',\n    size: 'md'\n  };\n\n  renderBody(): JSX.Element | null {\n    const {children, body, render, disabled} = this.props;\n\n    return children\n      ? typeof children === 'function'\n        ? (children(this.props) as JSX.Element)\n        : (children as JSX.Element)\n      : body\n      ? (render('body', body, {disabled}) as JSX.Element)\n      : null;\n  }\n\n  render() {\n    const {className, size, classnames: cx, style, data, wrap} = this.props;\n\n    // 期望不要使用，给 form controls 用法自动转换时使用的。\n    if (wrap === false) {\n      return this.renderBody();\n    }\n\n    return (\n      <div\n        className={cx(\n          'Wrapper',\n          size && size !== 'none' ? `Wrapper--${size}` : '',\n          className\n        )}\n        style={buildStyle(style, data)}\n      >\n        {this.renderBody()}\n      </div>\n    );\n  }\n}\n\n@Renderer({\n  type: 'wrapper'\n})\nexport class WrapperRenderer extends Wrapper {}\n"
    ]
}