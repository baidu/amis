{
    "version": 3,
    "file": "types.js",
    "sourceRoot": "",
    "sources": [
        "/src/types.ts"
    ],
    "names": [],
    "mappings": "",
    "sourcesContent": [
        "import type {ActionSchema} from './renderers/Action';\nimport {SchemaApiObject} from './Schema';\n\nexport interface ApiObject extends SchemaApiObject {\n  config?: {\n    withCredentials?: boolean;\n    cancelExecutor?: (cancel: Function) => void;\n  };\n  graphql?: string;\n  operationName?: string;\n  body?: PlainObject;\n  query?: PlainObject;\n  adaptor?: (payload: object, response: fetcherResult, api: ApiObject) => any;\n  requestAdaptor?: (api: ApiObject) => ApiObject;\n}\nexport type ApiString = string;\nexport type Api = ApiString | ApiObject;\n\nexport interface fetcherResult {\n  data?: {\n    data: object;\n    status: number;\n    msg: string;\n    msgTimeout?: number;\n    errors?: {\n      [propName: string]: string;\n    };\n    type?: string;\n    [propName: string]: any; // 为了兼容其他返回格式\n  };\n  status: number;\n  headers: object;\n}\n\nexport interface fetchOptions {\n  method?: 'get' | 'post' | 'put' | 'patch' | 'delete' | 'jsonp';\n  successMessage?: string;\n  errorMessage?: string;\n  autoAppend?: boolean;\n  beforeSend?: (data: any) => any;\n  onSuccess?: (json: Payload) => any;\n  onFailed?: (json: Payload) => any;\n  silent?: boolean;\n  [propName: string]: any;\n}\n\nexport interface Payload {\n  ok: boolean;\n  msg: string;\n  msgTimeout?: number;\n  data: any;\n  status: number;\n  errors?: {\n    [propName: string]: string;\n  };\n}\n\nexport interface Schema {\n  type: string;\n  detectField?: string;\n  visibleOn?: string;\n  hiddenOn?: string;\n  children?: JSX.Element | ((props: any, schema?: any) => JSX.Element) | null;\n  definitions?: Definitions;\n  [propName: string]: any;\n}\n\nexport interface Button {\n  type: 'submit' | 'button' | 'reset';\n  label?: string;\n  icon?: string;\n  size?: string;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport type SchemaNode = Schema | string | Array<Schema | string>;\nexport interface SchemaArray extends Array<SchemaNode> {}\nexport interface Definitions {\n  [propName: string]: SchemaNode;\n}\nexport interface Action extends Button {\n  actionType?:\n    | 'submit'\n    | 'copy'\n    | 'reload'\n    | 'ajax'\n    | 'dialog'\n    | 'drawer'\n    | 'jump'\n    | 'link'\n    | 'url'\n    | 'email'\n    | 'close'\n    | 'confirm'\n    | 'add'\n    | 'remove'\n    | 'delete'\n    | 'edit'\n    | 'cancel'\n    | 'next'\n    | 'prev'\n    | 'reset'\n    | 'validate'\n    | 'reset-and-submit'\n    | 'clear'\n    | 'clear-and-submit'\n    | 'toast'\n    | 'goto-step'\n    | 'goto-image'\n    | 'expand'\n    | 'collapse'\n    | 'step-submit'\n    | 'selectAll'\n    | 'changeTabKey';\n  api?: Api;\n  asyncApi?: Api;\n  payload?: any;\n  dialog?: SchemaNode;\n  to?: string;\n  target?: string;\n  link?: string;\n  url?: string;\n  cc?: string;\n  bcc?: string;\n  subject?: string;\n  body?: string;\n  mergeData?: boolean;\n  reload?: string;\n  messages?: {\n    success?: string;\n    failed?: string;\n  };\n  feedback?: any;\n  required?: Array<string>;\n  [propName: string]: any;\n}\n\nexport interface Location {\n  pathname: string;\n  search: string;\n  state: any;\n  hash: string;\n  key?: string;\n  query?: any;\n}\n\nexport interface PlainObject {\n  [propsName: string]: any;\n}\n\nexport interface RendererData {\n  [propsName: string]: any;\n  __prev?: RendererDataAlias;\n  __super?: RendererData;\n}\ntype RendererDataAlias = RendererData;\n\nexport type FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\n\nexport interface JSONSchema {\n  [propsName: string]: any;\n}\n\n// export type Omit<T, K extends keyof T & any> = Pick<T, Exclude<keyof T, K>>;\n// export type Override<M, N> = Omit<M, Extract<keyof M, keyof N>> & N;\n// export type ExtractProps<\n//   TComponentOrTProps\n// > = TComponentOrTProps extends React.ComponentType<infer P> ? P : never;\n\n/**\n * 事件跟踪的定义\n */\nexport interface EventTrack {\n  /**\n   * 事件类型，目前有以下几种\n   *\n   * api: 所有 fetcher 前调用\n   * url: 打开外部链接，组件有可能是 action 也有可能是 link\n   * link: 打开内部链接\n   * dialog: action 的弹框\n   * drawer: action 的抽出式弹框\n   * copy: action 里的复制\n   * reload: action 里的 reload\n   * email: action 里的 email\n   * prev: action 里的 prev\n   * next: action 里的 next\n   * cancel: action 里的 cancel\n   * close: action 里的 close\n   * submit: 有可能是 action 里的 submit，也有可能是表单提交\n   * confirm: action 里的 confirm\n   * add: action 里的 add\n   * reset: action 里的 reset\n   * reset-and-submit: action 里的 reset-and-submit\n   * formItemChange: 表单项内容变化\n   * formError: 表单验证失败\n   * formSubmit: 表单成功提交，在表单验证成功之后才会触发，这个可能会和 api 重合\n   * tabChange: tab 切换\n   * netError: api 报错\n   */\n  eventType:\n    | 'api'\n    | 'url'\n    | 'link'\n    | 'dialog'\n    | 'drawer'\n    | 'copy'\n    | 'reload'\n    | 'email'\n    | 'prev'\n    | 'next'\n    | 'cancel'\n    | 'close'\n    | 'submit'\n    | 'confirm'\n    | 'reset'\n    | 'reset-and-submit'\n    | 'formItemChange'\n    | 'tabChange';\n\n  /**\n   * 事件数据\n   */\n  eventData: ActionSchema | Api;\n}\n"
    ]
}