{
    "version": 3,
    "file": "schemaExtend.js",
    "sourceRoot": "",
    "sources": [
        "/src/schemaExtend.ts"
    ],
    "names": [],
    "mappings": ";;;AAIA,qCAA0C;AAC1C,yCAAwC;AAExC,4BAA4B;AAC5B,IAAA,yBAAe,EAAC,UAAU,MAAc,EAAE,QAAQ,EAAE,KAAW;;IAC7D,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;QACxC,qDACE,SAAS,EAAE,IAAI,IACZ,MAAM,KACT,QAAQ,EAAE,IAAI,EACd,MAAM,EAAE,UAAC,KAAU;gBACjB,IAAI,CAAC,IAAA,iBAAQ,EAAC,KAAK,CAAC,EAAE;oBACpB,OAAO,EAAE,CAAC;iBACX;gBACD,IAAM,GAAG,GAAe,EAAE,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;oBAC5B,IAAM,SAAS,GAAG,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;oBACpC,GAAG,CAAC,IAAI,CAAC;wBACP,GAAG,EAAE,GAAG,IAAI,EAAE;wBACd,KAAK,EACH,SAAS,KAAK,QAAQ;4BACtB,SAAS,KAAK,QAAQ;4BACtB,SAAS,KAAK,SAAS;4BACrB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;4BACZ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBACjC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,OAAO,GAAG,CAAC;YACb,CAAC,EACD,OAAO,EAAE,UAAC,KAAU;gBAClB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBACzB,OAAO,KAAK,CAAC;iBACd;gBACD,IAAM,GAAG,GAAQ,EAAE,CAAC;gBACpB,KAAK,CAAC,OAAO,CAAC,UAAC,IAAS;;oBACtB,IAAM,GAAG,GAAW,MAAA,IAAI,CAAC,GAAG,mCAAI,EAAE,CAAC;oBACnC,IAAI,KAAK,GAAQ,MAAA,MAAA,IAAI,CAAC,KAAK,mCAAI,MAAM,CAAC,YAAY,mCAAI,EAAE,CAAC;oBACzD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;wBACtD,IAAI;4BACF,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;yBAC3B;wBAAC,OAAO,CAAC,EAAE,GAAE;qBACf;oBAED,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBACnB,CAAC,CAAC,CAAC;gBACH,OAAO,GAAG,CAAC;YACb,CAAC,EACD,KAAK,EAAE;gBACL;oBACE,WAAW,EAAE,MAAA,MAAM,CAAC,cAAc,mCAAI,KAAK;oBAC3C,IAAI,EAAE,YAAY;oBAClB,MAAM,EAAE,IAAI;oBACZ,IAAI,EAAE,KAAK;oBACX,QAAQ,EAAE,IAAI;oBACd,gBAAgB,EAAE,IAAI;iBACvB;gBACD,MAAM,CAAC,cAAc;oBACnB,CAAC,CAAC;wBACE,WAAW,EAAE,MAAA,MAAM,CAAC,gBAAgB,mCAAI,OAAO;wBAC/C,SAAS,EAAE,MAAM,CAAC,cAAc;wBAChC,UAAU,EAAE,IAAI;wBAChB,IAAI,EAAE,OAAO;qBACd;oBACH,CAAC,CAAC;wBACE,WAAW,EAAE,MAAA,MAAM,CAAC,gBAAgB,mCAAI,OAAO;wBAC/C,IAAI,EAAE,MAAM,CAAC,SAAS,IAAI,YAAY;wBACtC,IAAI,EAAE,OAAO;qBACd;aACN,IACD;KACH;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC,CAAC",
    "sourcesContent": [
        "/**\n * 扩展 Schema，目前用于实现 input-kv\n */\nimport {Schema} from './types';\nimport {addSchemaFilter} from './factory';\nimport {isObject} from './utils/helper';\n\n// input-kv 实际上是 combo 的一种扩展\naddSchemaFilter(function (schema: Schema, renderer, props?: any) {\n  if (schema && schema.type === 'input-kv') {\n    return {\n      draggable: true,\n      ...schema,\n      multiple: true,\n      pipeIn: (value: any) => {\n        if (!isObject(value)) {\n          return [];\n        }\n        const arr: Array<any> = [];\n        Object.keys(value).forEach(key => {\n          const valueType = typeof value[key];\n          arr.push({\n            key: key || '',\n            value:\n              valueType === 'string' ||\n              valueType === 'number' ||\n              valueType === 'boolean'\n                ? value[key]\n                : JSON.stringify(value[key])\n          });\n        });\n        return arr;\n      },\n      pipeOut: (value: any) => {\n        if (!Array.isArray(value)) {\n          return value;\n        }\n        const obj: any = {};\n        value.forEach((item: any) => {\n          const key: string = item.key ?? '';\n          let value: any = item.value ?? schema.defaultValue ?? '';\n          if (typeof value === 'string' && value.startsWith('{')) {\n            try {\n              value = JSON.parse(value);\n            } catch (e) {}\n          }\n\n          obj[key] = value;\n        });\n        return obj;\n      },\n      items: [\n        {\n          placeholder: schema.keyPlaceholder ?? 'Key',\n          type: 'input-text',\n          unique: true,\n          name: 'key',\n          required: true,\n          validateOnChange: true\n        },\n        schema.valueComponent\n          ? {\n              placeholder: schema.valuePlaceholder ?? 'Value',\n              component: schema.valueComponent,\n              asFormItem: true,\n              name: 'value'\n            }\n          : {\n              placeholder: schema.valuePlaceholder ?? 'Value',\n              type: schema.valueType || 'input-text',\n              name: 'value'\n            }\n      ]\n    };\n  }\n\n  return schema;\n});\n"
    ]
}