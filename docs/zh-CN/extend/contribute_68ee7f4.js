amis.define('docs/zh-CN/extend/contribute.md', function(require, exports, module, define) {

  module.exports = {
    "title": "如何贡献代码",
    "html": "<div class=\"markdown-body\"><p>如果发现 amis 有不满足的功能，除了发 issue 等官方升级之外，最快的方法就是自己实现它，本文将介绍 amis 代码的基本结构，并一步步教你如何新增功能。</p>\n<h2><a class=\"anchor\" name=\"%E5%87%86%E5%A4%87%E5%BC%80%E5%A7%8B\" href=\"#%E5%87%86%E5%A4%87%E5%BC%80%E5%A7%8B\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>准备开始</h2><ol>\n<li>首先，你需要对 React 有基本了解，快速看一遍<a href=\"https://zh-hans.react.dev/learn\">官方文档</a>即可。</li>\n<li>在 github 上 fork amis 项目到自己的账号下。</li>\n<li>创建分支 <code>git checkout -b feat-xxx</code></li>\n</ol>\n<h2><a class=\"anchor\" name=\"amis-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84\" href=\"#amis-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>amis 代码结构</h2><p>amis 主要代码在 <code>src</code> 和 <code>scss</code> 目录下，这里主要介绍 <code>src</code> 下的结构：</p>\n<pre><code>.\n├── Root.tsx            // amis 最外层的渲染组件\n├── RootRenderer.tsx    // 用于 Root.tsx，拆分一下避免文件太大\n├── Schema.ts           // 基础类型定义\n├── SchemaRenderer.tsx  // amis 组件渲染的主要入口\n├── Scoped.tsx          // 数据域的实现\n├── WithRootStore.tsx   // 用于表单项中注入 root context\n├── WithStore.tsx       // 用于表单项中的数据存储及同步\n├── compat.ts           // 用于兼容旧版的配置，比如将 1.1.x 的配置转成 1.2.x\n├── components          // 大部分组件的实现在这里，也有很多内部使用的公共组件，这里的组件也能被其他 React 组件使用\n├── env.tsx             // 默认的 env，env 可以由外部传入，比如最常见的是 fetcher，这样就能自己接管网络请求，比如使用客户端中的网络请求方法\n├── envOverwrite.ts     // 用于在移动端或不同语言环境下使用不同配置\n├── factory.tsx         // amis 渲染的总入口，对外暴露的 render 方法就在这里\n├── icons               // 内置的 icon\n├── index.tsx           // amis 项目对外的主要入口\n├── locale              // 多语言翻译，目前只有英文和德语\n├── locale.tsx          // 多语言支持的实现\n├── renderers           // 将组件注册到 amis 渲染器中，这里大部分组件是直接引用 components 里的对应组件，也有部分简单的组件是直接在这里实现，\n├── store               // mst 存储\n├── theme.tsx           // 主题相关的实现\n├── themes              // 主题配置，有些主题效果不太好通过 css 实现，就放这了\n├── types.ts            // 一些公共的类型定义\n└── utils               // amis 内部用的常用工具方法\n</code></pre>\n<p>虽然文件很多，但对于组件开发而言，大部分情况下只需要关注 <code>components</code> 及 <code>renderers</code> 目录下的内容就行，如果发现某个组件不满足需求，可以先在 <code>renderers</code> 中找到这个组件，对齐进行修改就行。</p>\n<p>下面我们将以一个实际例子来介绍如何新增一个组件。</p>\n<h2><a class=\"anchor\" name=\"%E5%AE%9E%E6%88%98-avatar-%E7%BB%84%E4%BB%B6\" href=\"#%E5%AE%9E%E6%88%98-avatar-%E7%BB%84%E4%BB%B6\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实战：avatar 组件</h2><p>本文的目标是新增 avatar 头像组件，完整演示如何在 amis 中添加一个新组件，完整实现可以参考这个 <a href=\"https://github.com/baidu/amis/pull/1684/files\">pr</a>，本文基于这个例子进行了简化。</p>\n<h3><a class=\"anchor\" name=\"%E7%BC%96%E5%86%99-react-%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81%E4%BB%A3%E7%A0%81\" href=\"#%E7%BC%96%E5%86%99-react-%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>编写 React 组件代码代码</h3><p>由于这个组件并不需要被其他组件复用，所以只需要在 <code>renderers</code> 目录下实现就好，整体步骤是：</p>\n<p>新增 <code>src/renderers/Avatar.tsx</code> 文件，内容如下</p>\n<pre><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Renderer<span class=\"token punctuation\">,</span> RendererProps<span class=\"token punctuation\">,</span> AMISSchemaBase<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'amis-core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>resolveVariable<span class=\"token punctuation\">,</span> resolveVariableAndFilter<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'amis-core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// schema 是用来给编辑器提示用的，同时也作为组件 props 的类型定义</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AvatarSchema</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AMISSchemaBase</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 定义类型</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'avatar'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 下面都是这个组件的其他属性参数，这里定义了一个 src</span>\n  src<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 大部分组件都是直接继承 RendererProps，里面包含渲染组件所需的常用属性</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AvatarProps</span>\n  <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RendererProps</span><span class=\"token punctuation\">,</span>\n    Omit<span class=\"token operator\">&lt;</span>AvatarSchema<span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'className'</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 这个是组件的实现部分</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AvatarField</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component<span class=\"token operator\">&lt;</span>AvatarProps<span class=\"token punctuation\">,</span> object<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> classnames<span class=\"token operator\">:</span> cx<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 所有组件的 classname 都需要使用 cx 函数，并且以大写开头，这是为了方便支持多主题</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Avatar'</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>src<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 将组件注册到 amis 渲染器中</span>\n@<span class=\"token function\">Renderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'avatar'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AvatarFieldRenderer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AvatarField</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上面这段代码中，最核心的就是 <code>AvatarField</code>，这就是一个 React 组件。</p>\n<p>接下来还需要改两处地方：</p>\n<ul>\n<li>一个是 <code>src/Schema.ts</code>，需要在 <code>SchemaType</code> 里加入刚才定义的 <code>avatar</code>。</li>\n<li>另一个是 <code>src/index.tsx</code>，增加一行 <code>import &#39;./renders/Avatar&#39;;</code>。</li>\n</ul>\n<p>这样就在 amis 中新增了一个组件，接下来我们编写组件所需的样式。</p>\n<h3><a class=\"anchor\" name=\"%E7%BC%96%E5%86%99-scss-%E4%BB%A3%E7%A0%81\" href=\"#%E7%BC%96%E5%86%99-scss-%E4%BB%A3%E7%A0%81\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>编写 SCSS 代码</h3><p>新组件一般都需要对应的样式，首先创建 <code>scss/components/_avatar.scss</code> 文件，内容是：</p>\n<pre><code class=\"language-css\"><span class=\"token selector\">// 注意必须有这个 #</span><span class=\"token punctuation\">{</span>$ns<span class=\"token punctuation\">}</span><span class=\"token selector\">，它是为了方便生成主题，比如在 cxd 主题下，会转成 `.cxd-Avatar`\n.#</span><span class=\"token punctuation\">{</span>$ns<span class=\"token punctuation\">}</span><span class=\"token selector\">Avatar</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后修改 <code>scss/themes/_common.scss</code>，通过 <code>@import &#39;../components/avatar&#39;;</code> 引入这个新文件。</p>\n<p>amis 中的 css 命名使用 <a href=\"https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md\">SUIT</a> 规范，请按照这个规范编写。</p>\n<p>如果样式在不同主题下有区别，则需要使用 CSS 变量，在 <code>scss/_properties.scss</code> 里定义这个变量的默认值，让后在对应的主题文件中覆盖，比如 <code>scss/themes/_cxd-variables.scss</code>。</p>\n<h3><a class=\"anchor\" name=\"%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3\" href=\"#%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>编写文档</h3><p>新组件还需要有对应的文档来方便其他人了解和使用，首先在 <code>docs/zh-CN/components/avatar.md</code> 中创建文件，然后在 <code>examples/components/Components.tsx</code> 里引用。</p>\n<p>文档编写可以参考其他示例，需要演示这个组件的所有功能。</p>\n<h2><a class=\"anchor\" name=\"%E6%8F%90%E4%BA%A4-pr\" href=\"#%E6%8F%90%E4%BA%A4-pr\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>提交 PR</h2><p>使用 <code>git push --set-upstream origin feat-xxx</code> 创建远程分支。</p>\n<p>然后通过系统提示的 <code>https://github.com/xxx/amis/pull/new/feat-xxx</code> 链接来创建 PR，官方团队会在一个工作日左右回复。</p>\n</div>",
    "toc": {
      "label": "目录",
      "type": "toc",
      "children": [
        {
          "label": "准备开始",
          "fragment": "%E5%87%86%E5%A4%87%E5%BC%80%E5%A7%8B",
          "fullPath": "#%E5%87%86%E5%A4%87%E5%BC%80%E5%A7%8B",
          "level": 2
        },
        {
          "label": "amis 代码结构",
          "fragment": "amis-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84",
          "fullPath": "#amis-%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84",
          "level": 2
        },
        {
          "label": "实战：avatar 组件",
          "fragment": "%E5%AE%9E%E6%88%98-avatar-%E7%BB%84%E4%BB%B6",
          "fullPath": "#%E5%AE%9E%E6%88%98-avatar-%E7%BB%84%E4%BB%B6",
          "level": 2,
          "children": [
            {
              "label": "编写 React 组件代码代码",
              "fragment": "%E7%BC%96%E5%86%99-react-%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81%E4%BB%A3%E7%A0%81",
              "fullPath": "#%E7%BC%96%E5%86%99-react-%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81%E4%BB%A3%E7%A0%81",
              "level": 3
            },
            {
              "label": "编写 SCSS 代码",
              "fragment": "%E7%BC%96%E5%86%99-scss-%E4%BB%A3%E7%A0%81",
              "fullPath": "#%E7%BC%96%E5%86%99-scss-%E4%BB%A3%E7%A0%81",
              "level": 3
            },
            {
              "label": "编写文档",
              "fragment": "%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3",
              "fullPath": "#%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3",
              "level": 3
            }
          ]
        },
        {
          "label": "提交 PR",
          "fragment": "%E6%8F%90%E4%BA%A4-pr",
          "fullPath": "#%E6%8F%90%E4%BA%A4-pr",
          "level": 2
        }
      ],
      "level": 0
    }
  };

});
