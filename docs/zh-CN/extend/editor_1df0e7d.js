amis.define('docs/zh-CN/extend/editor.md', function(require, exports, module, define) {

  module.exports = {
    "title": "可视化编辑器",
    "html": "<div class=\"markdown-body\"><p>目前 amis 可视化编辑器也作为单独的 npm 包发布了出来，可以通过 npm 安装使用。</p>\n<p>在线体验：<a href=\"https://aisuda.github.io/amis-editor-demo\">https://aisuda.github.io/amis-editor-demo</a>\n示例代码：<a href=\"https://github.com/aisuda/amis-editor-demo\">https://github.com/aisuda/amis-editor-demo</a></p>\n<h2><a class=\"anchor\" name=\"%E4%BD%BF%E7%94%A8\" href=\"#%E4%BD%BF%E7%94%A8\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用</h2><p>目前有两个 npm 包：<code>amis-editor</code> 和 <code>amis-editor-core</code>。</p>\n<ul>\n<li><code>amis-editor-core</code> 包含了少量底层必要的功能实现，里面没有包含 amis 内置渲染器插件的任何实现。</li>\n<li><code>amis-editor</code> 基于 <code>amis-editor-core</code> 实现了 amis 内置的所有渲染器的可视化编辑器插件。</li>\n</ul>\n<p>如果你没有使用 amis 内置渲染器，推荐只使用 <code>amis-editor-core</code>，否则推荐使用 <code>amis-editor</code>。这里主要介绍 <code>amis-editor</code>, <code>amis-editor-core</code> 的使用方式是一样的。</p>\n<pre><code>npm i amis-editor\n</code></pre>\n<p>通过 <code>npm</code> 安装完后，在 React 项目中这样使用：</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Editor<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'amis-editor'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Editor</span></span>\n      <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a class=\"anchor\" name=\"%E5%B1%9E%E6%80%A7%E8%AF%B4%E6%98%8E\" href=\"#%E5%B1%9E%E6%80%A7%E8%AF%B4%E6%98%8E\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>属性说明</h2><ul>\n<li><code>value: Schema</code> amis json 配置，比如：<code>{type: &#39;page&#39;, body: &#39;contents...&#39;}</code></li>\n<li><code>onChange: (value: Schema) =&gt; void</code> 当编辑器修改的时候会触发。</li>\n<li><code>preview?: boolean</code> 是否为预览模式。</li>\n<li><code>autoFocus?: boolean</code> 是否自动聚焦第一个可编辑的组件。</li>\n<li><code>isMobile?: boolean</code> 是否为移动端模式，当为移动模式时，将采用 iframe 来预览。</li>\n<li><code>$schemaUrl?: string</code> 提供 amis 产出的 schema.json 的访问路径。主要用来给代码编辑模式提供属性提示信息。</li>\n<li><code>className?: string</code> 额外加个 css 类名，辅助样式定义。</li>\n<li><code>schemas?: JSONSchemaObject</code> 用来定义有哪些全局变量，辅助编辑器格式化绑定全局数据。</li>\n<li><code>theme?: string</code> amis 主题</li>\n<li><code>schemaFilter?: (schema: any, isPreview?: boolean) =&gt; any</code> 配置过滤器。可以用来实现 api proxy，比如原始配置中请求地址是 <code>http://baidu.com</code> 如果直接给编辑器预览请求，很可能会报跨域，可以自动转成 <code>/api/proxy?_url=xxxx</code>，走 proxy 解决。</li>\n<li><code>amisEnv?: any</code> 这是是给 amis 的 Env 对象，具体请前往 <a href=\"../start/getting-started#env\">env 说明</a></li>\n<li><code>disableBultinPlugin?: boolean</code> 是否禁用内置插件</li>\n<li><code>disablePluginList?: Array&lt;string&gt; | (id: string, plugin: PluginClass) =&gt; boolean</code> 禁用插件列表</li>\n<li><code>plugins?: Array&lt;PluginClass&gt;</code> 额外的自定义插件，具体看下面的说明。</li>\n<li><code>isHiddenProps?: (key: string) =&gt; boolean</code> 是否为隐藏属性，隐藏属性是在配置中有，但是在代码编辑器中不可见。</li>\n<li><code>actionOptions?: any</code> 事件动作面板相关配置</li>\n<li><code>onInit?: ( event: PluginEvent&lt;EventContext &amp; {data: EditorManager;}&gt;) =&gt; void</code> 初始化事件</li>\n<li><code>onActive?: (event: PluginEvent&lt;ActiveEventContext&gt;) =&gt; void</code> 点选事件</li>\n<li><code>beforeInsert?: (event: PluginEvent&lt;InsertEventContext&gt;) =&gt; false | void</code> 插入节点前事件</li>\n<li><code>afterInsert?: (event: PluginEvent&lt;InsertEventContext&gt;) =&gt; void;</code> 插入节点后事件</li>\n<li><code>beforeUpdate?: (event: PluginEvent&lt;ChangeEventContext&gt;) =&gt; false | void;</code> 面板里面编辑修改前的事件。可通过 event.preventDefault() 阻止。</li>\n<li><code>afterUpdate?: (event: PluginEvent&lt;ChangeEventContext&gt;) =&gt; false | void;</code> 面板里面编辑修改后的事件。</li>\n<li><code>beforeReplace?: (event: PluginEvent&lt;ReplaceEventContext&gt;) =&gt; false | void;</code> 更新渲染器前的事件，或者右键粘贴配置。可通过 event.preventDefault() 阻止。</li>\n<li><code>afterReplace?: (event: PluginEvent&lt;ReplaceEventContext&gt;) =&gt; void</code> 更新渲染器后的事件，或者右键粘贴配置。</li>\n<li><code>beforeMove?: (event: PluginEvent&lt;MoveEventContext&gt;) =&gt; false | void</code> 移动节点前触发，包括上移，下移。可通过 event.preventDefault() 阻止。</li>\n<li><code>afterMove?: (event: PluginEvent&lt;MoveEventContext&gt;) =&gt; void</code> 移动节点后触发，包括上移，下移。</li>\n<li><code>beforeDelete?: (event: PluginEvent&lt;DeleteEventContext&gt;) =&gt; false | void</code> 删除前触发。可通过 event.preventDefault() 阻止。</li>\n<li><code>afterDelete?: (event: PluginEvent&lt;DeleteEventContext&gt;) =&gt; void</code> 删除后触发</li>\n<li><code>beforeResolveEditorInfo?: ( event: PluginEvent&lt;RendererInfoResolveEventContext&gt; ) =&gt; false | void</code> 收集渲染器信息前触发。可通过 event.preventDefault() 阻止，如果阻止了，则目标组件不可编辑。</li>\n<li><code>afterResolveEditorInfo?: ( event: PluginEvent&lt;RendererInfoResolveEventContext&gt; ) =&gt; void</code> 收集渲染器信息后触发</li>\n<li><code>beforeResolveJsonSchema?: ( event: PluginEvent&lt;RendererJSONSchemaResolveEventContext&gt; ) =&gt; false | void</code> 基于渲染器获取配置的 jsonSchema 信息。可通过 event.preventDefault() 阻止。</li>\n<li><code>afterResolveJsonSchema?: ( event: PluginEvent&lt;RendererJSONSchemaResolveEventContext&gt; ) =&gt; void</code> 基于渲染器获取配置的 jsonSchema 信息。</li>\n<li><code>onDndAccept?: (event: PluginEvent&lt;DragEventContext&gt;) =&gt; false | void</code> 当将组件拖入某个容器时触发，用来决定接收不接收本次拖拽。</li>\n<li><code>onBuildPanels?: (event: PluginEvent&lt;BuildPanelEventContext&gt;) =&gt; void</code> 构建右侧面板的事件，可以干预右侧面板的生成，可以新增面板。</li>\n<li><code>onBuildContextMenus?: (event: PluginEvent&lt;ContextMenuEventContext&gt;) =&gt; void</code> 构建上下文菜单的事件</li>\n<li><code>onBuildToolbars?: (event: PluginEvent&lt;BaseEventContext&gt;) =&gt; void</code> 构建点选框顶部 icon 按钮事件</li>\n<li><code>onSelectionChange?: (event: PluginEvent&lt;SelectionEventContext&gt;) =&gt; void</code> 当点选发生变化的事件</li>\n<li><code>onPreventClick?: ( event: PluginEvent&lt;PreventClickEventContext&gt; ) =&gt; false | void</code> 禁用内部点击事件的事件，可以用来控制是否禁用编辑态内置组件的一些点选能力。</li>\n<li><code>onWidthChangeStart?: </code> 当渲染器标记为 <code>widthMutable</code> 时会触发宽度变动事件</li>\n<li><code>onHeightChangeStart?: </code> 当渲染器标记为 <code>heightMutable</code> 时会触发宽度变动事件</li>\n<li><code>onSizeChangeStart?: </code> 当渲染器同时标记为 <code>widthMutable</code> 和 <code>heightMutable</code> 时会触发变动事件</li>\n</ul>\n<h2><a class=\"anchor\" name=\"%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自定义插件</h2><p>开始之前，需要先自定义一个 amis 渲染器，然后再添加编辑器插件，让这个自定义渲染器可以在编辑器中可编辑。</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Renderer<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'amis'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Renderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'my-renderer'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'my-renderer'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRenderer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyRendererProps</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'world'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello </span><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>通过以上代码，amis 配置中通过 <code>type</code> 指定为 <code>my-renderer</code> 即可启用此组件。</p>\n<p>接下来添加编辑器插件，添加插件的方式有两种。</p>\n<ul>\n<li>registerEditorPlugin 注册全局插件。</li>\n<li>不注册，调用 <Editor> 的时候时候通过 plugins 属性传入。</li>\n</ul>\n<p>效果都一样，重点还是怎么写个 Plugin，示例：</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>BasePlugin<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'amis-editor'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRendererPlugin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BasePlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里要跟对应的渲染器名字对应上</span>\n  <span class=\"token comment\">// 注册渲染器的时候会要求指定渲染器名字</span>\n  rendererName <span class=\"token operator\">=</span> <span class=\"token string\">'my-renderer'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 暂时只支持这个，配置后会开启代码编辑器</span>\n  $schema <span class=\"token operator\">=</span> <span class=\"token string\">'/schemas/UnkownSchema.json'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 用来配置名称和描述</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">'自定义渲染器'</span><span class=\"token punctuation\">;</span>\n  description <span class=\"token operator\">=</span> <span class=\"token string\">'这只是个示例'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// tag，决定会在哪个 tab 下面显示的</span>\n  tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'自定义'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'表单项'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 图标</span>\n  icon <span class=\"token operator\">=</span> <span class=\"token string\">'fa fa-user'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 用来生成预览图的</span>\n  previewSchema <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'my-renderer'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'demo'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 拖入组件里面时的初始数据</span>\n  scaffold <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'my-renderer'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'233'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 右侧面板相关</span>\n  panelTitle <span class=\"token operator\">=</span> <span class=\"token string\">'自定义组件'</span><span class=\"token punctuation\">;</span>\n  panelBody <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'tabs'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">tabsMode</span><span class=\"token operator\">:</span> <span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'m-t-n-xs'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">contentClassName</span><span class=\"token operator\">:</span> <span class=\"token string\">'no-border p-l-none p-r-none'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">tabs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'常规'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'target'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'Target'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'input-text'</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'外观'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>定义好 plugin 后，可以有两种方式启用。</p>\n<pre><code class=\"language-jsx\"><span class=\"token comment\">// 方式 1，注册默认插件，所有编辑器实例都会自动实例话。</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>registerEditorPlugin<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'amis-editor'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">registerEditorPlugin</span><span class=\"token punctuation\">(</span>MyRendererPlugin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 方式2，只让某些编辑器启用</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Editor</span></span> <span class=\"token attr-name\">plugins</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>MyRendererPlugin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"/amis/static/editor-plugin_52aaea6.png\" alt=\"editor-plugin\"></p>\n<h2><a class=\"anchor\" name=\"%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\" href=\"#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>工作原理</h2><p>编辑器在渲染 amis 配置的时候，会把所有的 json（配置） 节点都自动加个 <code>$$id</code> 唯一 id。然后复写了 <code>rendererResolver</code> 方法。某个节点 {type: &#39;xxxx&#39;} 在找到对应 amis 组件渲染前，都会调用这个方法。\n这个方法会在渲染之前，基于 schema、渲染器信息，通过插件去收集编辑器信息，如果收集到了，会额外的通过一个 <code>Wrapper</code> 包裹。这个 <code>Wrapper</code> 主要是自动把 <code>$$id</code> 写入到 dom 的属性上<code>data-editor-id=&quot;$$id&quot;</code>。这样鼠标点击的时候，能够根据 dom 上的标记知道是哪个 json 节点，同时根据渲染器编辑器信息，能够生成对应的配置面板，并把对应 json 的节点做配置修改。</p>\n<p>有些组件是带区域的，所以除了 dom 上标记节点信息外，还需要标记区域信息。节点能够通过 <code>Wrapper</code> 自动包裹来实现，但是区域则不能，这个要去分析组件本身是怎么实现。最终目的是要通过 <code>RegionWrapper</code> 去包裹对应 JSX.Element 来完成标记。这个 <code>RegionWrapper</code> 会自动完成 dom 的标记 <code>data-region=&quot;xxx&quot; data-region-host=&quot;$$id&quot;</code>，这样点击到这个 dom 的时候，能知道是哪个组件的哪个区域，这样就能往里面拖入新组件。</p>\n<p>左侧的组件列表主要是将收集到的渲染器编辑器信息做个汇总展示，可拖入到指定区域内。</p>\n<h2><a class=\"anchor\" name=\"%E6%B3%A8%E5%86%8C%E6%B8%B2%E6%9F%93%E5%99%A8%E4%BF%A1%E6%81%AF\" href=\"#%E6%B3%A8%E5%86%8C%E6%B8%B2%E6%9F%93%E5%99%A8%E4%BF%A1%E6%81%AF\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注册渲染器信息</h2><p>如果想要渲染器在编辑器里面可点选，必须有插件提供这个渲染器的信息，这样才会被 <code>Wrapper</code> 包裹，才会在对应的 dom 上带上标记，才能点选。</p>\n<p>在插件中可以通过实现 <code>getRendererInfo</code> 方法来注册渲染器信息，如果某个插件设置了 <code>rendererName</code> 和 <code>name</code> 属性，同时它继承 <code>BasePlugin</code> 的，则会自动完成注册逻辑。</p>\n<pre><code class=\"language-ts\"><span class=\"token comment\">/**\n* 如果配置里面有 rendererName 自动返回渲染器信息。\n* @param renderer\n*/</span>\n<span class=\"token function\">getRendererInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\nrenderer<span class=\"token punctuation\">,</span>\nschema\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> RendererInfoResolveEventContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BasicRendererInfo <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> plugin<span class=\"token operator\">:</span> PluginInterface <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    schema<span class=\"token punctuation\">.</span>$$id <span class=\"token operator\">&amp;&amp;</span>\n    plugin<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span>\n    plugin<span class=\"token punctuation\">.</span>rendererName <span class=\"token operator\">&amp;&amp;</span>\n    plugin<span class=\"token punctuation\">.</span>rendererName <span class=\"token operator\">===</span> renderer<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// renderer.name 会从 renderer.type 中取值</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> curPluginName <span class=\"token operator\">=</span> plugin<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 复制部分信息出去</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> curPluginName<span class=\"token punctuation\">,</span>\n      regions<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>regions<span class=\"token punctuation\">,</span>\n      patchContainers<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>patchContainers<span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// wrapper: plugin.wrapper,</span>\n      vRendererConfig<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>vRendererConfig<span class=\"token punctuation\">,</span>\n      wrapperProps<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>wrapperProps<span class=\"token punctuation\">,</span>\n      wrapperResolve<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>wrapperResolve<span class=\"token punctuation\">,</span>\n      filterProps<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>filterProps<span class=\"token punctuation\">,</span>\n      $schema<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>$schema<span class=\"token punctuation\">,</span>\n      renderRenderer<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>renderRenderer<span class=\"token punctuation\">,</span>\n      multifactor<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>multifactor<span class=\"token punctuation\">,</span>\n      scaffoldForm<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>scaffoldForm<span class=\"token punctuation\">,</span>\n      disabledRendererPlugin<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>disabledRendererPlugin<span class=\"token punctuation\">,</span>\n      isBaseComponent<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>isBaseComponent<span class=\"token punctuation\">,</span>\n      rendererName<span class=\"token operator\">:</span> plugin<span class=\"token punctuation\">.</span>rendererName\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>RendererInfoResolveEventContext</code> 主要包含以下信息：</p>\n<ul>\n<li><code>schema</code> 渲染器的配置</li>\n<li><code>schemaPath</code> 渲染器在整个配置中的路径信息</li>\n<li><code>renderer</code> 渲染器信息，即注册 amis 渲染器的时候注册的渲染器信息</li>\n</ul>\n<p>插件中可以基于这些信息来决定要不要注册编辑器插件，如果注册了则此渲染器可在编辑器中点选。可注册的信息主要包含：</p>\n<ul>\n<li><code>name: string</code> 渲染器名字，决定点选高亮框的名称显示</li>\n<li><code>searchKeywords?: string</code> 组件关键字，用来辅助组件列表搜索</li>\n<li><code>description?: string</code> 在组件列表中展示有用</li>\n<li><code>docLink?: string</code> 组件文档链接</li>\n<li><code>previewSchema?: any</code> 用来生成预览图</li>\n<li><code>tags ?:string | Array&lt;string&gt;</code> 分类, 决定会在哪个 tab 下面显示的</li>\n<li><code>scaffold ?: any</code> 在编辑器中拖入该组件时生成的默认配置项</li>\n<li><code>scaffolds ?: Array&lt;any&gt;</code> 脚手架也可以是多个，比如 Grid 组件，两栏，三栏组件都是用 grid 构建的，只是拖入时的初始配置不一样。</li>\n<li><code>$schema?: string</code> json schema 定义。如： <code>/schemas/UnkownSchema.json</code> 目前这个不支持自定义，只有内置渲染器才有这些信息。</li>\n<li><code>isBaseComponent?: boolean</code> 是否为内置渲染器，决定组建列表出现在内置 tab 下还是自定义 tab 下。</li>\n<li><code>disabledRendererPlugin?: boolean</code> 新增属性，用于判断是否出现在组件面板中，默认为 false，为 true 则不展示</li>\n<li><code>regions?: Array&lt;RegionConfig&gt;</code> 定义这个组件一共有哪些区域，比如页面组件包含的区域有：aside、body、toolbar 等。</li>\n<li><code>patchContainers?: Array&lt;string&gt;</code> 哪些容器属性需要自动转成数组的。如果不配置默认就从 regions 里面读取。</li>\n<li><code>overrides?: { [propName: string]: Function;}</code> 用来复写渲染器原型链上的方法，通常不需要这个。下面单独的篇章介绍</li>\n<li><code>vRendererConfig?: VRendererConfig</code> 虚拟渲染器的配置项，有时候需要给那些并不是渲染器的组件添加点选编辑功能。 比如： Tabs 下面的 Tab, 这个并不是个渲染器，但是需要可以点选修改内容。</li>\n<li><code>wrapperResolve?: (dom: HTMLElement) =&gt; HTMLElement | Array&lt;HTMLElement&gt;</code> 返回哪些 dom 节点，需要自动加上 data-editor-id 属性， 目前只有 TableCell 里面用到了，就它需要同时给某一列下所有 td 都加上那个属性。</li>\n<li><code>wrapperProps?: Record&lt;string, any&gt;</code> 默认下发哪些属性，如果要动态下发，请使用 filterProps, 比如，table 渲染器，默认下发 resizeable: false, 这样编辑的时候就不会出现列的宽度可调整功能。这个是运行态的功能，不应该出现在编辑态里面。</li>\n<li><code>filterProps?: (props: any, node: EditorNodeType) =&gt; Record&lt;string, any&gt;</code> 修改一些属性，一般用来干掉 $$id，或者渲染假数据, 这样它的孩子节点就不能直接点选编辑了，比如 Combo。</li>\n<li><code>renderRenderer?: (props: any, info: RendererInfo) =&gt; JSX.Element</code> 有些没有视图的组件，可以自己输出点内容，否则没办法点选编辑。</li>\n<li><code>multifactor?: boolean</code> 是否有多重身份？比如 CRUD 即是 CRUD 又可能是 Table，表格的列，即是表格列，也可能是其他文本框。 配置了这个后会自动添加多个 Panel 面板来编辑。</li>\n<li><code>scaffoldForm?: ScaffoldForm</code> 右键的时候是否出现重新构建，靠这个。同时首次新增此渲染器的时候会出现一个脚手架弹窗。下面会有单独内容介绍。</li>\n</ul>\n<h2><a class=\"anchor\" name=\"%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E5%8F%B3%E4%BE%A7%E9%85%8D%E7%BD%AE%E9%9D%A2%E6%9D%BF\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E5%8F%B3%E4%BE%A7%E9%85%8D%E7%BD%AE%E9%9D%A2%E6%9D%BF\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何定义右侧配置面板</h2><p>当点选某个组件的时候，编辑器内部会触发面板构建动作，每个插件都可以通过实现 <code>buildEditorPanel</code> 来插入右侧面板。</p>\n<pre><code class=\"language-tsx\"><span class=\"token comment\">/**\n * 配置了 panelControls 自动生成配置面板\n * @param context\n * @param panels\n */</span>\n<span class=\"token function\">buildEditorPanel</span><span class=\"token punctuation\">(</span>\n  context<span class=\"token operator\">:</span> BuildPanelEventContext<span class=\"token punctuation\">,</span>\n  panels<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>BasicPanelItem<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  panels<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    key<span class=\"token operator\">:</span> <span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'设置'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">面板内容</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/amis/static/editor-panel_32a0b2b.png\" alt=\"editor-panel\"></p>\n<p>通常右侧面板都是表单配置，使用 amis 配置就可以完成。所以推荐的做法是，直接在这个插件上面定义 <code>panelBody</code> 或者 <code>panelBodyCreator</code> 即可。</p>\n<pre><code class=\"language-js\">panelBody <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'tabs'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">tabsMode</span><span class=\"token operator\">:</span> <span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'m-t-n-xs'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">contentClassName</span><span class=\"token operator\">:</span> <span class=\"token string\">'no-border p-l-none p-r-none'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">tabs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'常规'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'target'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'Target'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'input-text'</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'外观'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"/amis/static/editor-panel2_888c37c.png\" alt=\"editor-panel2\"></p>\n<p><code>panelBodyCreator</code> 相对于 <code>panelBody</code> 的区别是，可以基于一些上下文信息来构建不同的表单。比如在表单里面的按钮，和在表单外面的按钮配置项不一样。</p>\n<pre><code class=\"language-js\"><span class=\"token function-variable function\">panelBodyCreator</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">context</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'tabs'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">tabsMode</span><span class=\"token operator\">:</span> <span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'m-t-n-xs'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">contentClassName</span><span class=\"token operator\">:</span> <span class=\"token string\">'no-border p-l-none p-r-none'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">tabs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'常规'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'target'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'Target'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'input-text'</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'外观'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>context</code> 中主要包含：</p>\n<ul>\n<li><code>selections</code> 当前选中的渲染器，可能是多个</li>\n<li><code>node</code> 节点信息</li>\n<li><code>schema</code> 当前组件配置</li>\n<li><code>info</code> 注册的渲染器编辑器信息</li>\n</ul>\n<h2><a class=\"anchor\" name=\"%E5%A6%82%E4%BD%95%E6%89%A9%E5%85%85%E6%B8%B2%E6%9F%93%E5%99%A8%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE\" href=\"#%E5%A6%82%E4%BD%95%E6%89%A9%E5%85%85%E6%B8%B2%E6%9F%93%E5%99%A8%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何扩充渲染器容器配置</h2><p>开始之前请先阅读 <a href=\"#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">工作原理</a>，如果是容器组件，还需要在对应 React 虚拟 dom 前包裹 <code>RegionWrapper</code>, 来完成 dom 标记。如果在注册编辑器信息的时候定义了 <code>regions</code> 信息，则会根据这个信息，自动完成 <code>RegionWrapper</code> 包裹。</p>\n<p>这里先看简单的情况，比如 <code>container</code> 组件。它在 amis 大概是这样实现的容器功能。通过 <code>this.props.render(&#39;body&#39;, schema)</code> 来实现的容器功能。</p>\n<pre><code class=\"language-tsx\"><span class=\"token function\">renderBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token punctuation\">,</span>\n    body<span class=\"token punctuation\">,</span>\n    render<span class=\"token punctuation\">,</span>\n    classnames<span class=\"token operator\">:</span> cx<span class=\"token punctuation\">,</span>\n    bodyClassName<span class=\"token punctuation\">,</span>\n    disabled\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Container-body'</span><span class=\"token punctuation\">,</span> bodyClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">,</span> body <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>disabled<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在插件中像这样定义 <code>regions</code> 即可使得 <code>container</code> 有了 <code>body</code> 这个 region。</p>\n<pre><code class=\"language-ts\">regions<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>RegionConfig<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    key<span class=\"token operator\">:</span> <span class=\"token string\">'body'</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> <span class=\"token string\">'内容区'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>插件内部会根据这个信息，自动在 <code>render(&#39;body&#39;, body as any, {disabled})</code> 的地方包裹个 <code>RegionWrapper</code>。这种方式主要是通过篡改 <code>this.props.render</code> 方法实现的。</p>\n<p>再看个复杂点的情况如 <code>Form</code> 的 <code>actions</code> 区块输出。</p>\n<pre><code class=\"language-tsx\"><span class=\"token function\">renderFooter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>actions <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>actions<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    store<span class=\"token punctuation\">,</span>\n    render<span class=\"token punctuation\">,</span>\n    classnames<span class=\"token operator\">:</span> cx<span class=\"token punctuation\">,</span>\n    showErrorMsg<span class=\"token punctuation\">,</span>\n    showLoading<span class=\"token punctuation\">,</span>\n    show\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Modal-footer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>showLoading <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> store<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      <span class=\"token punctuation\">(</span>showErrorMsg <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> store<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dialog-info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>showLoading <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Spinner</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">show</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">.</span>loading<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n          <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">.</span>error <span class=\"token operator\">&amp;&amp;</span> showErrorMsg <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dialog-error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">action/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          data<span class=\"token operator\">:</span> store<span class=\"token punctuation\">.</span>formData<span class=\"token punctuation\">,</span>\n          onAction<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleAction<span class=\"token punctuation\">,</span>\n          key<span class=\"token punctuation\">,</span>\n          disabled<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">||</span> store<span class=\"token punctuation\">.</span>loading <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>show\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>像这个区域，它应该包裹在 <code>.Modal-footer</code> 里面，没办法通过第一种方式实现。所以第二种配置方式是：</p>\n<pre><code class=\"language-ts\">regions<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>RegionConfig<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    key<span class=\"token operator\">:</span> <span class=\"token string\">'actions'</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> <span class=\"token string\">'按钮组'</span><span class=\"token punctuation\">,</span>\n    renderMethod<span class=\"token operator\">:</span> <span class=\"token string\">'renderFooter'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">wrapperResolve</span><span class=\"token operator\">:</span> dom <span class=\"token operator\">=></span> dom\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>通过 <code>renderMethod</code> 信息，去篡改渲染器（React Component）的原型链，在这个方法里面自动包裹 <code>RegionWrapper</code>。包裹也有多种策略，有时候要包裹在外面，有时要包裹在第一个虚拟 dom 里面。</p>\n<p>更多配置信息请参考以下 <code>RegionConfig</code> 信息</p>\n<ul>\n<li><code>key: string</code> 简单情况，如果区域直接用的 render(&#39;region&#39;, subSchema)，这种只需要配置 key 就能简单插入 Region 节点。</li>\n<li><code>label: string</code> 区域用来显示的名字。</li>\n<li><code>placeholder?: string</code> 区域占位字符，用于提示</li>\n<li><code>matchRegion?: (elem: JSX.Element | undefined | null, component: JSX.Element ) =&gt; boolean</code> 对于复杂的控件需要用到这个配置。如果配置了，则遍历 react dom 直到目标节点调换成 Region 节点，如果没有配置这个，但是又配置了 renderMethod 方法，那就直接将 renderMethod 里面返回的 react dom 直接包一层 Region</li>\n<li><code>renderMethod?: string</code> 指定要覆盖哪个方法。</li>\n<li><code>rendererName?: string</code> 通常是 hack 当前渲染器，但有时候当前渲染器其实是组合的别的渲染器。如果要篡改别的渲染器，则通过渲染器名字指定。</li>\n<li><code>insertPosition?: &#39;outter&#39; | &#39;inner&#39;</code> 当配置 renderMethod 的时候会自动把 Region 插入进去。 默认是 outter 模式，有时候可能需要配置成 inner， 比如 renderMethod 为 render 的时候。</li>\n<li><code>optional?: boolean</code> 是否为可选容器，如果是可选容器，不会强制自动创建成员</li>\n<li><code>renderMethodOverride?: (regions: Array&lt;RegionConfig&gt;, insertRegion: (component: JSX.Element, dom: JSX.Element, regions: Array&lt;RegionConfig&gt;, info: RendererInfo, manager: EditorManager) =&gt; JSX.Element ) =&gt; Function</code> 有时候有些包括是需要其他条件的，所以要自己写包裹逻辑。比如 Panel 里面的 renderBody</li>\n<li><code>wrapper?: React.ComponentType&lt;RegionWrapperProps&gt;</code> 用来指定用什么组件包裹，默认是 RegionWrapper</li>\n<li><code>wrapperResolve?: (dom: HTMLElement) =&gt; HTMLElement</code> 返回需要添加 data-region 的 dom 节点。</li>\n<li><code>modifyGhost?: (ghost: HTMLElement, schema?: any) =&gt; void</code> 当拖入到这个容器时，是否需要修改一下 ghost 结构？</li>\n<li><code>dndMode?: string</code> dnd 拖拽模式。比如 table 那种需要配置成 position-h</li>\n<li><code>accept?: (json: any) =&gt; boolean</code> 可以用来判断是否允许拖入当前节点。</li>\n</ul>\n<h2><a class=\"anchor\" name=\"%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E7%BC%96%E8%BE%91%E5%99%A8%E8%84%9A%E6%89%8B%E6%9E%B6\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E7%BC%96%E8%BE%91%E5%99%A8%E8%84%9A%E6%89%8B%E6%9E%B6\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何定义编辑器脚手架</h2><p>如果希望拖入组件的时候，弹出个配置框，基于用户不同的配置，生成不同的初始数据。则这里需要用到 <code>scaffoldForm</code> 配置。</p>\n<pre><code class=\"language-tsx\">scaffoldForm <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'标题'</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'target'</span><span class=\"token punctuation\">,</span>\n      label<span class=\"token operator\">:</span> <span class=\"token string\">'Target'</span><span class=\"token punctuation\">,</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'input-text'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"/amis/static/editor-scaffold-form_213d2d8.png\" alt=\"editor-scaffold-form\"></p>\n<p>可用配置</p>\n<ul>\n<li><code>title</code> 脚手架框的标题</li>\n<li><code>body</code> 表单项配置，参考 amis 的 form 配置</li>\n<li><code>mode</code> 表单默认展示方式，参考 amis 的 form 配置</li>\n<li><code>size</code> 弹窗大小，参考 amis 的 dialog 配置</li>\n<li><code>initApi</code> 初始化接口</li>\n<li><code>api</code> 提交接口</li>\n<li><code>validate</code> 整体验证钩子</li>\n<li><code>pipeIn?: (value: any) =&gt; any</code> schema 配置转脚手架配置</li>\n<li><code>pipeOut?: (value: any) =&gt; any</code> 脚手架配置转 schema 配置</li>\n<li><code>canRebuild?: boolean</code> 是否允许重新构建</li>\n</ul>\n<h2><a class=\"anchor\" name=\"%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E7%82%B9%E9%80%89%E6%A1%86%E9%A1%B6%E9%83%A8%E8%8F%9C%E5%8D%95\" href=\"#%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E7%82%B9%E9%80%89%E6%A1%86%E9%A1%B6%E9%83%A8%E8%8F%9C%E5%8D%95\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何构建点选框顶部菜单</h2><p>插件中定义 <code>buildEditorToolbar</code> 方法即可添加点选框顶部菜单</p>\n<pre><code class=\"language-tsx\"><span class=\"token function\">buildEditorToolbar</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> BaseEventContext<span class=\"token punctuation\">,</span> toolbars<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>BasicToolbarItem<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  toolbars<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    iconSvg<span class=\"token operator\">:</span> <span class=\"token string\">'left-arrow-to-left'</span><span class=\"token punctuation\">,</span>\n    tooltip<span class=\"token operator\">:</span> <span class=\"token string\">'向前插入组件'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// level: 'special',</span>\n    placement<span class=\"token operator\">:</span> <span class=\"token string\">'bottom'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// placement: vertical ? 'bottom' : 'right',</span>\n    <span class=\"token comment\">// className: vertical</span>\n    <span class=\"token comment\">//   ? 'ae-InsertBefore is-vertical'</span>\n    <span class=\"token comment\">//   : 'ae-InsertBefore',</span>\n    <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">.</span><span class=\"token function\">showInsertPanel</span><span class=\"token punctuation\">(</span>\n        regionNode<span class=\"token punctuation\">.</span>region<span class=\"token punctuation\">,</span>\n        regionNode<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n        regionNode<span class=\"token punctuation\">.</span>preferTag<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'insert'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n        id\n      <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a class=\"anchor\" name=\"%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8A%9F%E8%83%BD%E8%8F%9C%E5%8D%95\" href=\"#%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8A%9F%E8%83%BD%E8%8F%9C%E5%8D%95\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何构建上下文功能菜单</h2><p>插件中定义 <code>buildEditorContextMenu</code> 方法即可添加上下文功能菜单</p>\n<pre><code class=\"language-tsx\"><span class=\"token function\">buildEditorContextMenu</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">,</span> schema<span class=\"token punctuation\">,</span> region<span class=\"token punctuation\">,</span> selections<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> ContextMenuEventContext<span class=\"token punctuation\">,</span>\n    menus<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>ContextMenuItem<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    menus<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      label<span class=\"token operator\">:</span> <span class=\"token string\">'重复一份'</span><span class=\"token punctuation\">,</span>\n      icon<span class=\"token operator\">:</span> <span class=\"token string\">'copy-icon'</span><span class=\"token punctuation\">,</span>\n      disabled<span class=\"token operator\">:</span> selections<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>duplicatable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">onSelect</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> manager<span class=\"token punctuation\">.</span><span class=\"token function\">duplicate</span><span class=\"token punctuation\">(</span>selections<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a class=\"anchor\" name=\"%E5%A6%82%E4%BD%95%E8%AE%A9%E6%B8%B2%E6%9F%93%E5%99%A8%E5%8F%AF%E9%80%9A%E8%BF%87%E6%8B%96%E6%8B%BD%E8%B0%83%E6%95%B4%E5%AE%BD%E9%AB%98\" href=\"#%E5%A6%82%E4%BD%95%E8%AE%A9%E6%B8%B2%E6%9F%93%E5%99%A8%E5%8F%AF%E9%80%9A%E8%BF%87%E6%8B%96%E6%8B%BD%E8%B0%83%E6%95%B4%E5%AE%BD%E9%AB%98\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何让渲染器可通过拖拽调整宽高</h2><p>首先组件需要支持宽高设置，为了演示效果，将之前的 <code>my-renderer</code> 改成如下代码：</p>\n<pre><code class=\"language-tsx\">@<span class=\"token function\">Renderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'my-renderer'</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'my-renderer'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRenderer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    target<span class=\"token operator\">:</span> <span class=\"token string\">'world'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>width<span class=\"token operator\">:</span> width <span class=\"token operator\">||</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> height <span class=\"token operator\">||</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Hello </span><span class=\"token punctuation\">{</span>target<span class=\"token punctuation\">}</span><span class=\"token plain-text\">!\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>然后<a href=\"https://github.com/aisuda/amis-editor-demo?tab=readme-ov-file#%E6%89%A9%E5%85%85%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BC%96%E8%BE%91%E5%99%A8%E6%96%B0%E7%89%88\">插件</a>中修改继承类，即可完成拖拽调整宽高：</p>\n<pre><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>LayoutBasePlugin<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'amis-editor'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRendererPlugin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LayoutBasePlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><img src=\"/amis/static/editor-resize_43e4fce.png\" alt=\"editor-resize\"></p>\n<h2><a class=\"anchor\" name=\"%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE\" href=\"#%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何开启快速配置</h2><p><img src=\"/amis/static/editor-inline-edit_edd5706.png\" alt=\"editor-inline-edit\"></p>\n<p>直接配置 <code>popOverBody</code> 即可</p>\n<pre><code class=\"language-tsx\">popOverBody <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'target'</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> <span class=\"token string\">'Target'</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'input-text'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a class=\"anchor\" name=\"minieditor\" href=\"#minieditor\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MiniEditor</h2><p>除了暴露 <code>Editor</code> 外，还有一个简单的编辑器 <code>MiniEditor</code>。与 <code>Editor</code> 的区别主要是，<code>MiniEditor</code> 只有编辑器区，没有左右两侧面板，像爱速搭的模型页面设计器就是基于此实现的。</p>\n</div>",
    "toc": {
      "label": "目录",
      "type": "toc",
      "children": [
        {
          "label": "使用",
          "fragment": "%E4%BD%BF%E7%94%A8",
          "fullPath": "#%E4%BD%BF%E7%94%A8",
          "level": 2
        },
        {
          "label": "属性说明",
          "fragment": "%E5%B1%9E%E6%80%A7%E8%AF%B4%E6%98%8E",
          "fullPath": "#%E5%B1%9E%E6%80%A7%E8%AF%B4%E6%98%8E",
          "level": 2
        },
        {
          "label": "自定义插件",
          "fragment": "%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6",
          "fullPath": "#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6",
          "level": 2
        },
        {
          "label": "工作原理",
          "fragment": "%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86",
          "fullPath": "#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86",
          "level": 2
        },
        {
          "label": "注册渲染器信息",
          "fragment": "%E6%B3%A8%E5%86%8C%E6%B8%B2%E6%9F%93%E5%99%A8%E4%BF%A1%E6%81%AF",
          "fullPath": "#%E6%B3%A8%E5%86%8C%E6%B8%B2%E6%9F%93%E5%99%A8%E4%BF%A1%E6%81%AF",
          "level": 2
        },
        {
          "label": "如何定义右侧配置面板",
          "fragment": "%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E5%8F%B3%E4%BE%A7%E9%85%8D%E7%BD%AE%E9%9D%A2%E6%9D%BF",
          "fullPath": "#%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E5%8F%B3%E4%BE%A7%E9%85%8D%E7%BD%AE%E9%9D%A2%E6%9D%BF",
          "level": 2
        },
        {
          "label": "如何扩充渲染器容器配置",
          "fragment": "%E5%A6%82%E4%BD%95%E6%89%A9%E5%85%85%E6%B8%B2%E6%9F%93%E5%99%A8%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE",
          "fullPath": "#%E5%A6%82%E4%BD%95%E6%89%A9%E5%85%85%E6%B8%B2%E6%9F%93%E5%99%A8%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE",
          "level": 2
        },
        {
          "label": "如何定义编辑器脚手架",
          "fragment": "%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E7%BC%96%E8%BE%91%E5%99%A8%E8%84%9A%E6%89%8B%E6%9E%B6",
          "fullPath": "#%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E7%BC%96%E8%BE%91%E5%99%A8%E8%84%9A%E6%89%8B%E6%9E%B6",
          "level": 2
        },
        {
          "label": "如何构建点选框顶部菜单",
          "fragment": "%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E7%82%B9%E9%80%89%E6%A1%86%E9%A1%B6%E9%83%A8%E8%8F%9C%E5%8D%95",
          "fullPath": "#%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E7%82%B9%E9%80%89%E6%A1%86%E9%A1%B6%E9%83%A8%E8%8F%9C%E5%8D%95",
          "level": 2
        },
        {
          "label": "如何构建上下文功能菜单",
          "fragment": "%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8A%9F%E8%83%BD%E8%8F%9C%E5%8D%95",
          "fullPath": "#%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8A%9F%E8%83%BD%E8%8F%9C%E5%8D%95",
          "level": 2
        },
        {
          "label": "如何让渲染器可通过拖拽调整宽高",
          "fragment": "%E5%A6%82%E4%BD%95%E8%AE%A9%E6%B8%B2%E6%9F%93%E5%99%A8%E5%8F%AF%E9%80%9A%E8%BF%87%E6%8B%96%E6%8B%BD%E8%B0%83%E6%95%B4%E5%AE%BD%E9%AB%98",
          "fullPath": "#%E5%A6%82%E4%BD%95%E8%AE%A9%E6%B8%B2%E6%9F%93%E5%99%A8%E5%8F%AF%E9%80%9A%E8%BF%87%E6%8B%96%E6%8B%BD%E8%B0%83%E6%95%B4%E5%AE%BD%E9%AB%98",
          "level": 2
        },
        {
          "label": "如何开启快速配置",
          "fragment": "%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE",
          "fullPath": "#%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE",
          "level": 2
        },
        {
          "label": "MiniEditor",
          "fragment": "minieditor",
          "fullPath": "#minieditor",
          "level": 2
        }
      ],
      "level": 0
    }
  };

});
