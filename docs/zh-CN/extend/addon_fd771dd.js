amis.define('docs/zh-CN/extend/addon.md', function(require, exports, module, define) {

  module.exports = {
    "title": "扩展现有组件",
    "html": "<div class=\"markdown-body\"><p>除了新增组件，在 amis 中还能扩展和修改现有组件。</p>\n<h2><a class=\"anchor\" name=\"%E6%89%A9%E5%B1%95%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81\" href=\"#%E6%89%A9%E5%B1%95%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>扩展表单验证</h2><p>如果默认的表单检测规则不满足需求，还可以通过代码的方式扩展。</p>\n<h3><a class=\"anchor\" name=\"%E6%99%AE%E9%80%9A%E7%94%A8%E6%B3%95\" href=\"#%E6%99%AE%E9%80%9A%E7%94%A8%E6%B3%95\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>普通用法</h3><p>JSSDK 中的用法：</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">let</span> amisLib <span class=\"token operator\">=</span> <span class=\"token function\">amisRequire</span><span class=\"token punctuation\">(</span><span class=\"token string\">'amis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\namisLib<span class=\"token punctuation\">.</span><span class=\"token function\">addRule</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// 校验名</span>\n  <span class=\"token string\">'isZXS'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 校验函数，values 是表单里所有表单项的值，可用于做联合校验；value 是当前表单项的值</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">values<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      value <span class=\"token operator\">===</span> <span class=\"token string\">'北京'</span> <span class=\"token operator\">||</span>\n      value <span class=\"token operator\">===</span> <span class=\"token string\">'上海'</span> <span class=\"token operator\">||</span>\n      value <span class=\"token operator\">===</span> <span class=\"token string\">'天津'</span> <span class=\"token operator\">||</span>\n      value <span class=\"token operator\">===</span> <span class=\"token string\">'重庆'</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// return true 表示校验通过</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// return false 表示校验不通过，会进行错误提示</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 出错时的报错信息</span>\n  <span class=\"token string\">'输入的不是直辖市'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这样在配置中就能使用下面的验证方法</p>\n<pre><code>&quot;validations&quot;: {\n  &quot;isZXS&quot;: true\n}\n</code></pre>\n<p>在 React 的使用方法是类似的</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>addRule<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'amis'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a class=\"anchor\" name=\"%E6%9B%B4%E5%8A%A0%E7%81%B5%E6%B4%BB%E7%9A%84%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF\" href=\"#%E6%9B%B4%E5%8A%A0%E7%81%B5%E6%B4%BB%E7%9A%84%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更加灵活的提示错误</h3><blockquote>\n<p><code>2.9.1</code> 及以上版本</p>\n</blockquote>\n<p>如果想在一个验证函数里根据不同情况提示不同的错误信息，需要返回固定格式的结果：</p>\n<pre><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'错误信息'</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>注意，当返回对象时，<code>error</code>必须为<code>true</code> 才会判定为错误：</p>\n<p>具体用法如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">let</span> amisLib <span class=\"token operator\">=</span> <span class=\"token function\">amisRequire</span><span class=\"token punctuation\">(</span><span class=\"token string\">'amis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\namisLib<span class=\"token punctuation\">.</span><span class=\"token function\">addRule</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// 校验名</span>\n  <span class=\"token string\">'isZXS'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 校验函数，values 是表单里所有表单项的值，可用于做联合校验；value 是当前表单项的值</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">values<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token string\">'新加坡'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 校验不通过，提示：该地区不在国内</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'该地区不在国内'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      value <span class=\"token operator\">===</span> <span class=\"token string\">'北京'</span> <span class=\"token operator\">||</span>\n      value <span class=\"token operator\">===</span> <span class=\"token string\">'上海'</span> <span class=\"token operator\">||</span>\n      value <span class=\"token operator\">===</span> <span class=\"token string\">'天津'</span> <span class=\"token operator\">||</span>\n      value <span class=\"token operator\">===</span> <span class=\"token string\">'重庆'</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// return true 表示校验通过</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 校验不通过，提示：输入的不是直辖市</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'输入的不是直辖市'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2><a class=\"anchor\" name=\"%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%BC%96%E8%BE%91\" href=\"#%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%BC%96%E8%BE%91\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>同时支持多种类型编辑</h2><p>在表单编辑中，每个 name 一般对应一种类型，如果这个 name 有多种类型，比如下面的例子中 id 的值有可能是字符串，也有可能是数字，但 type 只能设置为一种类型，这种情况如何处理？</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"mode\": \"horizontal\",\n    \"body\": [\n        {\n            \"name\": \"id\",\n            \"type\": \"input-text\",\n            \"label\": \"id\"\n        }\n    ]\n}\n</script></div><div class=\"markdown-body\">\n<p>有两种方式：</p>\n<h3><a class=\"anchor\" name=\"%E4%BD%BF%E7%94%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%90%8D%E7%A7%B0%E4%BD%9C%E4%B8%BA%E7%8A%B6%E6%80%81\" href=\"#%E4%BD%BF%E7%94%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%90%8D%E7%A7%B0%E4%BD%9C%E4%B8%BA%E7%8A%B6%E6%80%81\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用另一个名称作为状态</h3></div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n  \"type\": \"form\",\n  \"mode\": \"horizontal\",\n  \"body\": [\n    {\n      \"name\": \"idIsNumber\",\n      \"type\": \"switch\",\n      \"label\": \"id 是数字类型\"\n    },\n    {\n      \"name\": \"id\",\n      \"type\": \"input-text\",\n      \"label\": \"id\",\n      \"hiddenOn\": \"data.idIsNumber\"\n    },\n    {\n      \"name\": \"id\",\n      \"type\": \"input-number\",\n      \"label\": \"id\",\n      \"visibleOn\": \"data.idIsNumber\"\n    }\n  ]\n}\n</script></div><div class=\"markdown-body\">\n<p>可以看到在一个 form 中可以有两个 name 相同的组件，通过 hiddenOn 或 visibleOn 来控制同时只显示一个。</p>\n<h3><a class=\"anchor\" name=\"%E4%BD%BF%E7%94%A8-pipein-pipeout-%E6%96%B9%E6%B3%95\" href=\"#%E4%BD%BF%E7%94%A8-pipein-pipeout-%E6%96%B9%E6%B3%95\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 PipeIn/PipeOut 方法</h3><p>如果不想增加一个新的 name，在 JS SDK 或 React 还有更高级的处理方法，可以增加一个 name 同样为 id 的 switch，实现 PipeIn/PipeOut 函数来进行自动识别，下面是个示例：</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">let</span> amis <span class=\"token operator\">=</span> <span class=\"token function\">amisRequire</span><span class=\"token punctuation\">(</span><span class=\"token string\">'amis/embed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> amisScoped <span class=\"token operator\">=</span> amis<span class=\"token punctuation\">.</span><span class=\"token function\">embed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'page'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'表单页面'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 可以通过去掉下面的注释来测试</span>\n  <span class=\"token comment\">// data: {</span>\n  <span class=\"token comment\">//   id: 1</span>\n  <span class=\"token comment\">// },</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'horizontal'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">api</span><span class=\"token operator\">:</span> <span class=\"token string\">'/saveForm'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'switch'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'id 是数字'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// pipeIn 返回的应该是这个组件所需的值，比如 switch 的返回值就应该是 true 或 false</span>\n        <span class=\"token comment\">// 这里的 value 就是初始值，如果不设置将会是 undefined</span>\n        <span class=\"token function-variable function\">pipeIn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 这里的 value 是点击 switch 之后的值，比如打开就是 true，关闭就是 false</span>\n        <span class=\"token function-variable function\">pipeOut</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 切换到数字之后的默认值</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'id1'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭之后的默认值</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">visibleOn</span><span class=\"token operator\">:</span>\n          <span class=\"token string\">'typeof data.id === \"undefined\" || typeof data.id === \"string\"'</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">visibleOn</span><span class=\"token operator\">:</span> <span class=\"token string\">'typeof data.id === \"number\"'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>不过这种写法的复杂度较高</p>\n<h2><a class=\"anchor\" name=\"%E4%BF%AE%E6%94%B9%E7%BB%84%E4%BB%B6%E6%A0%87%E7%AD%BE\" href=\"#%E4%BF%AE%E6%94%B9%E7%BB%84%E4%BB%B6%E6%A0%87%E7%AD%BE\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>修改组件标签</h2><p>有些组件可以设置 <code>wrapperComponent</code>，比如 Form 下默认使用 form 标签，在浏览器中会自带回车提交功能，如果想去掉这个功能，可以将 <code>wrapperComponent</code> 设置为 <code>div</code>。</p>\n</div>",
    "toc": {
      "label": "目录",
      "type": "toc",
      "children": [
        {
          "label": "扩展表单验证",
          "fragment": "%E6%89%A9%E5%B1%95%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81",
          "fullPath": "#%E6%89%A9%E5%B1%95%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81",
          "level": 2,
          "children": [
            {
              "label": "普通用法",
              "fragment": "%E6%99%AE%E9%80%9A%E7%94%A8%E6%B3%95",
              "fullPath": "#%E6%99%AE%E9%80%9A%E7%94%A8%E6%B3%95",
              "level": 3
            },
            {
              "label": "更加灵活的提示错误",
              "fragment": "%E6%9B%B4%E5%8A%A0%E7%81%B5%E6%B4%BB%E7%9A%84%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF",
              "fullPath": "#%E6%9B%B4%E5%8A%A0%E7%81%B5%E6%B4%BB%E7%9A%84%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF",
              "level": 3
            }
          ]
        },
        {
          "label": "同时支持多种类型编辑",
          "fragment": "%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%BC%96%E8%BE%91",
          "fullPath": "#%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%BC%96%E8%BE%91",
          "level": 2,
          "children": [
            {
              "label": "使用另一个名称作为状态",
              "fragment": "%E4%BD%BF%E7%94%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%90%8D%E7%A7%B0%E4%BD%9C%E4%B8%BA%E7%8A%B6%E6%80%81",
              "fullPath": "#%E4%BD%BF%E7%94%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%90%8D%E7%A7%B0%E4%BD%9C%E4%B8%BA%E7%8A%B6%E6%80%81",
              "level": 3
            },
            {
              "label": "使用 PipeIn/PipeOut 方法",
              "fragment": "%E4%BD%BF%E7%94%A8-pipein-pipeout-%E6%96%B9%E6%B3%95",
              "fullPath": "#%E4%BD%BF%E7%94%A8-pipein-pipeout-%E6%96%B9%E6%B3%95",
              "level": 3
            }
          ]
        },
        {
          "label": "修改组件标签",
          "fragment": "%E4%BF%AE%E6%94%B9%E7%BB%84%E4%BB%B6%E6%A0%87%E7%AD%BE",
          "fullPath": "#%E4%BF%AE%E6%94%B9%E7%BB%84%E4%BB%B6%E6%A0%87%E7%AD%BE",
          "level": 2
        }
      ],
      "level": 0
    }
  };

});
