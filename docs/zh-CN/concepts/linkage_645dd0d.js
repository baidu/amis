amis.define('docs/zh-CN/concepts/linkage.md', function(require, exports, module, define) {

  module.exports = {
    "title": "联动",
    "description": null,
    "type": 0,
    "group": "💡 概念",
    "menuName": "联动",
    "icon": null,
    "order": 14,
    "html": "<div class=\"markdown-body\"><p>上一节我们介绍了表达式的概念，而表达式应用最多的场景，是实现页面的联动效果。</p>\n<h2><a class=\"anchor\" name=\"%E5%9F%BA%E6%9C%AC%E8%81%94%E5%8A%A8\" href=\"#%E5%9F%BA%E6%9C%AC%E8%81%94%E5%8A%A8\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本联动</h2><p>元素的联动是页面开发中很常见的功能之一，类似于：</p>\n<ul>\n<li>某个条件下显示或隐藏某个组件</li>\n<li>某个条件下请求接口</li>\n<li>某个条件下轮询接口停止轮询</li>\n<li>等等...</li>\n</ul>\n<blockquote>\n<p>联动配置项一般都是 <a href=\"./expression\">表达式</a></p>\n</blockquote>\n<h3><a class=\"anchor\" name=\"%E7%BB%84%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%81%94%E5%8A%A8\" href=\"#%E7%BB%84%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%81%94%E5%8A%A8\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>组件配置联动</h3><p>控制组件的显隐，表单项的禁用状态等，看下面这个例子：</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"body\": [\n        {\n            \"type\": \"radios\",\n            \"name\": \"foo\",\n            \"label\": false,\n            \"options\": [\n                {\n                    \"label\": \"类型1\",\n                    \"value\": 1\n                },\n                {\n                    \"label\": \"类型2\",\n                    \"value\": 2\n                }\n            ]\n        },\n        {\n            \"type\": \"input-text\",\n            \"name\": \"text1\",\n            \"label\": false,\n            \"placeholder\": \"选中 类型1 时可见\",\n            \"visibleOn\": \"${foo == 1}\"\n        },\n        {\n            \"type\": \"input-text\",\n            \"name\": \"text2\",\n            \"label\": false,\n            \"placeholder\": \"选中 类型2 时不可点\",\n            \"disabledOn\": \"${foo == 2}\"\n        }\n    ]\n}\n</script></div><div class=\"markdown-body\">\n<p>上面实例主要为一个表单，表单内有三个组件：一个<code>radio</code>, 两个<code>text</code>，通过配置联动配置项，实现下面联动效果：</p>\n<ol>\n<li>只要当<code>radio</code>选中<code>类型1</code>时，才会显示<code>text1</code>；</li>\n<li>当<code>radio</code>选中<code>类型2</code>时，<code>text2</code>将会变为<code>禁用状态</code></li>\n</ol>\n<blockquote>\n<p><strong>注意：</strong></p>\n<p>在表单项联动中，为了方便数据的读取，赋值后或者修改过的表单项，通过隐藏后，并不会在当前数据域中删除掉该字段值，因此默认提交的时候可能仍然会带上已隐藏表单项的值。</p>\n<p>如果想要在提交时去掉某个隐藏的字段，可以通过添加 <a href=\"../../components/form/formitem#隐藏时删除表单项值\">clearValueOnHidden</a> 属性实现。</p>\n</blockquote>\n<h3><a class=\"anchor\" name=\"%E6%8E%A5%E5%8F%A3%E8%81%94%E5%8A%A8\" href=\"#%E6%8E%A5%E5%8F%A3%E8%81%94%E5%8A%A8\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接口联动</h3><h4><a class=\"anchor\" name=\"%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\" href=\"#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本使用</h4><p>接口联动是另外一种很常见的场景，查看下面这个例子：</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"title\": \"\",\n    \"type\": \"form\",\n    \"mode\": \"horizontal\",\n    \"body\": [\n      {\n        \"label\": \"选项1\",\n        \"type\": \"radios\",\n        \"name\": \"a\",\n        \"inline\": true,\n        \"options\": [\n          {\n            \"label\": \"选项A\",\n            \"value\": 1\n          },\n          {\n            \"label\": \"选项B\",\n            \"value\": 2\n          },\n          {\n            \"label\": \"选项C\",\n            \"value\": 3\n          }\n        ]\n      },\n      {\n        \"label\": \"选项2\",\n        \"type\": \"select\",\n        \"size\": \"sm\",\n        \"name\": \"b\",\n        \"source\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/options/level2?a=${a}\",\n        \"description\": \"切换<code>选项1</code>的值，会触发<code>选项2</code>的<code>source</code> 接口重新拉取\"\n      }\n    ],\n    \"actions\": []\n}\n</script></div><div class=\"markdown-body\">\n<p>上面例子我们实现了这个逻辑：每次选择<code>选项1</code>的时候，会触发<code>选项2</code>的<code>source</code>配置的接口重新请求，并返回不同的下拉选项。</p>\n<p>是如何做到的？</p>\n<p>实际上，所有<strong>初始化接口链接上使用数据映射获取参数的形式</strong>时，例如下面的<code>query=${query}</code>，在当前数据域中，<strong>所引用的变量值（即 query）发生变化时</strong>，自动重新请求该接口。</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"initApi\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/initData?query=${query}\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>tip:</strong></p>\n<p>触发所引用变量值发生变化的方式有以下几种：</p>\n<ol>\n<li>通过对表单项的修改，可以更改表单项<code>name</code>属性值所配置变量的值；</li>\n<li>通过<a href=\"./linkage#%E7%BB%84%E4%BB%B6%E9%97%B4%E8%81%94%E5%8A%A8\">组件间联动</a>，将其他组件的值发送到目标组件，进行数据域的更新，从而触发联动效果</li>\n</ol>\n<p>接口联动一般只适用于初始化接口，例如：</p>\n<ul>\n<li><code>form</code>组件中的<code>initApi</code>；</li>\n<li><code>select</code>组件中的<code>source</code>选项源接口<code>url</code>, <code>data</code>只能用于主动联动；</li>\n<li><code>service</code>组件中的<code>api</code>和<code>schemaApi</code>；</li>\n<li><code>crud</code>组件中的<code>api</code>；（crud 默认是跟地址栏联动，如果要做请关闭同步地址栏 syncLocation: false）</li>\n<li>等等...</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>如果 api 地址中有变量，比如 <code>/api/mock2/sample/${id}</code>，amis 就不会自动加上分页参数，需要自己加上，改成 <code>/api/mock2/sample/${id}?page=${page}&amp;perPage=${perPage}</code></p>\n</blockquote>\n<h4><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%9D%A1%E4%BB%B6\" href=\"#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%9D%A1%E4%BB%B6\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置请求条件</h4><p>默认在变量变化时，总是会去请求联动的接口，你也可以配置请求条件，当只有当前数据域中某个值符合特定条件才去请求该接口。</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"title\": \"\",\n    \"type\": \"form\",\n    \"mode\": \"horizontal\",\n    \"body\": [\n      {\n        \"label\": \"选项1\",\n        \"type\": \"radios\",\n        \"name\": \"a\",\n        \"inline\": true,\n        \"options\": [\n          {\n            \"label\": \"选项A\",\n            \"value\": 1\n          },\n          {\n            \"label\": \"选项B\",\n            \"value\": 2\n          },\n          {\n            \"label\": \"选项C\",\n            \"value\": 3\n          }\n        ]\n      },\n      {\n        \"label\": \"选项2\",\n        \"type\": \"select\",\n        \"size\": \"sm\",\n        \"name\": \"b\",\n        \"source\": {\n            \"method\": \"get\",\n            \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/options/level2?a=${a}\",\n            \"sendOn\": \"this.a === 2\"\n        },\n        \"description\": \"只有<code>选项1</code>选择<code>B</code>的时候，才触发<code>选项2</code>的<code>source</code>接口重新拉取\"\n      }\n    ],\n    \"actions\": []\n}\n</script></div><div class=\"markdown-body\">\n<p>更多用法，见：<a href=\"../types/api#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%9D%A1%E4%BB%B6\">Api-配置请求条件</a></p>\n<h4><a class=\"anchor\" name=\"%E4%B8%BB%E5%8A%A8%E8%A7%A6%E5%8F%91\" href=\"#%E4%B8%BB%E5%8A%A8%E8%A7%A6%E5%8F%91\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>主动触发</h4><p>上面示例有个问题，就是数据一旦变化就会出发重新拉取，而输入框的频繁变化值会导致频繁的拉取？没关系，也可以配置主动拉取如：</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"name\": \"my_form\",\n    \"body\": [\n      {\n        \"type\": \"input-text\",\n        \"name\": \"keyword\",\n        \"addOn\": {\n          \"label\": \"搜索\",\n          \"type\": \"button\",\n          \"actionType\": \"reload\",\n          \"target\": \"my_form.select\"\n        }\n      },\n      {\n        \"type\": \"select\",\n        \"name\": \"select\",\n        \"label\": \"Select\",\n        \"source\": {\n          \"method\": \"get\",\n          \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/getOptions?waitSeconds=1\",\n          \"data\": {\n            \"a\": \"${keyword}\"\n          }\n        }\n      }\n    ]\n}\n</script></div><div class=\"markdown-body\">\n<ol>\n<li>通过<code>api</code>对象形式，将获取变量值配置到<code>data</code>请求体中。</li>\n<li>配置搜索按钮，并配置该行为是刷新目标组件，并配置目标组件<code>target</code></li>\n<li>这样我们只有在点击搜索按钮的时候，才会将<code>keyword</code>值发送给<code>select</code>组件，重新拉取选项</li>\n</ol>\n<h3><a class=\"anchor\" name=\"%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE\" href=\"#%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>表单提交返回数据</h3><p>表单提交后会将返回结果合并到当前表单数据域，因此可以基于它实现提交按钮后显示结果，比如</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"api\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n    \"title\": \"查询用户 ID\",\n    \"body\": [\n      {\n        \"type\": \"input-group\",\n        \"name\": \"input-group\",\n        \"body\": [\n           {\n            \"type\": \"input-text\",\n            \"name\": \"name\",\n            \"label\": \"姓名\"\n          },\n          {\n            \"type\": \"submit\",\n            \"label\": \"查询\",\n            \"level\": \"primary\"\n          }\n        ]\n      },\n      {\n        \"type\": \"static\",\n        \"name\": \"id\",\n        \"visibleOn\": \"typeof data.id !== 'undefined'\",\n        \"label\": \"返回 ID\"\n      }\n    ],\n    \"actions\": []\n}\n</script></div><div class=\"markdown-body\">\n<p>上面的例子首先用 <code>&quot;actions&quot;: []</code> 将表单默认的提交按钮去掉，然后在 <code>input-group</code> 里放一个 <code>submit</code> 类型的按钮来替代表单查询。</p>\n<p>这个查询结果返回类似如下的数据</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"保存成功\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>amis 会将返回的 <code>data</code> 写入表单数据域，因此下面的 <code>static</code> 组件就能显示了。</p>\n<h3><a class=\"anchor\" name=\"%E5%85%B6%E4%BB%96%E8%81%94%E5%8A%A8\" href=\"#%E5%85%B6%E4%BB%96%E8%81%94%E5%8A%A8\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>其他联动</h3><p>还有一些组件特有的联动效果，例如 form 的 disabledOn，crud 中的 itemDraggableOn 等等，可以参考相应的组件文档。</p>\n<h2><a class=\"anchor\" name=\"%E7%BB%84%E4%BB%B6%E9%97%B4%E8%81%94%E5%8A%A8\" href=\"#%E7%BB%84%E4%BB%B6%E9%97%B4%E8%81%94%E5%8A%A8\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>组件间联动</h2><p>联动很可能会出现跨组件的形式，思考下面这种场景：</p>\n<p>有一个表单<code>form</code>组件，还有一个列表组件<code>crud</code>，我们想要把<code>form</code>提交的数据，可以用作<code>crud</code>的查询条件，并请求<code>crud</code>的接口，由于<code>form</code>和<code>crud</code>位于同一层级，因此没法使用数据链的方式进行取值。</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">[\n    {\n      \"title\": \"查询条件\",\n      \"type\": \"form\",\n      \"body\": [\n        {\n          \"type\": \"input-text\",\n          \"name\": \"keywords\",\n          \"label\": \"关键字：\"\n        }\n      ],\n      \"submitText\": \"搜索\"\n    },\n    {\n      \"type\": \"crud\",\n      \"api\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/sample\",\n      \"columns\": [\n            {\n                \"name\": \"id\",\n                \"label\": \"ID\"\n            },\n            {\n                \"name\": \"engine\",\n                \"label\": \"Rendering engine\"\n            },\n            {\n                \"name\": \"browser\",\n                \"label\": \"Browser\"\n            },\n            {\n                \"name\": \"platform\",\n                \"label\": \"Platform(s)\"\n            },\n            {\n                \"name\": \"version\",\n                \"label\": \"Engine version\"\n            }\n        ]\n    }\n]\n</script></div><div class=\"markdown-body\">\n<p>现在更改配置如下：</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">[\n    {\n      \"title\": \"查询条件\",\n      \"type\": \"form\",\n      \"target\": \"my_crud\",\n      \"body\": [\n        {\n          \"type\": \"input-text\",\n          \"name\": \"keywords\",\n          \"label\": \"关键字：\"\n        }\n      ],\n      \"submitText\": \"搜索\"\n    },\n    {\n      \"type\": \"crud\",\n      \"name\": \"my_crud\",\n      \"api\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/sample\",\n      \"columns\": [\n            {\n                \"name\": \"id\",\n                \"label\": \"ID\"\n            },\n            {\n                \"name\": \"engine\",\n                \"label\": \"Rendering engine\"\n            },\n            {\n                \"name\": \"browser\",\n                \"label\": \"Browser\"\n            },\n            {\n                \"name\": \"platform\",\n                \"label\": \"Platform(s)\"\n            },\n            {\n                \"name\": \"version\",\n                \"label\": \"Engine version\"\n            }\n        ]\n    }\n]\n</script></div><div class=\"markdown-body\">\n<p>我们进行两个调整：</p>\n<ol>\n<li>为<code>crud</code>组件设置了<code>name</code>属性为<code>my_crud</code></li>\n<li>为<code>form</code>组件配置了<code>target</code>属性为<code>crud</code>的<code>name</code>：<code>my_crud</code></li>\n</ol>\n<p>更改配置后，提交表单时，amis 会寻找<code>target</code>所配置的目标组件，把<code>form</code>中所提交的数据，发送给该目标组件中，并将该数据<strong>合并</strong>到目标组件的数据域中，并触发目标组件的刷新操作，对于 CRUD 组件来说，刷新即重新拉取数据接口。</p>\n<blockquote>\n<p>当然，<code>crud</code>组件内置已经支持此功能，你只需要配置<code>crud</code>中的<code>filter</code>属性，就可以实现上面的效果，更多内容查看 <a href=\"../../components/crud\">crud -&gt; filter</a> 文档。</p>\n</blockquote>\n<p>我们再来一个例子，这次我们实现 <a href=\"../../components/form/index#%E5%B0%86%E6%95%B0%E6%8D%AE%E5%9F%9F%E5%8F%91%E9%80%81%E7%BB%99%E7%9B%AE%E6%A0%87%E7%BB%84%E4%BB%B6\">两个 form 之间的联动</a></p>\n<h3><a class=\"anchor\" name=\"%E5%8F%91%E9%80%81%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE\" href=\"#%E5%8F%91%E9%80%81%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>发送指定数据</h3><p><code>target</code>属性支持通过配置参数来发送指定数据，例如：<code>&quot;target&quot; :&quot;xxx?a=${a}&amp;b=${b}&quot;</code>，这样就会把当前数据域中的<code>a</code>变量和<code>b</code>变量发送给目标组件</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">[\n  {\n    \"type\": \"form\",\n    \"title\": \"form1\",\n    \"mode\": \"horizontal\",\n    \"api\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n    \"body\": [\n      {\n        \"label\": \"Name\",\n        \"type\": \"input-text\",\n        \"name\": \"name\"\n      },\n\n      {\n        \"label\": \"Email\",\n        \"type\": \"input-text\",\n        \"name\": \"email\"\n      },\n\n      {\n        \"label\": \"Company\",\n        \"type\": \"input-text\",\n        \"name\": \"company\"\n      }\n    ],\n    \"actions\": [\n      {\n        \"type\": \"action\",\n        \"actionType\": \"reload\",\n        \"label\": \"发送到 form2\",\n        \"target\": \"form2?name=${name}&email=${email}\"\n      }\n    ]\n  },\n  {\n    \"type\": \"form\",\n    \"title\": \"form2\",\n    \"name\": \"form2\",\n    \"mode\": \"horizontal\",\n    \"api\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n    \"body\": [\n      {\n        \"label\": \"MyName\",\n        \"type\": \"input-text\",\n        \"name\": \"name\"\n      },\n\n      {\n        \"label\": \"MyEmail\",\n        \"type\": \"input-text\",\n        \"name\": \"email\"\n      },\n\n      {\n        \"label\": \"Company\",\n        \"type\": \"input-text\",\n        \"name\": \"company\"\n      }\n    ]\n  }\n]\n</script></div><div class=\"markdown-body\">\n<p>上例中我们给按钮上配置了<code>&quot;target&quot;: &quot;form2?name=${name}&amp;email=${email}&quot;</code>,可以把当前数据链中的<code>name</code>变量和<code>email</code>变量发送给<code>form2</code></p>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E7%9B%AE%E6%A0%87\" href=\"#%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E7%9B%AE%E6%A0%87\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置多个目标</h3><p><code>target</code>支持配置多个目标组件 name，用逗号隔开，例如：</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"action\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"actionType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"reload\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"刷新目标组件\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"target1,target2\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>上例中点击按钮会刷新<code>target1</code>和<code>target2</code>组件。</p>\n<p>事实上，<strong>组件间联动也可以实现上述任意的 <a href=\"./linkage#%E5%9F%BA%E6%9C%AC%E8%81%94%E5%8A%A8\">基本联动效果</a>（显隐联动、接口联动等其他联动）。</strong></p>\n<h3><a class=\"anchor\" name=\"%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87\" href=\"#%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>动态目标</h3><blockquote>\n<p>2.9.0 及以上版本</p>\n</blockquote>\n<p>刷新目标支持表达式，比如目标可以配置成 <code>form-${ xxx ? &#39;1&#39; : &#39;2&#39;}</code>。</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">[\n    {\n      \"title\": \"查询条件\",\n      \"type\": \"form\",\n      \"target\": \"my_crud_${searchTarget}\",\n      \"body\": [\n        {\n          \"type\": \"radios\",\n          \"name\": \"searchTarget\",\n          \"label\": \"选择目标\",\n          value: 1,\n          options: [\n            {\n              value: 1,\n              label: \"列表 1\"\n            },\n            {\n              value: 2,\n              label: \"列表 2\"\n            }\n          ],\n        },\n        {\n          \"type\": \"input-text\",\n          \"name\": \"keywords\",\n          \"label\": \"关键字：\"\n        }\n      ],\n      \"submitText\": \"搜索\"\n    },\n    {\n      \"type\": \"crud\",\n      \"api\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/sample\",\n      \"name\": \"my_crud_1\",\n      \"title\": \"列表 1\",\n      \"columns\": [\n            {\n                \"name\": \"id\",\n                \"label\": \"ID\"\n            },\n            {\n                \"name\": \"engine\",\n                \"label\": \"Rendering engine\"\n            },\n            {\n                \"name\": \"browser\",\n                \"label\": \"Browser\"\n            },\n            {\n                \"name\": \"platform\",\n                \"label\": \"Platform(s)\"\n            },\n            {\n                \"name\": \"version\",\n                \"label\": \"Engine version\"\n            }\n        ]\n    },\n\n    {\n      \"type\": \"crud\",\n      \"api\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/sample\",\n      \"name\": \"my_crud_2\",\n      \"title\": \"列表 2\",\n      \"columns\": [\n            {\n                \"name\": \"id\",\n                \"label\": \"ID\"\n            },\n            {\n                \"name\": \"engine\",\n                \"label\": \"Rendering engine\"\n            },\n            {\n                \"name\": \"browser\",\n                \"label\": \"Browser\"\n            },\n            {\n                \"name\": \"platform\",\n                \"label\": \"Platform(s)\"\n            },\n            {\n                \"name\": \"version\",\n                \"label\": \"Engine version\"\n            }\n        ]\n    }\n]\n</script></div><div class=\"markdown-body\">\n<p>如果目标组件在列表中，则实际渲染的时候会存在多份，通过某个固定名字没办法找到对应的组件。比如某个 crud 里面，某列设置的是一个 service，通过 service 拉取数据。如果想在操作栏里面某个操作完后刷新对应的 service，通过固定的名字是没办法找到对应的 service 的。所以名字 <code>name</code> 也支持动态名字。如: <code>my-service-${id}</code> 把行数据中动态的 id 设置进去。</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n  type: 'crud',\n  api: \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/sample\",\n  columns: [\n    {\n      name: 'id',\n      label: 'ID'\n    },\n\n    {\n      type: 'service',\n      api: \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/sample/${id}\",\n      label: 'Service',\n      name: \"my-servce-${id}\",\n      body: [\n        {\n          type: \"tpl\",\n          tpl: \"${browser}\"\n        }\n      ]\n    },\n\n    {\n      type: 'operation',\n      label: '操作',\n      buttons: [\n        {\n          type: \"button\",\n          label: \"编辑\",\n          actionType: \"dialog\",\n          dialog: {\n            \"title\": \"编辑\",\n\n            body: [\n              {\n                type: 'form',\n                api: \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/sample/${id}\",\n                body: [\n                  {\n                    type: 'input-text',\n                    name: 'browser',\n                    label: 'Browser'\n                  }\n                ]\n              }\n            ]\n          },\n          reload: \"my-servce-${id}\"\n        }\n      ]\n    }\n  ]\n}\n</script></div><div class=\"markdown-body\">\n<blockquote>\n<p>这个例子 api 是 mock 的，所以修改后刷新没效果。</p>\n</blockquote>\n</div>",
    "toc": {
      "label": "目录",
      "type": "toc",
      "children": [
        {
          "label": "基本联动",
          "fragment": "%E5%9F%BA%E6%9C%AC%E8%81%94%E5%8A%A8",
          "fullPath": "#%E5%9F%BA%E6%9C%AC%E8%81%94%E5%8A%A8",
          "level": 2,
          "children": [
            {
              "label": "组件配置联动",
              "fragment": "%E7%BB%84%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%81%94%E5%8A%A8",
              "fullPath": "#%E7%BB%84%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%81%94%E5%8A%A8",
              "level": 3
            },
            {
              "label": "接口联动",
              "fragment": "%E6%8E%A5%E5%8F%A3%E8%81%94%E5%8A%A8",
              "fullPath": "#%E6%8E%A5%E5%8F%A3%E8%81%94%E5%8A%A8",
              "level": 3,
              "children": [
                {
                  "label": "基本使用",
                  "fragment": "%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8",
                  "fullPath": "#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8",
                  "level": 4
                },
                {
                  "label": "配置请求条件",
                  "fragment": "%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%9D%A1%E4%BB%B6",
                  "fullPath": "#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%9D%A1%E4%BB%B6",
                  "level": 4
                },
                {
                  "label": "主动触发",
                  "fragment": "%E4%B8%BB%E5%8A%A8%E8%A7%A6%E5%8F%91",
                  "fullPath": "#%E4%B8%BB%E5%8A%A8%E8%A7%A6%E5%8F%91",
                  "level": 4
                }
              ]
            },
            {
              "label": "表单提交返回数据",
              "fragment": "%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE",
              "fullPath": "#%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE",
              "level": 3
            },
            {
              "label": "其他联动",
              "fragment": "%E5%85%B6%E4%BB%96%E8%81%94%E5%8A%A8",
              "fullPath": "#%E5%85%B6%E4%BB%96%E8%81%94%E5%8A%A8",
              "level": 3
            }
          ]
        },
        {
          "label": "组件间联动",
          "fragment": "%E7%BB%84%E4%BB%B6%E9%97%B4%E8%81%94%E5%8A%A8",
          "fullPath": "#%E7%BB%84%E4%BB%B6%E9%97%B4%E8%81%94%E5%8A%A8",
          "level": 2,
          "children": [
            {
              "label": "发送指定数据",
              "fragment": "%E5%8F%91%E9%80%81%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE",
              "fullPath": "#%E5%8F%91%E9%80%81%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE",
              "level": 3
            },
            {
              "label": "配置多个目标",
              "fragment": "%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E7%9B%AE%E6%A0%87",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E7%9B%AE%E6%A0%87",
              "level": 3
            },
            {
              "label": "动态目标",
              "fragment": "%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87",
              "fullPath": "#%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87",
              "level": 3
            }
          ]
        }
      ],
      "level": 0
    }
  };

});
