amis.define('docs/zh-CN/types/api.md', function(require, exports, module, define) {

  module.exports = {
    "title": "API",
    "description": null,
    "type": 0,
    "group": "🔧 类型",
    "menuName": "API",
    "icon": null,
    "order": 20,
    "html": "<div class=\"markdown-body\"><p>API 类型用于配置请求接口的格式，涉及请求方式、请求地址、请求数据体等等相关配置</p>\n<h2><a class=\"anchor\" name=\"%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE\" href=\"#%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简单配置</h2><p>如果你只需要配置简单的 ajax 接口，可以使用简单字符串格式，如下：</p>\n<pre><code>[&lt;method&gt;:]&lt;url&gt;\n</code></pre>\n<ul>\n<li><strong>method</strong>：get、post、put、delete，默认为 get</li>\n<li><strong>url</strong>：接口地址，即模板字符串</li>\n</ul>\n<p>示例：</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"get:https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/initData\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// get 请求</span>\n  <span class=\"token property\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"post:https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/initData\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// post 请求</span>\n  <span class=\"token property\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"put:https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/initData\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// put 请求</span>\n  <span class=\"token property\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"delete:https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/initData\"</span> <span class=\"token comment\">// delete 请求</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a class=\"anchor\" name=\"%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F-%E9%87%8D%E8%A6%81-\" href=\"#%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F-%E9%87%8D%E8%A6%81-\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接口返回格式（重要）</h2><p>所有配置在 amis 组件中的接口，都要符合下面的返回格式</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ...其他字段\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li><strong>status</strong>: 返回 <code>0</code>，表示当前接口正确返回，否则按错误请求处理；</li>\n<li><strong>msg</strong>: 返回接口处理信息，主要用于表单提交或请求失败时的 <code>toast</code> 显示；</li>\n<li><strong>data</strong>: 必须返回一个具有 <code>key-value</code> 结构的对象。</li>\n</ul>\n<p><strong><code>status</code><strong>、</strong><code>msg</code></strong> 和 <strong><code>data</code></strong> 字段为接口返回的必要字段。</p>\n<blockquote>\n<p>1.1.7</p>\n</blockquote>\n<p>为了方便更多场景使用，还兼容了以下这些错误返回格式：</p>\n<ol>\n<li>errorCode 作为 status、errorMessage 作为 msg</li>\n<li>errno 作为 status、errmsg/errstr 作为 msg</li>\n<li>error 作为 status、errmsg 作为 msg</li>\n<li>error.code 作为 status、error.message 作为 msg</li>\n<li>message 作为 msg</li>\n</ol>\n<h3><a class=\"anchor\" name=\"%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%A0%BC%E5%BC%8F\" href=\"#%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%A0%BC%E5%BC%8F\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正确的格式</h3><pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 正确</span>\n    <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"World!\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a class=\"anchor\" name=\"%E9%94%99%E8%AF%AF%E7%9A%84%E6%A0%BC%E5%BC%8F\" href=\"#%E9%94%99%E8%AF%AF%E7%9A%84%E6%A0%BC%E5%BC%8F\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>错误的格式</h3><p>直接返回字符串或者数组都是不推荐的</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"some string\"</span> <span class=\"token comment\">// 错误，使用 key 包装</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a class=\"anchor\" name=\"%E5%85%BC%E5%AE%B9%E6%A0%BC%E5%BC%8F\" href=\"#%E5%85%BC%E5%AE%B9%E6%A0%BC%E5%BC%8F\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>兼容格式</h3><blockquote>\n<p>1.0.19 及以上版本。</p>\n</blockquote>\n<p>为了支持多种后端，amis 支持直接返回数据的方式，无需返回 status 和将数据放在 data 字段中，比如下面的例子：</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"amis\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"amis@amis.com\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>但这种方式无法显示错误信息，只能通过返回 http 状态码来标识错误。</p>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E5%BC%B9%E6%A1%86%E6%97%B6%E9%97%B4\" href=\"#%E9%85%8D%E7%BD%AE%E5%BC%B9%E6%A1%86%E6%97%B6%E9%97%B4\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置弹框时间</h3><p>可以通过 <code>msgTimeout</code> 控制弹框时间，它的时间是毫秒</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"msgTimeout\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a class=\"anchor\" name=\"%E5%A4%8D%E6%9D%82%E9%85%8D%E7%BD%AE\" href=\"#%E5%A4%8D%E6%9D%82%E9%85%8D%E7%BD%AE\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>复杂配置</h2><p>API 还支持配置对象类型</p>\n<h3><a class=\"anchor\" name=\"%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\" href=\"#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本用法</h3><pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xxxx\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            xxx\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        ... <span class=\"token comment\">// 其他配置</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F\" href=\"#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置请求方式</h3><p>可以配置<code>method</code>指定接口的请求方式，支持：<code>get</code>、<code>post</code>、<code>put</code>、<code>delete</code>、<code>patch</code>。</p>\n<blockquote>\n<p><code>method</code>值留空时：</p>\n<ul>\n<li>在初始化接口中，默认为<code>get</code>请求</li>\n<li>在<code>form</code>提交接口，默认为<code>post</code>请求</li>\n</ul>\n</blockquote>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80\" href=\"#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置请求地址</h3><p>可以配置<code>url</code>指定接口请求地址，支持<a href=\"../concepts/template\">模板字符串</a>。</p>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE\" href=\"#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置请求数据</h3><p>可以配置<code>data</code>，配置自定义接口请求数据体。</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"api\": {\n        \"method\": \"post\",\n        \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n        \"data\": {\n            \"myName\": \"${name}\",\n            \"myEmail\": \"${email}\"\n        }\n\n    },\n    \"body\": [\n      {\n        \"type\": \"input-text\",\n        \"name\": \"name\",\n        \"label\": \"姓名：\"\n      },\n      {\n        \"name\": \"email\",\n        \"type\": \"input-email\",\n        \"label\": \"邮箱：\"\n      }\n    ]\n}\n</script></div><div class=\"markdown-body\">\n<p>支持<a href=\"../concepts/data-mapping\">数据映射</a></p>\n<blockquote>\n<p>当<code>method</code>配置为<code>get</code>时，<code>data</code>中的值默认会添加到请求路径中</p>\n</blockquote>\n<p>需要注意一下，配置了数据发送，默认如果值是 <code>undefined</code> 也会作为空字符发送，比如以上这个例子直接提交会发送, name 和 email 两个字段，值分别为空字符。由于历史原因这个已经不能再修改了。如果你想实现没有填写的值不发送，则需要配置成。</p>\n<pre><code>&quot;data&quot;: {\n  &quot;myName&quot;: &quot;${name|default:undefined}&quot;,\n  &quot;myEmail&quot;: &quot;${email|default:undefined}&quot;\n}\n</code></pre>\n<p>这样 <code>undefined</code> 的值不会发送了。</p>\n<h3><a class=\"anchor\" name=\"%E4%B8%8D%E5%A4%84%E7%90%86-key-%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84\" href=\"#%E4%B8%8D%E5%A4%84%E7%90%86-key-%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>不处理 key 中的路径</h3><blockquote>\n<p>since 1.5.0</p>\n</blockquote>\n<p>默认请求数据体中配置 key，如果带路径会自动转成对象如：</p>\n<pre><code>&quot;api&quot;: {\n    &quot;method&quot;: &quot;post&quot;,\n    &quot;url&quot;: &quot;/api/mock2/form/saveForm&quot;,\n    &quot;data&quot;: {\n        &quot;a.b&quot;: &quot;${name}&quot;,\n        &quot;c[d]&quot;: &quot;${name}&quot;\n    }\n\n}\n</code></pre>\n<p>最终发送出去的数据格式为</p>\n<pre><code>{\n  a: {\n    b: &quot;xxx&quot;\n  },\n  c: {\n    d: &quot;xxx&quot;\n  }\n}\n</code></pre>\n<p>如果数据映射中的 key 不想被处理路径则需要配置 <code>convertKeyToPath</code> 为 false 如：</p>\n<pre><code>&quot;api&quot;: {\n    &quot;method&quot;: &quot;post&quot;,\n    &quot;url&quot;: &quot;/api/mock2/form/saveForm&quot;,\n    &quot;convertKeyToPath&quot;: false,\n    &quot;data&quot;: {\n        &quot;a.b&quot;: &quot;${name}&quot;,\n        &quot;c[d]&quot;: &quot;${name}&quot;\n    }\n\n}\n</code></pre>\n<p>这样发送的数据格式为</p>\n<pre><code>{\n  &quot;a.b&quot;: &quot;xxx&quot;,\n  &quot;c[d]&quot;: &quot;xxx&quot;\n}\n</code></pre>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F\" href=\"#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置请求数据格式</h3><p>可以配置<code>dataType</code>，来指定请求的数据体格式，默认为<code>json</code></p>\n<blockquote>\n<p>下面例子中 api 没有配置<code>data</code>属性，因为<code>form</code>会默认将所有表单项的值进行提交。</p>\n</blockquote>\n<h4><a class=\"anchor\" name=\"application-json\" href=\"#application-json\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>application/json</h4><p>默认是<code>application/json</code>，不需要额外配置。</p>\n<blockquote>\n<p>注意：当数据域里的 key 为 <code>&amp;</code> 且值为 <code>$$</code> 时, 将所有原始数据打平设置到 <code>data</code> 中.</p>\n</blockquote>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"title\": \"默认JSON格式\",\n    \"api\": {\n        \"method\": \"post\",\n        \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n        \"data\":{\n            \"&\": \"$$$$\" // 获取表单数据域中的所有值\n        }\n    },\n    \"body\": [\n      {\n        \"type\": \"input-text\",\n        \"name\": \"name\",\n        \"label\": \"姓名：\"\n      },\n      {\n        \"name\": \"email\",\n        \"type\": \"input-email\",\n        \"label\": \"邮箱：\"\n      }\n    ]\n  }\n</script></div><div class=\"markdown-body\">\n<h4><a class=\"anchor\" name=\"application-x-www-form-urlencoded\" href=\"#application-x-www-form-urlencoded\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>application/x-www-form-urlencoded</h4><p>配置<code>&quot;dataType&quot;: &quot;form&quot;</code>，可配置发送体格式为<code>application/x-www-form-urlencoded</code></p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"api\": {\n        \"method\": \"post\",\n        \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n        \"dataType\": \"form\"\n    },\n    \"body\": [\n      {\n        \"type\": \"input-text\",\n        \"name\": \"name\",\n        \"label\": \"姓名：\"\n      },\n      {\n        \"name\": \"email\",\n        \"type\": \"input-email\",\n        \"label\": \"邮箱：\"\n      }\n    ]\n  }\n</script></div><div class=\"markdown-body\">\n<h4><a class=\"anchor\" name=\"multipart-form-data\" href=\"#multipart-form-data\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>multipart/form-data</h4><p>配置<code>&quot;dataType&quot;: &quot;form-data&quot;</code>，可配置发送体格式为<code>multipart/form-data</code></p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"api\": {\n        \"method\": \"post\",\n        \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n        \"dataType\": \"form-data\"\n    },\n    \"body\": [\n      {\n        \"type\": \"input-text\",\n        \"name\": \"name\",\n        \"label\": \"姓名：\"\n      },\n      {\n        \"name\": \"email\",\n        \"type\": \"input-email\",\n        \"label\": \"邮箱：\"\n      }\n    ]\n  }\n</script></div><div class=\"markdown-body\">\n<p>当表单项中文件类型数据，则自动使用<code>multipart/form-data</code>数据体</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"api\": {\n        \"method\": \"post\",\n        \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\"\n    },\n    \"body\": [\n      {\n        \"type\": \"input-text\",\n        \"name\": \"name\",\n        \"label\": \"姓名：\"\n      },\n      {\n        \"name\": \"file\",\n        \"type\": \"input-file\",\n        \"label\": \"附件：\",\n        \"asBlob\": true\n      }\n    ]\n  }\n</script></div><div class=\"markdown-body\">\n<blockquote>\n<p><code>asBlob</code>配置项会指定当前 File 控件不再自己上传了，而是直接把文件数据作为表单项的值，文件内容会在 Form 表单提交的接口里面一起带上。</p>\n</blockquote>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%A4%B4\" href=\"#%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%A4%B4\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置自定义请求头</h3><p>可以配置<code>headers</code>对象，添加自定义请求头</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"api\": {\n        \"method\": \"post\",\n        \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n        \"headers\": {\n            \"my-header\": \"aaa\"\n        }\n    },\n    \"body\": [\n      {\n        \"type\": \"input-text\",\n        \"name\": \"name\",\n        \"label\": \"姓名：\"\n      },\n      {\n        \"name\": \"email\",\n        \"type\": \"input-email\",\n        \"label\": \"邮箱：\"\n      }\n    ]\n  }\n</script></div><div class=\"markdown-body\">\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%9D%A1%E4%BB%B6\" href=\"#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%9D%A1%E4%BB%B6\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置请求条件</h3><p>可以配置表达式<code>sendOn</code>来实现：当符合某个条件的情况下，接口才触发请求</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"title\": \"\",\n    \"type\": \"form\",\n    \"mode\": \"horizontal\",\n    \"body\": [\n      {\n        \"label\": \"选项1\",\n        \"type\": \"radios\",\n        \"name\": \"a\",\n        \"inline\": true,\n        \"options\": [\n          {\n            \"label\": \"选项A\",\n            \"value\": 1\n          },\n          {\n            \"label\": \"选项B\",\n            \"value\": 2\n          },\n          {\n            \"label\": \"选项C\",\n            \"value\": 3\n          }\n        ]\n      },\n      {\n        \"label\": \"选项2\",\n        \"type\": \"select\",\n        \"size\": \"sm\",\n        \"name\": \"b\",\n        \"source\": {\n            \"method\": \"get\",\n            \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/options/level2?a=${a}\",\n            \"sendOn\": \"this.a === 2\"\n        },\n        \"description\": \"只有<code>选项1</code>选择<code>B</code>的时候，才触发<code>选项2</code>的<code>source</code>接口重新拉取\"\n      }\n    ],\n    \"actions\": []\n}\n</script></div><div class=\"markdown-body\">\n<p>查看 <strong>选项 2</strong> 的<code>source</code>属性，他是 API 类型值，支持配置<code>sendOn</code> <a href=\"../concepts/expression\">表达式</a>，实现根据条件请求接口。</p>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E6%8E%A5%E5%8F%A3%E7%BC%93%E5%AD%98\" href=\"#%E9%85%8D%E7%BD%AE%E6%8E%A5%E5%8F%A3%E7%BC%93%E5%AD%98\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置接口缓存</h3><p>当你在某种情况下，需要非常频繁的请求同一个接口，例如列表中，每一行中都有一个 Service 进行数据拉取操作，</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"crud\",\n    \"api\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/sample?waitSeconds=1\",\n    \"columns\": [\n        {\n            \"name\": \"id\",\n            \"label\": \"ID\"\n        },\n        {\n            \"type\": \"service\",\n            \"label\": \"数据\",\n            \"api\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/page/initData\",\n            \"body\": {\n                \"type\": \"tpl\",\n                \"tpl\": \"当前日期是：${date}\"\n            }\n        }\n    ]\n}\n</script></div><div class=\"markdown-body\">\n<p>如上，如果你打开浏览器网络面板，会发现<code>/api/mock2/page/initData</code>接口将重复请求多次，次数为你当前列表的数据条数。</p>\n<p>这往往并不理想，你可以设置<code>cache</code>来设置缓存时间，单位是毫秒，在设置的缓存时间内，同样的请求将不会重复发起，而是会获取缓存好的请求响应数据。</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"crud\",\n    \"api\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/sample?waitSeconds=1\",\n    \"columns\": [\n        {\n            \"name\": \"id\",\n            \"label\": \"ID\"\n        },\n        {\n            \"type\": \"service\",\n            \"label\": \"数据\",\n            \"api\": {\n                \"method\": \"get\",\n                \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/page/initData\",\n                \"cache\": 2000\n            },\n            \"body\": {\n                \"type\": \"tpl\",\n                \"tpl\": \"当前日期是：${date}\"\n            }\n        }\n    ]\n}\n</script></div><div class=\"markdown-body\">\n<p>这下我们再打开网络面板，发现只有一条请求了</p>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE\" href=\"#%E9%85%8D%E7%BD%AE%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置返回数据</h3><p>如果接口返回的数据结构不符合预期，可以通过配置 <code>responseData</code>来修改，同样支持<a href=\"../concepts/data-mapping\">数据映射</a>，可用来映射的数据为接口的实际数据（接口返回的 <code>data</code> 部分），额外加 <code>api</code> 变量。其中 <code>api.query</code> 为接口发送的 query 参数，<code>api.body</code> 为接口发送的内容体原始数据。</p>\n<blockquote>\n<p>注意：当数据域里的 key 为 <code>&amp;</code> 且值为 <code>$$</code> 时, 表示将所有原始数据打平设置到 <code>data</code> 中.</p>\n</blockquote>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"initApi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/xxx\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"responseData\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"&amp;\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$$\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"first\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${items|first}\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>假如接口实际返回为：</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"items\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>经过映射，给组件的数据为：</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"items\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"first\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"a\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>另一个常用示例是 <code>&quot;type&quot;: &quot;select&quot;</code> 的 <code>source</code> 数据源，如果接口返回的是：</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"myLabel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lab\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"myValue\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>而 select 所需的数据格式是 <code>[{&quot;label&quot;: &quot;lab&quot;, &quot;value&quot;: 1}]</code>，如何进行映射？</p>\n<p>方法是</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"select\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"source\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://xxx\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"responseData\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${items|pick:label~myLabel,value~myValue}\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>需要注意上面例子中 <code>items</code> 是因为数据直接放在了 <code>data</code> 中，如果是放在其他字段中就换成对应的字段名。</p>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E9%80%82%E9%85%8D%E5%99%A8\" href=\"#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E9%80%82%E9%85%8D%E5%99%A8\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置请求适配器</h3><p>amis 的 API 配置，如果无法配置出你想要的请求结构，那么可以配置<code>requestAdaptor</code>发送适配器</p>\n<p><strong>发送适配器</strong> 是指在接口请求前，对请求进行一些自定义处理，例如修改发送数据体、添加请求头、等等，基本用法是，获取暴露的<code>api</code>参数，并且对该参数进行一些修改，并<code>return</code>出去：</p>\n<h5><a class=\"anchor\" name=\"%E6%9A%B4%E9%9C%B2%E7%9A%84%E5%8F%82%E6%95%B0\" href=\"#%E6%9A%B4%E9%9C%B2%E7%9A%84%E5%8F%82%E6%95%B0\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>暴露的参数</h5><p>发送适配器暴露以下参数以供用户进行操作:</p>\n<ul>\n<li><strong>api</strong>：当前请求的 api 对象，一般包含下面几个属性：<ul>\n<li>url：当前接口 Api 地址</li>\n<li>method：当前请求的方式</li>\n<li>data：请求的数据体, 注意当请求方式为 <code>get</code> 时，<code>data</code> 在传入适配器时会被删除，请通过 query 读取，或者修改</li>\n<li>query：请求的查询参数，所有请求参数都会被合并到 query 中，包含 data 参数和 url 参数</li>\n<li>headers：请求的头部信息</li>\n<li>context: 发送请求时的上下文数据</li>\n</ul>\n</li>\n<li><strong>context</strong> 发送请求时的上下文数据</li>\n</ul>\n<blockquote>\n<p>6.5.0 版本开始支持在发送适配中修改 query 参数，之前的版本只能修改 url 参数。</p>\n</blockquote>\n<h5><a class=\"anchor\" name=\"%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BD%A2%E5%BC%8F\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BD%A2%E5%BC%8F\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>字符串形式</h5><p>如果在 JSON 文件中配置的话，<code>requestAdaptor</code>只支持字符串形式。</p>\n<p>用法示例：</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"api\": {\n        \"method\": \"post\",\n        \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n        \"requestAdaptor\": \"console.log(context); // 打印上下文数据\\nreturn {\\n    ...api,\\n    data: {\\n        ...api.data,    // 获取暴露的 api 中的 data 变量\\n        foo: 'bar'      // 新添加数据\\n    }\\n}\"\n    },\n    \"body\": [\n      {\n        \"type\": \"input-text\",\n        \"name\": \"name\",\n        \"label\": \"姓名：\"\n      },\n      {\n        \"name\": \"email\",\n        \"type\": \"input-email\",\n        \"label\": \"邮箱：\"\n      }\n    ]\n  }\n</script></div><div class=\"markdown-body\">\n<p>上例中的适配器实际上是如下代码的字符串形式：</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 进行一些操作</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印上下文数据</span>\n\n<span class=\"token comment\">// 一定要将调整后的 api 对象 return 出去</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>api<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>api<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 获取暴露的 api 中的 data 变量</span>\n    <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token comment\">// 新添加数据</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>字符串形式的适配器代码最后会自动包裹成函数，你只需要补充内部的函数实现，并将修改好的 <code>api</code> 对象 <code>return</code> 出去：</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">api<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 你的适配器代码在这里</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a class=\"anchor\" name=\"%E5%87%BD%E6%95%B0%E5%BD%A2%E5%BC%8F\" href=\"#%E5%87%BD%E6%95%B0%E5%BD%A2%E5%BC%8F\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数形式</h5><p>如果你的使用环境为 js 文件，则可以直接传入函数，如下：</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">api</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">requestAdaptor</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">api<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印上下文数据</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>api<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>api<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 获取暴露的 api 中的 data 变量</span>\n          <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token comment\">// 新添加数据</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'input-text'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'姓名：'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'input-email'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'邮箱：'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>上面例子中，我们获取暴露的<code>api</code>对象中的<code>data</code>变量，并且为其添加了一个新的字段<code>foo</code>，并且一起返回出去就可以了，这样我们的请求数据体中就会加上我们这个新的字段。</p>\n<p>你也可以使用<code>debugger</code>自行进行调试。</p>\n<h4><a class=\"anchor\" name=\"%E6%8B%A6%E6%88%AA%E8%AF%B7%E6%B1%82\" href=\"#%E6%8B%A6%E6%88%AA%E8%AF%B7%E6%B1%82\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>拦截请求</h4><p>如果 api 发送适配器中，修改 api 对象，在 api 对象里面放入 <code>mockResponse</code> 属性，则会拦截请求发送，amis 内部会直接使用 <code>mockResponse</code> 的结果返回。</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">api</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">requestAdaptor</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">api<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 模拟 http 请求返回</span>\n        <span class=\"token literal-property property\">mockResponse</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// http 返回状态</span>\n          <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// http 返回结果</span>\n            <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// amis 返回数据的状态</span>\n            <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'模拟返回的值'</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'input-text'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'姓名：'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'input-email'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'邮箱：'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E6%8E%A5%E6%94%B6%E9%80%82%E9%85%8D%E5%99%A8\" href=\"#%E9%85%8D%E7%BD%AE%E6%8E%A5%E6%94%B6%E9%80%82%E9%85%8D%E5%99%A8\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置接收适配器</h3><p>同样的，如果后端返回的响应结构不符合 amis 的<a href=\"#-e6-8e-a5-e5-8f-a3-e8-bf-94-e5-9b-9e-e6-a0-bc-e5-bc-8f-e9-87-8d-e8-a6-81-\">接口格式要求</a>，而后端不方便调整时，可以配置<code>adaptor</code>实现接收适配器</p>\n<p><strong>接收适配器</strong> 是指在接口请求后，对响应进行一些自定义处理，例如修改响应的数据结构、修改响应的数据等等。</p>\n<p>例如：接口正确返回的格式中，会返回<code>&quot;code&quot;: 200</code>，而 amis 中，接口返回格式需要<code>&quot;status&quot;: 0</code>，这时候就需要接收适配器进行调整结构。</p>\n<h5><a class=\"anchor\" name=\"%E6%9A%B4%E9%9C%B2%E7%9A%84%E5%8F%82%E6%95%B0\" href=\"#%E6%9A%B4%E9%9C%B2%E7%9A%84%E5%8F%82%E6%95%B0\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>暴露的参数</h5><p>接收适配器器暴露以下参数以供用户进行操作:</p>\n<ul>\n<li><strong>payload</strong>：当前请求的响应 payload，即 response.data</li>\n<li><strong>response</strong>：当前请求的原始响应</li>\n<li><strong>api</strong>：api 上的配置项，还可以通过 <code>api.data</code> 获得数据域里的内容</li>\n<li><strong>context</strong> 发送请求时的上下文数据</li>\n</ul>\n<h5><a class=\"anchor\" name=\"%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BD%A2%E5%BC%8F\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BD%A2%E5%BC%8F\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>字符串形式</h5><p>如果在 JSON 文件中配置的话，<code>adaptor</code>只支持字符串形式。</p>\n<p>用法示例：</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n  \"type\": \"form\",\n  \"api\": {\n    \"method\": \"post\",\n    \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n    \"adaptor\": \"console.log(context); // 打印上下文数据 \\nreturn {\\n    ...payload,\\n    status: payload.code === 200 ? 0 : payload.code\\n}\"\n  },\n  \"body\": [\n    {\n      \"type\": \"input-text\",\n      \"name\": \"name\",\n      \"label\": \"姓名：\"\n    },\n    {\n      \"name\": \"file\",\n      \"type\": \"input-file\",\n      \"label\": \"附件：\",\n      \"asBlob\": true\n    }\n  ]\n}\n</script></div><div class=\"markdown-body\">\n<p>上例中的适配器实际上是如下代码的字符串形式：</p>\n<pre><code class=\"language-js\"><span class=\"token comment\">// 进行一些操作</span>\n\n<span class=\"token comment\">// 一定要将调整后的 payload 对象 return 出去</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>payload<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> payload<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> payload<span class=\"token punctuation\">.</span>code\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>字符串形式的适配器代码最后会自动包裹成函数，你只需要补充内部的函数实现，并将修改好的 <code>payload</code> 对象 <code>return</code> 出去：</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">payload<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 你的适配器代码在这里</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h5><a class=\"anchor\" name=\"%E5%87%BD%E6%95%B0%E5%BD%A2%E5%BC%8F\" href=\"#%E5%87%BD%E6%95%B0%E5%BD%A2%E5%BC%8F\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数形式</h5><p>如果你的使用环境为 js 文件，则可以直接传入函数，如下：</p>\n<pre><code class=\"language-js\"><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">api</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">adaptor</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">payload<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> api<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印上下文数据</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>payload<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> payload<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">200</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> payload<span class=\"token punctuation\">.</span>code\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'input-text'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'姓名：'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'input-email'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'邮箱：'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置文件下载</h3><p>如果 API 返回的是文件下载，需要加上这个配置：</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        ... <span class=\"token comment\">// 其他配置</span>\n        <span class=\"token property\">\"responseType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blob\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>比如点一个按钮下载的完整示例是：</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"actionType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ajax\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"responseType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blob\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>还需要在这个 <code>/api</code> 返回的 header 中配置 <code>content-type</code> 和 <code>Content-Disposition</code>，比如</p>\n<pre><code>Content-Type: application/pdf\nContent-Disposition: attachment; filename=&quot;download.pdf&quot;\n</code></pre>\n<p>如果只有 <code>Content-Type</code>，比如 Excel 的 <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code>，则应该使用<a href=\"../../components/action#直接跳转\">页面跳转</a>的方式来实现下载。</p>\n<p>如果是跨域请求，还需要配置</p>\n<pre><code>Access-Control-Expose-Headers: Content-Disposition\n</code></pre>\n<p>如果自己覆盖了 <code>fetcher</code> 函数，需要有类似如下代码，具体可以参考 <code>embed.tsx</code> 里的实现</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">attachmentAdpator</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3><a class=\"anchor\" name=\"%E9%85%8D%E7%BD%AE%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF\" href=\"#%E9%85%8D%E7%BD%AE%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置提示信息</h3><p>可以通过<code>messages</code>自定义接口请求提示信息。</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"type\": \"form\",\n    \"api\": {\n        \"method\": \"post\",\n        \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n        \"data\": {\n            \"myName\": \"${name}\",\n            \"myEmail\": \"${email}\"\n        },\n        \"messages\": {\n          \"success\": '好耶，成功了！',\n          \"failed\": '糟糕，失败了！'\n        }\n\n    },\n    \"body\": [\n      {\n        \"type\": \"input-text\",\n        \"name\": \"name\",\n        \"label\": \"姓名：\"\n      },\n      {\n        \"name\": \"email\",\n        \"type\": \"input-email\",\n        \"label\": \"邮箱：\"\n      }\n    ]\n}\n</script></div><div class=\"markdown-body\">\n<h3><a class=\"anchor\" name=\"replacedata\" href=\"#replacedata\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>replaceData</h3><p>返回的数据是否替换掉当前的数据，默认为 <code>false</code>（即追加），设置为<code>true</code>就是完全替换当前数据。</p>\n<h2><a class=\"anchor\" name=\"%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0\" href=\"#%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自动刷新</h2><p>凡是拉取类接口，默认都会开启自动刷新，比如 form 配置 initApi: <code>/api/initForm?tpl=${tpl}</code>。这个接口会在 form 初始化的请求。当接口中有参数时，amis 会监控这个接口的实际结果是否有变化，假如这个时候 form 里面有个字段名为 tpl 的表单项，它的值发生变化，这个 form 的 initApi 又会请求一次。</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\" scope=\"body\">{\n  \"type\": \"form\",\n  \"mode\": \"horizontal\",\n  \"title\": \"监听表单内部的修改\",\n  \"initApi\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/initData?tpl=${tpl}\",\n  \"actions\": [],\n  \"body\": [\n    {\n      \"label\": \"数据模板\",\n      \"type\": \"select\",\n      \"labelClassName\": \"text-muted\",\n      \"name\": \"tpl\",\n      \"value\": \"tpl1\",\n      \"inline\": true,\n      \"options\": [\n        {\n          \"label\": \"模板1\",\n          \"value\": \"tpl1\"\n        },\n        {\n          \"label\": \"模板2\",\n          \"value\": \"tpl2\"\n        },\n        {\n          \"label\": \"模板3\",\n          \"value\": \"tpl3\"\n        }\n      ],\n      \"description\": \"<span class=\\\"text-danger\\\">请修改这里看效果</span>\"\n    },\n    {\n      \"label\": \"名称\",\n      \"type\": \"static\",\n      \"labelClassName\": \"text-muted\",\n      \"name\": \"name\"\n    },\n    {\n      \"label\": \"作者\",\n      \"type\": \"static\",\n      \"labelClassName\": \"text-muted\",\n      \"name\": \"author\"\n    },\n    {\n      \"label\": \"请求时间\",\n      \"type\": \"static-datetime\",\n      \"labelClassName\": \"text-muted\",\n      \"format\": \"YYYY-MM-DD HH:mm:ss\",\n      \"name\": \"date\"\n    }\n  ]\n}\n</script></div><div class=\"markdown-body\">\n<p>这个功能是自动开启的，直接配置 api 地址（<code>/api/xxx?xx=${xxx}</code>），或者对象形式配置 <code>{method: &#39;get&#39;, url: &#39;/api/xxx?xx=${xxx}&#39;}</code> 都会自动启动这个功能。如果想要关闭这个功能，有两种方式。</p>\n<ol>\n<li>把依赖的数据写在对象形式的 data 里面比如 <code>{method: &#39;get&#39;, url: &#39;/api/xxx&#39;, data: {&#39;xx&#39;: &quot;${xxx}&quot;}}</code>。</li>\n<li>对象形式添加 <code>autoRefresh: false</code> 属性。</li>\n</ol>\n<p>【重点】利用这个 feature 结合 <code>sendOn</code> 接口发送条件，可以做到接口的串行加载。比如，接口 2 的地址上写上接口 1 会返回的某个字段，然后配置接口 2 的发送条件为这个字段必须存在时。这样接口 2 就会等接口 1 完了才会加载。</p>\n<h2><a class=\"anchor\" name=\"%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0\" href=\"#%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>跟踪数据自动刷新</h2><blockquote>\n<p>since 1.1.6</p>\n</blockquote>\n<p>之前的版本，配置的 api 默认就会具备自动刷新功能，除非显式的配置 <code>autoRefresh: false</code> 来关闭。自动刷新主要通过跟踪 api 的 url 属性来完成的，如果 url 中了使用了某个变量，而这个变量发生变化则会触发自动刷新。\n也就说这个 url 地址，既能控制 api 请求的 query 参数，同时又起到跟踪变量重新刷新接口的作用。这个设定大部分情况下都是合理的，但是有时候想要跟踪 url 参数以外的变量就做不到了。所以新增了此属性 <code>trackExpression</code>，显式的配置需要跟踪的变量如：</p>\n<blockquote>\n<p>如果<code>trackExpression</code> 追踪的数据是<strong>对象数据</strong>，可以使用<a href=\"../../docs/concepts/data-mapping\">数据映射</a>的<code>json</code>方法将数据序列化之后再比较，例如<code>&quot;trackExpression&quot;: &quot;${fieldToTrack|json}&quot;</code></p>\n</blockquote>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n    \"title\": \"\",\n    \"type\": \"form\",\n    \"mode\": \"horizontal\",\n    \"body\": [\n      {\n        \"label\": \"选项1\",\n        \"type\": \"radios\",\n        \"name\": \"a\",\n        \"inline\": true,\n        \"options\": [\n          {\n            \"label\": \"选项A\",\n            \"value\": 1\n          },\n          {\n            \"label\": \"选项B\",\n            \"value\": 2\n          },\n          {\n            \"label\": \"选项C\",\n            \"value\": 3\n          }\n        ]\n      },\n      {\n        \"label\": \"选项2\",\n        \"type\": \"select\",\n        \"size\": \"sm\",\n        \"name\": \"b\",\n        \"source\": {\n          \"method\": \"get\",\n          \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/options/level2\",\n          \"trackExpression\": \"${a}\"\n        },\n        \"description\": \"切换<code>选项1</code>的值，会触发<code>选项2</code>的<code>source</code> 接口重新拉取\"\n      }\n    ],\n    \"actions\": []\n}\n</script></div><div class=\"markdown-body\">\n<h2><a class=\"anchor\" name=\"graphql\" href=\"#graphql\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL</h2><p>1.7.0 及之前的版本需要通过配置 <code>data</code> 里的 <code>query</code> 和 <code>variables</code> 字段可以实现 GraphQL 查询</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n  \"type\": \"form\",\n  \"api\": {\n    \"method\": \"post\",\n    \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n    \"data\": {\n      \"query\": \"mutation AddUser($name: String!, $email: String!) { \\\n        insert_user(object: { title: $title, email: $email }) { \\\n          title \\\n          email \\\n        } \\\n      }\",\n      \"variables\": {\n         \"name\": \"${name}\",\n         \"email\": \"${email}\"\n      }\n    }\n  },\n  \"body\": [\n    {\n      \"type\": \"input-text\",\n      \"name\": \"name\",\n      \"label\": \"姓名：\"\n    },\n    {\n      \"name\": \"email\",\n      \"type\": \"input-email\",\n      \"label\": \"邮箱：\"\n    }\n  ]\n}\n</script></div><div class=\"markdown-body\">\n<p>1.8.0 及以上版本简化了 GraphQL 的支持，增加了 <code>graphql</code> 属性，如果配置了就会自动并自动将 data 当成 <code>variables</code>，上面的例子可以简化为下面的写法，除了简化之外还方便了可视化编辑器编辑</p>\n</div><div class=\"amis-preview\" style=\"min-height: undefinedpx\"><script type=\"text/schema\"  scope=\"body\">{\n  \"type\": \"form\",\n  \"api\": {\n    \"method\": \"post\",\n    \"url\": \"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/form/saveForm\",\n    \"graphql\": \"mutation AddUser($name: String!, $email: String!) { \\\n        insert_user(object: { name: $name, email: $email }) { \\\n          name \\\n          email \\\n        } \\\n    }\"\n  },\n  \"body\": [\n    {\n      \"type\": \"input-text\",\n      \"name\": \"name\",\n      \"label\": \"姓名：\"\n    },\n    {\n      \"name\": \"email\",\n      \"type\": \"input-email\",\n      \"label\": \"邮箱：\"\n    }\n  ]\n}\n</script></div><div class=\"markdown-body\">\n<p>如果设置了 <code>data</code> 会被当成 <code>variables</code>，比如在 CRUD 里设置分页参数，比如下面的例子</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"crud\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://3xsw4ap8wah59.cfc-execute.bj.baidubce.com/api/amis-mock/mock2/sample\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"graphql\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"{ pages(page: $page, perPage: $perPage) { id, engine } }\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"page\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${page}\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"perPage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${perPage}\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"columns\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ID\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"engine\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Rendering engine\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2><a class=\"anchor\" name=\"%E5%B1%9E%E6%80%A7%E8%A1%A8\" href=\"#%E5%B1%9E%E6%80%A7%E8%A1%A8\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>属性表</h2><table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>说明</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>method</td>\n<td>请求方式</td>\n<td>字符串</td>\n<td>支持：get、post、put、delete</td>\n</tr>\n<tr>\n<td>url</td>\n<td>请求地址</td>\n<td><a href=\"https://suda.bce.baidu.com/docs/template#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2\">模板字符串</a></td>\n<td>-</td>\n</tr>\n<tr>\n<td>data</td>\n<td>请求数据</td>\n<td>对象或字符串</td>\n<td>支持数据映射</td>\n</tr>\n<tr>\n<td>dataType</td>\n<td>数据体格式</td>\n<td>字符串</td>\n<td>默认为 <code>json</code> 可以配置成 <code>form</code> 或者 <code>form-data</code>。当 <code>data</code> 中包含文件时，自动会采用 <code>form-data（multipart/form-data）</code> 格式。当配置为 <code>form</code> 时为 <code>application/x-www-form-urlencoded</code> 格式。</td>\n</tr>\n<tr>\n<td>qsOptions</td>\n<td>--</td>\n<td>对象或字符串</td>\n<td>当 dataType 为 form 或者 form-data 的时候有用。具体参数请参考这里，默认设置为: <code>{ arrayFormat: &#39;indices&#39;, encodeValuesOnly: true }</code></td>\n</tr>\n<tr>\n<td>headers</td>\n<td>请求头</td>\n<td>对象</td>\n<td>-</td>\n</tr>\n<tr>\n<td>sendOn</td>\n<td>请求条件</td>\n<td><a href=\"../concepts/expression\">表达式</a></td>\n<td>-</td>\n</tr>\n<tr>\n<td>cache</td>\n<td>接口缓存时间</td>\n<td>整型数字</td>\n<td>-</td>\n</tr>\n<tr>\n<td>requestAdaptor</td>\n<td>发送适配器</td>\n<td>字符串</td>\n<td>，支持字符串串格式，或者直接就是函数如：</td>\n</tr>\n<tr>\n<td>adaptor</td>\n<td>接收适配器</td>\n<td>字符串</td>\n<td>如果接口返回不符合要求，可以通过配置一个适配器来处理成 amis 需要的。同样支持 Function 或者 字符串函数体格式</td>\n</tr>\n<tr>\n<td>replaceData</td>\n<td>替换当前数据</td>\n<td>布尔</td>\n<td>返回的数据是否替换掉当前的数据，默认为 <code>false</code>，即：<code>追加</code>，设置成 <code>true</code> 就是完全替换。</td>\n</tr>\n<tr>\n<td>responseType</td>\n<td>返回类型</td>\n<td>字符串</td>\n<td>如果是下载需要设置为 &#39;blob&#39;</td>\n</tr>\n<tr>\n<td>autoRefresh</td>\n<td>是否自动刷新</td>\n<td>布尔</td>\n<td>配置是否需要自动刷新接口。</td>\n</tr>\n<tr>\n<td>responseData</td>\n<td>配置返回数据</td>\n<td>对象</td>\n<td>对返回结果做个映射</td>\n</tr>\n<tr>\n<td>trackExpression</td>\n<td>跟踪变量</td>\n<td>字符串</td>\n<td>配置跟踪变量表达式</td>\n</tr>\n<tr>\n<td>messages</td>\n<td>提示信息</td>\n<td>对象</td>\n<td>配置接口请求的提示信息，messages.success 表示请求成功提示信息、messages.failed 表示请求失败提示信息，2.4.1 及以上版本</td>\n</tr>\n</tbody></table>\n</div>",
    "toc": {
      "label": "目录",
      "type": "toc",
      "children": [
        {
          "label": "简单配置",
          "fragment": "%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE",
          "fullPath": "#%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE",
          "level": 2
        },
        {
          "label": "接口返回格式（重要）",
          "fragment": "%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F-%E9%87%8D%E8%A6%81-",
          "fullPath": "#%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F-%E9%87%8D%E8%A6%81-",
          "level": 2,
          "children": [
            {
              "label": "正确的格式",
              "fragment": "%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%A0%BC%E5%BC%8F",
              "fullPath": "#%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%A0%BC%E5%BC%8F",
              "level": 3
            },
            {
              "label": "错误的格式",
              "fragment": "%E9%94%99%E8%AF%AF%E7%9A%84%E6%A0%BC%E5%BC%8F",
              "fullPath": "#%E9%94%99%E8%AF%AF%E7%9A%84%E6%A0%BC%E5%BC%8F",
              "level": 3
            },
            {
              "label": "兼容格式",
              "fragment": "%E5%85%BC%E5%AE%B9%E6%A0%BC%E5%BC%8F",
              "fullPath": "#%E5%85%BC%E5%AE%B9%E6%A0%BC%E5%BC%8F",
              "level": 3
            },
            {
              "label": "配置弹框时间",
              "fragment": "%E9%85%8D%E7%BD%AE%E5%BC%B9%E6%A1%86%E6%97%B6%E9%97%B4",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E5%BC%B9%E6%A1%86%E6%97%B6%E9%97%B4",
              "level": 3
            }
          ]
        },
        {
          "label": "复杂配置",
          "fragment": "%E5%A4%8D%E6%9D%82%E9%85%8D%E7%BD%AE",
          "fullPath": "#%E5%A4%8D%E6%9D%82%E9%85%8D%E7%BD%AE",
          "level": 2,
          "children": [
            {
              "label": "基本用法",
              "fragment": "%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95",
              "fullPath": "#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95",
              "level": 3
            },
            {
              "label": "配置请求方式",
              "fragment": "%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F",
              "level": 3
            },
            {
              "label": "配置请求地址",
              "fragment": "%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80",
              "level": 3
            },
            {
              "label": "配置请求数据",
              "fragment": "%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE",
              "level": 3
            },
            {
              "label": "不处理 key 中的路径",
              "fragment": "%E4%B8%8D%E5%A4%84%E7%90%86-key-%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84",
              "fullPath": "#%E4%B8%8D%E5%A4%84%E7%90%86-key-%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84",
              "level": 3
            },
            {
              "label": "配置请求数据格式",
              "fragment": "%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F",
              "level": 3,
              "children": [
                {
                  "label": "application/json",
                  "fragment": "application-json",
                  "fullPath": "#application-json",
                  "level": 4
                },
                {
                  "label": "application/x-www-form-urlencoded",
                  "fragment": "application-x-www-form-urlencoded",
                  "fullPath": "#application-x-www-form-urlencoded",
                  "level": 4
                },
                {
                  "label": "multipart/form-data",
                  "fragment": "multipart-form-data",
                  "fullPath": "#multipart-form-data",
                  "level": 4
                }
              ]
            },
            {
              "label": "配置自定义请求头",
              "fragment": "%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%A4%B4",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%A4%B4",
              "level": 3
            },
            {
              "label": "配置请求条件",
              "fragment": "%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%9D%A1%E4%BB%B6",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E6%9D%A1%E4%BB%B6",
              "level": 3
            },
            {
              "label": "配置接口缓存",
              "fragment": "%E9%85%8D%E7%BD%AE%E6%8E%A5%E5%8F%A3%E7%BC%93%E5%AD%98",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E6%8E%A5%E5%8F%A3%E7%BC%93%E5%AD%98",
              "level": 3
            },
            {
              "label": "配置返回数据",
              "fragment": "%E9%85%8D%E7%BD%AE%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE",
              "level": 3
            },
            {
              "label": "配置请求适配器",
              "fragment": "%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E9%80%82%E9%85%8D%E5%99%A8",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E9%80%82%E9%85%8D%E5%99%A8",
              "level": 3,
              "children": [
                {
                  "label": "拦截请求",
                  "fragment": "%E6%8B%A6%E6%88%AA%E8%AF%B7%E6%B1%82",
                  "fullPath": "#%E6%8B%A6%E6%88%AA%E8%AF%B7%E6%B1%82",
                  "level": 4
                }
              ]
            },
            {
              "label": "配置接收适配器",
              "fragment": "%E9%85%8D%E7%BD%AE%E6%8E%A5%E6%94%B6%E9%80%82%E9%85%8D%E5%99%A8",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E6%8E%A5%E6%94%B6%E9%80%82%E9%85%8D%E5%99%A8",
              "level": 3
            },
            {
              "label": "配置文件下载",
              "fragment": "%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD",
              "level": 3
            },
            {
              "label": "配置提示信息",
              "fragment": "%E9%85%8D%E7%BD%AE%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF",
              "fullPath": "#%E9%85%8D%E7%BD%AE%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF",
              "level": 3
            },
            {
              "label": "replaceData",
              "fragment": "replacedata",
              "fullPath": "#replacedata",
              "level": 3
            }
          ]
        },
        {
          "label": "自动刷新",
          "fragment": "%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0",
          "fullPath": "#%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0",
          "level": 2
        },
        {
          "label": "跟踪数据自动刷新",
          "fragment": "%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0",
          "fullPath": "#%E8%B7%9F%E8%B8%AA%E6%95%B0%E6%8D%AE%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0",
          "level": 2
        },
        {
          "label": "GraphQL",
          "fragment": "graphql",
          "fullPath": "#graphql",
          "level": 2
        },
        {
          "label": "属性表",
          "fragment": "%E5%B1%9E%E6%80%A7%E8%A1%A8",
          "fullPath": "#%E5%B1%9E%E6%80%A7%E8%A1%A8",
          "level": 2
        }
      ],
      "level": 0
    }
  };

});
